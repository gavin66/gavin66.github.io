<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gavin&#39;s Blog</title>
  
  <subtitle>宁愿小众,不愿平庸</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.imgavin.me/"/>
  <updated>2019-05-27T08:43:10.161Z</updated>
  <id>http://blog.imgavin.me/</id>
  
  <author>
    <name>Gavin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>相亲告示牌</title>
    <link href="http://blog.imgavin.me/2019/05/24/date/"/>
    <id>http://blog.imgavin.me/2019/05/24/date/</id>
    <published>2019-05-24T09:17:47.000Z</published>
    <updated>2019-05-27T08:43:10.161Z</updated>
    
    <content type="html"><![CDATA[<p>这是为了相亲而写的个人信息总结，差不多就是自己20多年的高度浓缩自评。以下都是实事求是，不会有弄虚作假，含糊不清的信息。当然，会有一些隐私我是不想透露在网上的（其实很少），等到真正聊天时我肯定会说明白的。</p><a id="more"></a><ul><li><p>基本</p><p>男（1991.7.23，174cm，68kg），天津人，专科（计算机信息技术），北京工作，程序员</p></li><li><p>经济</p><p>老爹在河西区有一套老破小（我在住），静海有一套100+平米的养老房，未来买房可以考虑卖掉老房子。</p><p>北京程序员平均工资水平。</p><p>个人存款一半在货币基金（余额宝），一半在指数基金，还有北京公积金会一季度一提取。即使失业，存款够用几年，有一定抗风险能力。存款具体数字不透露。</p><p>已给自己配置寿险和重疾险。</p></li><li><p>家庭</p><p>老爹已退休且有退休金，身体健康，平时会跟老年团旅行，不用过多操心。未来计划静海养老，自娱自乐。</p><p>母亲2013年乳腺癌去世。</p><p>爷爷奶奶姥姥姥爷都已不在，由于历史原因亲戚也不多，家族关系简单，未来只需要全心全意照顾老爹。</p></li><li><p>爱好</p><p>独行，去过西藏，新疆，内蒙，东三省等自然风景壮丽的地区</p><p>游戏，PS，NS，PC 等</p></li><li><p>照片</p><p>平时不会自拍，这类照片很少，将就看</p><img src="/2019/05/24/date/p1.jpg"><img src="/2019/05/24/date/p2.jpg"></li><li><p>自我评价</p><p>喜欢安静，略内向，话少。</p><p>做事认真，强迫症，洁癖。</p><p>不吸烟喝酒，无不良嗜好。</p><p>极简，物质需求低。拒绝超前消费，存款使我有安全感，工资的65%以上会强制储蓄。</p><p>没有大野心，只想在脚踏实地提高工资的基础上，做自己的 Side Project。</p><p>独立生活多年，生活常识技能自评很高。老爹没有能力给我很大助力，都需要靠我自己，以前是未来也会是。</p></li><li><p>希望你</p><p>身体健康，不胖不瘦，无重大缺陷。</p><p>不吸烟喝酒泡吧纹身，无不良嗜好。</p><p>独立，善良，孝顺。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是为了相亲而写的个人信息总结，差不多就是自己20多年的高度浓缩自评。以下都是实事求是，不会有弄虚作假，含糊不清的信息。当然，会有一些隐私我是不想透露在网上的（其实很少），等到真正聊天时我肯定会说明白的。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.imgavin.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="相亲" scheme="http://blog.imgavin.me/tags/%E7%9B%B8%E4%BA%B2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 中 markdown语法特殊字符转义</title>
    <link href="http://blog.imgavin.me/2019/05/21/hexo-escapes/"/>
    <id>http://blog.imgavin.me/2019/05/21/hexo-escapes/</id>
    <published>2019-05-21T08:20:14.000Z</published>
    <updated>2019-05-21T08:33:22.244Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 中使用 “\” 无法转移，只能插入特殊字符的编码，以下是它们的列表。</p><table><thead><tr><th>特殊字符</th><th>编码</th></tr></thead><tbody><tr><td>&#45;</td><td><code>&amp;#45;</code></td></tr><tr><td>&#33;</td><td><code>&amp;#33;</code></td></tr><tr><td>&#34;</td><td><code>&amp;#34;</code></td></tr><tr><td>&#37;</td><td><code>&amp;#37;</code></td></tr><tr><td>&#38;</td><td><code>&amp;#38;</code></td></tr><tr><td>&#39;</td><td><code>&amp;#39;</code></td></tr><tr><td>&#40;</td><td><code>&amp;#40;</code></td></tr><tr><td>&#41;</td><td><code>&amp;#41;</code></td></tr><tr><td>&#42;</td><td><code>&amp;#42;</code></td></tr><tr><td>&#43;</td><td><code>&amp;#43;</code></td></tr><tr><td>&#60;</td><td><code>&amp;#60;</code></td></tr><tr><td>&#61;</td><td><code>&amp;#61;</code></td></tr><tr><td>&#62;</td><td><code>&amp;#62;</code></td></tr><tr><td>&#63;</td><td><code>&amp;#63;</code></td></tr><tr><td>&#64;</td><td><code>&amp;#64;</code></td></tr><tr><td>&#91;</td><td><code>&amp;#91;</code></td></tr><tr><td>&#92;</td><td><code>&amp;#92;</code></td></tr><tr><td>&#93;</td><td><code>&amp;#93;</code></td></tr><tr><td>&#123;</td><td><code>&amp;#123;</code></td></tr><tr><td>&#124;</td><td><code>&amp;#124;</code></td></tr><tr><td>&#125;</td><td><code>&amp;#125;</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 中使用 “\” 无法转移，只能插入特殊字符的编码，以下是它们的列表。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特殊字符&lt;/th&gt;
&lt;th&gt;编码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#45;&lt;/td&gt;
&lt;td
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="hexo" scheme="http://blog.imgavin.me/tags/hexo/"/>
    
      <category term="markdown" scheme="http://blog.imgavin.me/tags/markdown/"/>
    
      <category term="转义" scheme="http://blog.imgavin.me/tags/%E8%BD%AC%E4%B9%89/"/>
    
      <category term="escapes" scheme="http://blog.imgavin.me/tags/escapes/"/>
    
  </entry>
  
  <entry>
    <title>XPath - XML 路径语言 （XML Path Language）</title>
    <link href="http://blog.imgavin.me/2019/05/21/xml-path-language/"/>
    <id>http://blog.imgavin.me/2019/05/21/xml-path-language/</id>
    <published>2019-05-21T07:24:55.000Z</published>
    <updated>2019-05-21T08:52:10.275Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>XPath</strong>即为<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">计算机语言</a>。</p><p>XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。起初XPath的提出的初衷是将其作为一个通用的、介于<a href="https://zh.wikipedia.org/w/index.php?title=XPointer&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">XPointer</a>与<a href="https://zh.wikipedia.org/wiki/XSL" target="_blank" rel="noopener">XSL</a>间的语法模型。但是XPath很快的被开发者采用来当作小型<a href="https://zh.wikipedia.org/wiki/%E6%9F%A5%E8%A9%A2%E8%AA%9E%E8%A8%80" target="_blank" rel="noopener">查询语言</a>。</p><footer><strong>Wikipedia</strong><cite><a href="https://zh.wikipedia.org/wiki/XPath" target="_blank" rel="noopener">zh.wikipedia.org/wiki/XPath</a></cite></footer></blockquote><a id="more"></a><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul><li>斜杠（/）作为路径内部的分割符。</li><li>“.” 表示当前节点。</li><li>“..” 表示当前节点的父节点</li><li>nodename（节点名称）：表示选择该节点的所有子节点</li><li>“/“：表示选择根节点</li><li>“//“：表示选择任意位置的某个节点</li><li>“@”： 表示选择某个属性</li><li>“*”： 表示匹配任何元素节点</li><li>“@*”： 表示匹配任何属性值</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"eng"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"eng"</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>bookstore</td><td>选取所有 bookstore 元素</td></tr><tr><td>/bookstore</td><td>选取根节点bookstore</td></tr><tr><td>bookstore/book</td><td>选取所有属于 bookstore 元素的 book 子元素</td></tr><tr><td>//book</td><td>选择所有 book 子元素，而不管它们在文档中的位置</td></tr><tr><td>bookstore//book</td><td>选择所有属于 bookstore 元素的后代的 book 元素，而不管它们位于 bookstore 之下的什么位置</td></tr><tr><td>//@lang</td><td>选取所有名为 lang 的属性</td></tr><tr><td>/bookstore/book[1]</td><td>表示选择bookstore的第一个book子元素</td></tr><tr><td>/bookstore/book[last()]</td><td>表示选择bookstore的最后一个book子元素</td></tr><tr><td>/bookstore/book[last()-1]</td><td>表示选择bookstore的倒数第二个book子元素</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>表示选择bookstore的前两个book子元素</td></tr><tr><td>//title[@lang]</td><td>表示选择所有具有lang属性的title节点</td></tr><tr><td>//title[@lang=’eng’]</td><td>表示选择所有lang属性的值等于”eng”的title节点</td></tr><tr><td>/bookstore/book[price]</td><td>表示选择bookstore的book子元素，且被选中的book元素必须带有price子元素</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>表示选择bookstore的book子元素，且被选中的book元素的price子元素值必须大于35</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>表示在例14结果集中，选择title子元素</td></tr><tr><td>/bookstore/book/price[.&gt;35.00]</td><td>表示选择值大于35的”/bookstore/book”的price子元素</td></tr><tr><td>//*</td><td>选择文档中的所有元素节点</td></tr><tr><td>/<em>/</em></td><td>表示选择所有第二层的元素节点</td></tr><tr><td>/bookstore/*</td><td>表示选择bookstore的所有元素子节点</td></tr><tr><td>//title[@*]</td><td>表示选择所有带有属性的title元素</td></tr><tr><td>//book/title &#124; //book/price</td><td>表示同时选择book元素的title子元素和price子元素</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2009/07/xpath_path_expressions.html" target="_blank" rel="noopener">xpath路径表达式笔记</a></li><li><a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">XPath 语法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;XPath&lt;/strong&gt;即为&lt;a href=&quot;https://zh.wikipedia.org/wiki/XML&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XML&lt;/a&gt;路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;计算机语言&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。起初XPath的提出的初衷是将其作为一个通用的、介于&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=XPointer&amp;amp;action=edit&amp;amp;redlink=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XPointer&lt;/a&gt;与&lt;a href=&quot;https://zh.wikipedia.org/wiki/XSL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XSL&lt;/a&gt;间的语法模型。但是XPath很快的被开发者采用来当作小型&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9F%A5%E8%A9%A2%E8%AA%9E%E8%A8%80&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查询语言&lt;/a&gt;。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Wikipedia&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/XPath&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zh.wikipedia.org/wiki/XPath&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="爬虫" scheme="http://blog.imgavin.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="xpath" scheme="http://blog.imgavin.me/tags/xpath/"/>
    
      <category term="crawler" scheme="http://blog.imgavin.me/tags/crawler/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用 homebrew 安装过时包</title>
    <link href="http://blog.imgavin.me/2019/05/21/mac-homebrew-deprecated/"/>
    <id>http://blog.imgavin.me/2019/05/21/mac-homebrew-deprecated/</id>
    <published>2019-05-21T07:12:15.000Z</published>
    <updated>2019-05-21T07:21:04.946Z</updated>
    
    <content type="html"><![CDATA[<p>因为最新版的 homebrew 已无法从官方库安装 PHP5.6，所以才有了这篇博文。</p><p>方法真的很简单，只需要添加第三方库再安装你需要的过时包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加第三方库</span></span><br><span class="line">brew tap exolnet/homebrew-deprecated</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装你需要的包</span></span><br><span class="line">brew install &lt;formula&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为最新版的 homebrew 已无法从官方库安装 PHP5.6，所以才有了这篇博文。&lt;/p&gt;
&lt;p&gt;方法真的很简单，只需要添加第三方库再安装你需要的过时包。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="homebrew" scheme="http://blog.imgavin.me/tags/homebrew/"/>
    
      <category term="mac" scheme="http://blog.imgavin.me/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor 使用笔记</title>
    <link href="http://blog.imgavin.me/2019/05/21/supervisor-note/"/>
    <id>http://blog.imgavin.me/2019/05/21/supervisor-note/</id>
    <published>2019-05-21T02:49:41.000Z</published>
    <updated>2019-05-21T08:52:14.804Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://supervisord.org/" target="_blank" rel="noopener">Supervisor</a> 是一个用 Python 写在类 UNIX 中的进程管理工具，可以很方便的用来启动、重启、关闭控制许多进程。Supervisor易于学习，配置文件很简单；它集中管理进程；通过 fork/exec 启动子进程并对它高效控制；它兼容除 windows 外的类 UNIX 系统，在Linux，Mac OS X，Solaris和FreeBSD上经过测试和支持。</p><p>Supervisor 拥有服务端 <strong>supervisord</strong> 和客户端 <strong>supervisorctl</strong> 。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="使用-Python-包管理工具-pip-安装"><a href="#使用-Python-包管理工具-pip-安装" class="headerlink" title="使用 Python 包管理工具 pip 安装"></a>使用 Python 包管理工具 pip 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>安装完成后，你就可以运行命令 <code>echo_supervisord_conf</code> 来打印 Supervisor 的配置样例。然后你就可以再运行<code>echo_supervisor_conf &gt; /etc/supervisord.conf</code> 来创建配置文件，启动时会默认读取文件<code>/etc/supervisord.conf</code>。或者在启动时指定 <code>-c</code> 参数来指定配置文件的路径。</p><p>配置文件创建完成后，可按照你自己的需求来自行配置文件。</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><h2 id="运行-supervisord"><a href="#运行-supervisord" class="headerlink" title="运行 supervisord"></a>运行 supervisord</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure><h2 id="supervisord-命令行参数"><a href="#supervisord-命令行参数" class="headerlink" title="supervisord 命令行参数"></a>supervisord 命令行参数</h2><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">-c FILE, –configuration=FILE</td><td style="text-align:center">supervisord 配置文件路径</td></tr><tr><td style="text-align:left">-n, –nodaemon</td><td style="text-align:center">在前台运行 supervisord</td></tr><tr><td style="text-align:left">-h, –help</td><td style="text-align:center">命令行帮助信息</td></tr><tr><td style="text-align:left">-u USER, –user=USER</td><td style="text-align:center">UNIX 用户名或数字标识。以什么用户来运行 supervisord</td></tr><tr><td style="text-align:left">-m OCTAL, –umask=OCTAL</td><td style="text-align:center">设置 umask 如：022</td></tr><tr><td style="text-align:left">-d PATH, –directory=PATH</td><td style="text-align:center">当supervisord作为守护进程运行时，在守护进程之前 cd 到此目录。</td></tr><tr><td style="text-align:left">-l FILE, –logfile=FILE</td><td style="text-align:center">指定 supervisord 的日志路径</td></tr><tr><td style="text-align:left">-y BYTES, –logfile_maxbytes=BYTES</td><td style="text-align:center">日志最大占用空间 默认字节。如：’1’ 为1字节，’1MB’为1兆字节，’1GB’为1千兆字节</td></tr><tr><td style="text-align:left">-z NUM, –logfile_backups=NUM</td><td style="text-align:center">日志备份数</td></tr><tr><td style="text-align:left">-e LEVEL, –loglevel=LEVEL</td><td style="text-align:center">日志记录级别。<code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>, <code>critical</code></td></tr><tr><td style="text-align:left">-j FILE, –pidfile=FILE</td><td style="text-align:center">supervisord 启动时的 pid 写入的文件路径</td></tr><tr><td style="text-align:left">-i STRING, –identifier=STRING</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">-q PATH, –childlogdir=PATH</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">-k, –nocleanup</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">-a NUM, –minfds=NUM</td><td style="text-align:center">启动前，supervisord 可用的文件描述符数</td></tr><tr><td style="text-align:left">-t, –strip_ansi</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">-v, –version</td><td style="text-align:center">打印版本号</td></tr><tr><td style="text-align:left">–profile_options=LIST</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">–minprocs=NUM</td><td style="text-align:center">在成功启动之前，supervisord进程可用的最小OS进程槽数</td></tr></tbody></table><h2 id="运行-supervisorctl"><a href="#运行-supervisorctl" class="headerlink" title="运行 supervisorctl"></a>运行 supervisorctl</h2><h2 id="supervisorctl-命令行参数"><a href="#supervisorctl-命令行参数" class="headerlink" title="supervisorctl 命令行参数"></a>supervisorctl 命令行参数</h2><table><thead><tr><th>参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>-c, –configuration</td><td style="text-align:center">配置文件路径（默认为/etc/supervisord.conf）</td></tr><tr><td>-h, –help</td><td style="text-align:center">命令行帮助信息</td></tr><tr><td>-i, –interactive</td><td style="text-align:center">启动交互式 shell</td></tr><tr><td>-s, –serverurl URL</td><td style="text-align:center">supervisord服务器正在侦听的URL（默认为”<a href="http://localhost:9001&quot;" target="_blank" rel="noopener">http://localhost:9001&quot;</a> ）</td></tr><tr><td>-u, –username</td><td style="text-align:center">身份验证用户名</td></tr><tr><td>-p, –password</td><td style="text-align:center">身份验证密码</td></tr><tr><td>-r, –history-file</td><td style="text-align:center">保留历史记录？</td></tr></tbody></table><h2 id="supervisorctl-Actions"><a href="#supervisorctl-Actions" class="headerlink" title="supervisorctl Actions"></a>supervisorctl Actions</h2><table><thead><tr><th>Action</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>help</td><td style="text-align:center">帮助信息</td></tr><tr><td>help &lt;action></td><td style="text-align:center">打印 action 的帮助信息</td></tr><tr><td>add &lt;name> […]</td><td style="text-align:center">更新进程或组的配置</td></tr><tr><td>remove &lt;name> […]</td><td style="text-align:center">删除进程或组的配置</td></tr><tr><td>update</td><td style="text-align:center">重新加载配置，重启受影响的进程</td></tr><tr><td>update all</td><td style="text-align:center">重新加载配置，重启受影响的进程</td></tr><tr><td>update &lt;gname> […]</td><td style="text-align:center">更新指定组，重启受影响的进程</td></tr><tr><td>clear &lt;name></td><td style="text-align:center">清除进程日志文件</td></tr><tr><td>clear &lt;name> &lt;name></td><td style="text-align:center">清除多个进程日志文件</td></tr><tr><td>clear all</td><td style="text-align:center">清除所有进程日志文件</td></tr><tr><td>fg &lt;process></td><td style="text-align:center">进入一个进程的前端界面，然后按 Ctrl+C 退出</td></tr><tr><td>pid</td><td style="text-align:center">获得supervisord的PID</td></tr><tr><td>pid &lt;name></td><td style="text-align:center">按名称获取单个子进程的PID</td></tr><tr><td>pid all</td><td style="text-align:center">获取每个子进程的PID，每行一个</td></tr><tr><td>reload</td><td style="text-align:center">重新启动</td></tr><tr><td>reread</td><td style="text-align:center">重新加载守护进程的配置文件</td></tr><tr><td>restart &lt;name></td><td style="text-align:center">重新启动进程。注意：重新启动不会重新读取配置文件</td></tr><tr><td>restart &lt;gname>:*</td><td style="text-align:center">重新启动组中所有进程。注意：重新启动不会重新读取配置文件</td></tr><tr><td>restart &lt;name> &lt;name></td><td style="text-align:center">重新启动多个进程或组。注意：重新启动不会重新读取配置文件</td></tr><tr><td>restart all</td><td style="text-align:center">重新启动所有进程。注意：重新启动不会重新读取配置文件</td></tr><tr><td>signal</td><td style="text-align:center">没有信号帮助？</td></tr><tr><td>start &lt;name></td><td style="text-align:center">启动一个进程</td></tr><tr><td>start &lt;gname>:*</td><td style="text-align:center">启动组中所有进程</td></tr><tr><td>start &lt;name> &lt;name></td><td style="text-align:center">启动多个进程和组</td></tr><tr><td>start all</td><td style="text-align:center">启动所有进程</td></tr><tr><td>status</td><td style="text-align:center">获取所有进程状态</td></tr><tr><td>status &lt;name></td><td style="text-align:center">按名称获取一个进程状态</td></tr><tr><td>status &lt;name> &lt;name></td><td style="text-align:center">获取多个进程状态</td></tr><tr><td>stop &lt;name></td><td style="text-align:center">停止一个进程</td></tr><tr><td>stop &lt;gname>:*</td><td style="text-align:center">停止组中所有进程</td></tr><tr><td>stop &lt;name> &lt;name></td><td style="text-align:center">停止多个进程和组</td></tr><tr><td>stop all</td><td style="text-align:center">停止所有进程</td></tr><tr><td>tail [-f] &lt;name> [stdout &#124; stderr] (default stdout)</td><td style="text-align:center">输出进程日志</td></tr></tbody></table><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>可以发送信号到 <strong>supervisord</strong> 以执行某些动作。可以将信号发送到单个 <strong>supervisord</strong> 进程，此进程标识可以在配置文件的 <strong>[supervisord]</strong> 部分中的 <strong>pidfile</strong> 参数找到</p><ul><li><p><code>SIGTERM</code></p><p><strong>supervisord</strong> 及其所有子进程将关闭。这可能需要几秒钟。</p></li><li><p><code>SIGINT</code></p><p><strong>supervisord</strong> 及其所有子进程将关闭。这可能需要几秒钟。</p></li><li><p><code>SIGQUIT</code></p><p><strong>supervisord</strong> 及其所有子进程将关闭。这可能需要几秒钟。</p></li><li><p><code>SIGHUP</code></p><p><strong>supervisord</strong> 将停止所有进程，重新加载配置文件并启动所有进程。</p></li><li><p><code>SIGUSR2</code></p><p><strong>supervisord</strong> 将重新打开主日志和所有子日志。</p></li></ul><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;*为必须填写项</span></span><br><span class="line"><span class="comment">;*[program:应用名称]</span></span><br><span class="line"><span class="section">[program:cat]</span></span><br><span class="line"><span class="comment">;*命令路径,如果使用python启动的程序应该为 python /home/test.py,</span></span><br><span class="line"><span class="comment">;不建议放入/home/user/, 对于非user用户一般情况下是不能访问</span></span><br><span class="line"><span class="attr">command</span>=/bin/cat</span><br><span class="line"><span class="comment">;当numprocs为1时,process_name=%(program_name)s</span></span><br><span class="line"><span class="comment">;当numprocs&gt;=2时,%(program_name)s_%(process_num)02d</span></span><br><span class="line"><span class="attr">process_name</span>=%(program_name)s</span><br><span class="line"><span class="comment">;使用supervisor还有一个更大的好处就是，可以快速开启多个进程，配置参数如下：</span></span><br><span class="line"><span class="comment">;进程数量,表示对同一个配置开启1个线程。</span></span><br><span class="line"><span class="attr">numprocs</span>=<span class="number">1</span></span><br><span class="line"><span class="comment">;执行目录,若有/home/supervisor_test/test1.py</span></span><br><span class="line"><span class="comment">;将directory设置成/home/supervisor_test</span></span><br><span class="line"><span class="comment">;则command只需设置成python test1.py</span></span><br><span class="line"><span class="comment">;否则command必须设置成绝对执行目录</span></span><br><span class="line"><span class="attr">directory</span>=/tmp</span><br><span class="line"><span class="comment">;掩码:--- -w- -w-, 转换后rwx r-x w-x</span></span><br><span class="line"><span class="attr">umask</span>=<span class="number">022</span></span><br><span class="line"><span class="comment">;优先级,值越高,最后启动,最先被关闭,默认值999</span></span><br><span class="line"><span class="attr">priority</span>=<span class="number">999</span></span><br><span class="line"><span class="comment">;如果是true,当supervisor启动时,程序将会自动启动</span></span><br><span class="line"><span class="attr">autostart</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">;*自动重启</span></span><br><span class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">;启动延时执行,默认1秒</span></span><br><span class="line"><span class="attr">startsecs</span>=<span class="number">10</span></span><br><span class="line"><span class="comment">;启动尝试次数,默认3次</span></span><br><span class="line"><span class="attr">startretries</span>=<span class="number">3</span></span><br><span class="line"><span class="comment">;当退出码是0,2时,执行重启,默认值0,2</span></span><br><span class="line"><span class="attr">exitcodes</span>=<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="comment">;停止信号,默认TERM</span></span><br><span class="line"><span class="comment">;中断:INT(类似于Ctrl+C)(kill -INT pid),退出后会将写文件或日志(推荐)</span></span><br><span class="line"><span class="comment">;终止:TERM(kill -TERM pid)</span></span><br><span class="line"><span class="comment">;挂起:HUP(kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同</span></span><br><span class="line"><span class="comment">;从容停止:QUIT(kill -QUIT pid)</span></span><br><span class="line"><span class="comment">;KILL, USR1, USR2其他见命令(kill -l),说明1</span></span><br><span class="line"><span class="attr">stopsignal</span>=TERM</span><br><span class="line"><span class="attr">stopwaitsecs</span>=<span class="number">10</span></span><br><span class="line"><span class="comment">;*以root用户执行</span></span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="comment">;有时候用 Supervisor 托管的程序还会有子进程（如 Tornado），如果只杀死主进程，子进程就可能变成孤儿进程。</span></span><br><span class="line"><span class="comment">;通过这两项配置(改为true)来确保所有子进程都能正确停止,默认是false：</span></span><br><span class="line"><span class="attr">stopasgroup</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">killasgroup</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">;重定向,把stderr重定向到stdout，默认false；</span></span><br><span class="line"><span class="attr">redirect_stderr</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">;标准日志输出</span></span><br><span class="line"><span class="attr">stdout_logfile</span>=/a/path</span><br><span class="line"><span class="comment">;标准日志文件大小，默认50MB</span></span><br><span class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">1</span>MB</span><br><span class="line"><span class="comment">;标准日志文件大小，默认50MB</span></span><br><span class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">stdout_capture_maxbytes</span>=<span class="number">1</span>MB</span><br><span class="line"><span class="comment">;标准日志输出</span></span><br><span class="line"><span class="attr">stderr_logfile</span>=/a/path</span><br><span class="line"><span class="attr">stderr_logfile_maxbytes</span>=<span class="number">1</span>MB</span><br><span class="line"><span class="attr">stderr_logfile_backups</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">stderr_capture_maxbytes</span>=<span class="number">1</span>MB</span><br><span class="line"><span class="comment">;环境变量设置</span></span><br><span class="line"><span class="attr">environment</span>=A=<span class="string">"1"</span>,B=<span class="string">"2"</span></span><br><span class="line"><span class="attr">serverurl</span>=AUTO</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://supervisord.org/" target="_blank" rel="noopener">官方文档</a></li><li><a href="https://www.rddoc.com/doc/Supervisor/3.3.1/zh/" target="_blank" rel="noopener">中文翻译文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://supervisord.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Supervisor&lt;/a&gt; 是一个用 Python 写在类 UNIX 中的进程管理工具，可以很方便的用来启动、重启、关闭控制许多进程。Supervisor易于学习，配置文件很简单；它集中管理进程；通过 fork/exec 启动子进程并对它高效控制；它兼容除 windows 外的类 UNIX 系统，在Linux，Mac OS X，Solaris和FreeBSD上经过测试和支持。&lt;/p&gt;
&lt;p&gt;Supervisor 拥有服务端 &lt;strong&gt;supervisord&lt;/strong&gt; 和客户端 &lt;strong&gt;supervisorctl&lt;/strong&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://blog.imgavin.me/tags/linux/"/>
    
      <category term="supervisor" scheme="http://blog.imgavin.me/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令 - yum</title>
    <link href="http://blog.imgavin.me/2019/03/15/linux-cmd-yum/"/>
    <id>http://blog.imgavin.me/2019/03/15/linux-cmd-yum/</id>
    <published>2019-03-15T03:26:45.000Z</published>
    <updated>2019-03-15T07:41:25.959Z</updated>
    
    <content type="html"><![CDATA[<p>yum (Yellowdog Updater Modified)  是一个基于 rpm 的交互式包管理器.可以基于依赖的安装更新包.yum 类似与 apt-get 的高级包管理器.</p><a id="more"></a><h1 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h1><img src="/2019/03/15/linux-cmd-yum/p1.jpg"><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装指定的安装包</span></span><br><span class="line">yum install [package_name] </span><br><span class="line"><span class="comment"># 安装程序组</span></span><br><span class="line">yum groupinsall [group_name]</span><br></pre></td></tr></table></figure><h2 id="更新和升级"><a href="#更新和升级" class="headerlink" title="更新和升级"></a>更新和升级</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全部更新</span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新指定程序包</span></span><br><span class="line">yum update [package_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查可更新的程序</span></span><br><span class="line">yum check-update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级指定程序包</span></span><br><span class="line">yum upgrade [package_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级程序组</span></span><br><span class="line">yum groupupdate [group_name]</span><br></pre></td></tr></table></figure><h2 id="查找和显示"><a href="#查找和显示" class="headerlink" title="查找和显示"></a>查找和显示</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示安装包信息</span></span><br><span class="line">yum info [package_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有已经安装和可以安装的程序包</span></span><br><span class="line">yum list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定程序包安装情况</span></span><br><span class="line">yum list [package_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示程序组信息</span></span><br><span class="line">yum groupinfo [group_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据关键字查找安装包</span></span><br><span class="line">yum search [key]</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除程序包</span></span><br><span class="line">yum remove | erase [package_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除程序组</span></span><br><span class="line">yum groupremove [package_name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看程序依赖情况</span></span><br><span class="line">yum deplist [package_name]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;yum (Yellowdog Updater Modified)  是一个基于 rpm 的交互式包管理器.可以基于依赖的安装更新包.yum 类似与 apt-get 的高级包管理器.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
      <category term="cmd" scheme="http://blog.imgavin.me/tags/cmd/"/>
    
      <category term="yum" scheme="http://blog.imgavin.me/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>Laravel源码分析 - 生存周期</title>
    <link href="http://blog.imgavin.me/2019/01/03/laravel-lifecycle/"/>
    <id>http://blog.imgavin.me/2019/01/03/laravel-lifecycle/</id>
    <published>2019-01-03T03:29:39.000Z</published>
    <updated>2019-01-04T10:18:56.923Z</updated>
    
    <content type="html"><![CDATA[<p>如果仅仅想使用 laravel 开发项目，你只需要看官方的文档就可以做到。开发过程中遇到的大部分问题都可以使用搜索引擎找到答案，剩下刁钻的大部分问题又可以向技术论坛提问来获取答案。但即使这样，仍旧会有无法解决的问题，这时候你就会在这里卡壳，项目无法进行下去，于是你加班…</p><p>但如果你已经学习过源码，对它很熟悉，那么你就能找到问题的源头，来修复它。</p><p>学习好的项目源码，可以提升你的编程能力，规范你的项目结构、代码格式、命名方式等。</p><p>所以我把学习 laravel 源码的过程记录下来，这会是一个系列。</p><a id="more"></a><p>根据 <code>public/index.php</code> 来分析比较浅显的声明周期</p><img src="/2019/01/03/laravel-lifecycle/p1.png"><figure class="highlight php"><figcaption><span>index.php</span><a href="https://github.com/laravel/laravel/blob/v5.7.19/public/index.php" target="_blank" rel="noopener">Github</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// composer 加载器</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 Application(它也是一个容器)</span></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 HTTP 核心处理器</span></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用处理器处理请求并返回响应对象</span></span><br><span class="line"><span class="comment">// 你的逻辑代码基本都会在这里执行，最重要的部分</span></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成响应</span></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后结束运行,这里会处理在中间件中定义的 terminate 方法</span></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><p><strong>下面分析几个组成部分</strong></p><h1 id="初始化-App"><a href="#初始化-App" class="headerlink" title="初始化 App"></a>初始化 <a href="https://laravel.com/api/5.7/Illuminate/Foundation/Application.html" target="_blank" rel="noopener">App</a></h1><img src="/2019/01/03/laravel-lifecycle/p2.png"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($basePath = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 根据传入的根路径，设置应用服务文件的各个路径</span></span><br><span class="line">    <span class="keyword">if</span> ($basePath) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setBasePath($basePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册基本绑定服务</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseBindings();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册基础服务提供者</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseServiceProviders();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务别名</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerCoreContainerAliases();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册基本绑定服务"><a href="#注册基本绑定服务" class="headerlink" title="注册基本绑定服务"></a>注册基本绑定服务</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseBindings</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 绑定自身静态单例</span></span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把自身以单例形式绑定到 app 名称上</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把自身以单例形式绑定到 Container::class 类名上</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(Container::class, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把包自动发现服务绑定到 PackageManifest::class 类名上</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(PackageManifest::class, <span class="keyword">new</span> PackageManifest(</span><br><span class="line">        <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;basePath(), <span class="keyword">$this</span>-&gt;getCachedPackagesPath()</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册基础服务提供者"><a href="#注册基础服务提供者" class="headerlink" title="注册基础服务提供者"></a>注册基础服务提供者</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseServiceProviders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 注册事件服务提供者</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> EventServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line">    <span class="comment">// 注册日志服务提供者</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> LogServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line">    <span class="comment">// 注册路由服务提供者</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> RoutingServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置服务别名"><a href="#设置服务别名" class="headerlink" title="设置服务别名"></a>设置服务别名</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerCoreContainerAliases</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ([</span><br><span class="line">        <span class="string">'app'</span>                  =&gt; [\Illuminate\Foundation\Application::class, \Illuminate\Contracts\Container\Container::class, \Illuminate\Contracts\Foundation\Application::class,  \Psr\Container\ContainerInterface::class],</span><br><span class="line">        <span class="string">'auth'</span>                 =&gt; [\Illuminate\Auth\AuthManager::class, \Illuminate\Contracts\Auth\Factory::class],</span><br><span class="line">        <span class="string">'auth.driver'</span>          =&gt; [\Illuminate\Contracts\Auth\Guard::class],</span><br><span class="line">        <span class="string">'blade.compiler'</span>       =&gt; [\Illuminate\View\Compilers\BladeCompiler::class],</span><br><span class="line">        <span class="string">'cache'</span>                =&gt; [\Illuminate\Cache\CacheManager::class, \Illuminate\Contracts\Cache\Factory::class],</span><br><span class="line">        <span class="string">'cache.store'</span>          =&gt; [\Illuminate\Cache\Repository::class, \Illuminate\Contracts\Cache\Repository::class],</span><br><span class="line">        <span class="string">'config'</span>               =&gt; [\Illuminate\Config\Repository::class, \Illuminate\Contracts\Config\Repository::class],</span><br><span class="line">        <span class="string">'cookie'</span>               =&gt; [\Illuminate\Cookie\CookieJar::class, \Illuminate\Contracts\Cookie\Factory::class, \Illuminate\Contracts\Cookie\QueueingFactory::class],</span><br><span class="line">        <span class="string">'encrypter'</span>            =&gt; [\Illuminate\Encryption\Encrypter::class, \Illuminate\Contracts\Encryption\Encrypter::class],</span><br><span class="line">        <span class="string">'db'</span>                   =&gt; [\Illuminate\Database\DatabaseManager::class],</span><br><span class="line">        <span class="string">'db.connection'</span>        =&gt; [\Illuminate\Database\Connection::class, \Illuminate\Database\ConnectionInterface::class],</span><br><span class="line">        <span class="string">'events'</span>               =&gt; [\Illuminate\Events\Dispatcher::class, \Illuminate\Contracts\Events\Dispatcher::class],</span><br><span class="line">        <span class="string">'files'</span>                =&gt; [\Illuminate\Filesystem\Filesystem::class],</span><br><span class="line">        <span class="string">'filesystem'</span>           =&gt; [\Illuminate\Filesystem\FilesystemManager::class, \Illuminate\Contracts\Filesystem\Factory::class],</span><br><span class="line">        <span class="string">'filesystem.disk'</span>      =&gt; [\Illuminate\Contracts\Filesystem\Filesystem::class],</span><br><span class="line">        <span class="string">'filesystem.cloud'</span>     =&gt; [\Illuminate\Contracts\Filesystem\Cloud::class],</span><br><span class="line">        <span class="string">'hash'</span>                 =&gt; [\Illuminate\Hashing\HashManager::class],</span><br><span class="line">        <span class="string">'hash.driver'</span>          =&gt; [\Illuminate\Contracts\Hashing\Hasher::class],</span><br><span class="line">        <span class="string">'translator'</span>           =&gt; [\Illuminate\Translation\Translator::class, \Illuminate\Contracts\Translation\Translator::class],</span><br><span class="line">        <span class="string">'log'</span>                  =&gt; [\Illuminate\Log\LogManager::class, \Psr\Log\LoggerInterface::class],</span><br><span class="line">        <span class="string">'mailer'</span>               =&gt; [\Illuminate\Mail\Mailer::class, \Illuminate\Contracts\Mail\Mailer::class, \Illuminate\Contracts\Mail\MailQueue::class],</span><br><span class="line">        <span class="string">'auth.password'</span>        =&gt; [\Illuminate\Auth\Passwords\PasswordBrokerManager::class, \Illuminate\Contracts\Auth\PasswordBrokerFactory::class],</span><br><span class="line">        <span class="string">'auth.password.broker'</span> =&gt; [\Illuminate\Auth\Passwords\PasswordBroker::class, \Illuminate\Contracts\Auth\PasswordBroker::class],</span><br><span class="line">        <span class="string">'queue'</span>                =&gt; [\Illuminate\Queue\QueueManager::class, \Illuminate\Contracts\Queue\Factory::class, \Illuminate\Contracts\Queue\Monitor::class],</span><br><span class="line">        <span class="string">'queue.connection'</span>     =&gt; [\Illuminate\Contracts\Queue\Queue::class],</span><br><span class="line">        <span class="string">'queue.failer'</span>         =&gt; [\Illuminate\Queue\Failed\FailedJobProviderInterface::class],</span><br><span class="line">        <span class="string">'redirect'</span>             =&gt; [\Illuminate\Routing\Redirector::class],</span><br><span class="line">        <span class="string">'redis'</span>                =&gt; [\Illuminate\Redis\RedisManager::class, \Illuminate\Contracts\Redis\Factory::class],</span><br><span class="line">        <span class="string">'request'</span>              =&gt; [\Illuminate\Http\Request::class, \Symfony\Component\HttpFoundation\Request::class],</span><br><span class="line">        <span class="string">'router'</span>               =&gt; [\Illuminate\Routing\Router::class, \Illuminate\Contracts\Routing\Registrar::class, \Illuminate\Contracts\Routing\BindingRegistrar::class],</span><br><span class="line">        <span class="string">'session'</span>              =&gt; [\Illuminate\Session\SessionManager::class],</span><br><span class="line">        <span class="string">'session.store'</span>        =&gt; [\Illuminate\Session\Store::class, \Illuminate\Contracts\Session\Session::class],</span><br><span class="line">        <span class="string">'url'</span>                  =&gt; [\Illuminate\Routing\UrlGenerator::class, \Illuminate\Contracts\Routing\UrlGenerator::class],</span><br><span class="line">        <span class="string">'validator'</span>            =&gt; [\Illuminate\Validation\Factory::class, \Illuminate\Contracts\Validation\Factory::class],</span><br><span class="line">        <span class="string">'view'</span>                 =&gt; [\Illuminate\View\Factory::class, \Illuminate\Contracts\View\Factory::class],</span><br><span class="line">    ] <span class="keyword">as</span> $key =&gt; $aliases) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($aliases <span class="keyword">as</span> $alias) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;alias($key, $alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alias</span><span class="params">($abstract, $alias)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 以别名为键，抽象的名为值</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;aliases[$alias] = $abstract;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以抽象的名为键的数组别名</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;abstractAliases[$abstract][] = $alias;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="处理请求，生成响应"><a href="#处理请求，生成响应" class="headerlink" title="处理请求，生成响应"></a>处理请求，生成响应</h1><p>在 <a href="https://github.com/laravel/laravel/blob/v5.7.19/bootstrap/app.php" target="_blank" rel="noopener">bootstrap/app.php</a> 初始化 App 后，还绑定了3个单例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http 内核</span></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line"><span class="comment">// console 控制台内核</span></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这之后在 index.php 继续往下执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上一步已绑定了 http 内核单例，这时就可以解析出它</span></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用它处理请求，返回响应</span></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    <span class="comment">// 创建 Request 实例</span></span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成响应</span></span><br><span class="line">$response-&gt;send();</span><br></pre></td></tr></table></figure><h1 id="结束运行"><a href="#结束运行" class="headerlink" title="结束运行"></a>结束运行</h1><p>最后内核会调用 terminate 方法来终止此次请求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历中间件并执行每个它们的 terminate 方法(如果存在此方法)</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;terminateMiddleware($request, $response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行终止回调</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;terminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果仅仅想使用 laravel 开发项目，你只需要看官方的文档就可以做到。开发过程中遇到的大部分问题都可以使用搜索引擎找到答案，剩下刁钻的大部分问题又可以向技术论坛提问来获取答案。但即使这样，仍旧会有无法解决的问题，这时候你就会在这里卡壳，项目无法进行下去，于是你加班…&lt;/p&gt;
&lt;p&gt;但如果你已经学习过源码，对它很熟悉，那么你就能找到问题的源头，来修复它。&lt;/p&gt;
&lt;p&gt;学习好的项目源码，可以提升你的编程能力，规范你的项目结构、代码格式、命名方式等。&lt;/p&gt;
&lt;p&gt;所以我把学习 laravel 源码的过程记录下来，这会是一个系列。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="laravel" scheme="http://blog.imgavin.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>2018 总结</title>
    <link href="http://blog.imgavin.me/2018/12/27/2018-annual-summary/"/>
    <id>http://blog.imgavin.me/2018/12/27/2018-annual-summary/</id>
    <published>2018-12-27T06:32:33.000Z</published>
    <updated>2019-01-02T02:33:27.179Z</updated>
    
    <content type="html"><![CDATA[<p>2018 即将结束，又该写总结了。好让自己知道这一年做了什么事情，得与失，成与败。还有今年都发生了哪些大事件，我关注的哪些事件，来写一个年度盘点。</p><a id="more"></a><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>结束了远程的工作并在4月份入职新的公司。工作轻松愉快，没有加班文化，工作之余拥有更多自己的时间。并且公司离租的房子步行只有1公里，上下班和中午休息都可以回家吃到自己做的饭，更卫生健康。</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>从4月开始继续天津北京两地跑，只是这次多数时候是两周回一次天津，看心情看情况可能也会周末连续回家。回家陪老爹出门玩一玩，转一转，吃一吃他做的饭，陪伴很重要</p><p>今年明显厨艺见长，因为总不能吃我之前只会做的那几样。需要学习新的品种，优化老的菜品</p><p>老爹去年在静海买的房子终于是交房了，他也开始自己动手装修，真的是自己装修，没有装修队。自己买沙子水泥瓷砖等等，全部自己动手，毕竟他干了几十年建筑。只是他毕竟60岁了，我还有些顾虑，但他知轻重就还好。他在装修之余，凭着他的养老金去了西安，越南等地旅游，终于是舍得花钱，我挺高兴的</p><p>第一次尝试着买基金，目前为止是亏的，希望来年能回本，这要求真低！</p><p>这一年有很多名人去世，霍金、单田芳、李咏、金庸、臧天朔、师胜杰等等，癌症依然是人类的头号敌人</p><p>中国的环境，空气仍旧不乐观，空气清新程度主要依赖刮风的级数</p><p>最近看到好多大公司裁员的信息，各种自媒体宣扬“2019年可能会是过去十年里最差的一年，但却是未来十年里最好的一年”。事实上每年都会有裁员，只不过今年被重点对待了呢。但不管怎样，我自己没有房贷、车贷、负债，而且还是单身狗，老爹又有养老金，即使被裁我也能依靠手里的钱度过这个“冬天”。</p><hr><div class="note info"><p>老爹在西安 2018.04.24 </p></div><img src="/2018/12/27/2018-annual-summary/p2.jpg"><img src="/2018/12/27/2018-annual-summary/p3.jpg"><img src="/2018/12/27/2018-annual-summary/p4.jpg"><hr><div class="note info"><p>老爹和我在蓟县 2018.08.25 </p></div><img src="/2018/12/27/2018-annual-summary/p10.jpg"><img src="/2018/12/27/2018-annual-summary/p11.jpg"><img src="/2018/12/27/2018-annual-summary/p12.jpg"><img src="/2018/12/27/2018-annual-summary/p13.jpg"><img src="/2018/12/27/2018-annual-summary/p14.jpg"><hr><div class="note info"><p>老爹在越南芽庄 2018.11.01 </p></div><img src="/2018/12/27/2018-annual-summary/p5.jpg"><img src="/2018/12/27/2018-annual-summary/p6.jpg"><img src="/2018/12/27/2018-annual-summary/p7.jpg"><img src="/2018/12/27/2018-annual-summary/p8.jpg"><img src="/2018/12/27/2018-annual-summary/p9.jpg"><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><ul><li>网络是怎样连接的</li><li>高性能 Mysql</li><li>亿级流量网站架构核心技术</li><li>赌球记</li></ul><p>这一年没读多少书，一个是自己懒，一个是诱惑太多，下了班只想玩游戏看视频，追漫画的优先级都很低，何况看书。新的一年，多看几本？</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><ul><li>美国末日</li><li>塞尔达传说荒野之息</li><li>超级马里奥奥德赛</li><li>马里奥赛车8</li><li>精灵宝可梦Let’s Go 皮卡丘</li><li>无双大蛇3</li><li>FIFA19</li><li>命运2</li></ul><h2 id="足球"><a href="#足球" class="headerlink" title="足球"></a>足球</h2><p>皇马欧冠三连冠，尤文意甲七连冠，拜仁德甲六连冠</p><p>法国时隔二十年再登世界之巅，克罗地亚延续神奇夺世界杯亚军，上港首夺中超冠军</p><p>姆巴佩惊艳世界杯，莫德里奇成为梅罗时代的第一位金球奖</p><p>梅西第五次夺得欧洲金靴，中国骄傲王霜成为亚足联最佳女运动员</p><p>伊涅斯塔离开巴萨，布冯离开尤文，C 罗离开皇马，托雷斯告别马竞，温格告别阿森纳</p><p>桑巴精灵罗纳尔迪尼奥退役，特里退役，德罗巴退役</p><p>阿斯托里，维猜，张欧影，希望天堂也有足球</p><p>穆里尼奥的曼联第三年下课</p><p><strong>米兰复兴仍看不到希望！</strong></p><div class="video-container"><iframe src="//www.youtube.com/embed/KRdYKHX76SM" frameborder="0" allowfullscreen></iframe></div><h1 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h1><img src="/2018/12/27/2018-annual-summary/p1.jpg" title="Github 2018 贡献图"><ol><li><p><a href="https://github.com/gavin66/crx_toolkit" target="_blank" rel="noopener">crx_toolkit</a> -  chrome 的扩展程序，已上架 <a href="https://chrome.google.com/webstore/detail/toolkit-%E5%B7%A5%E5%85%B7%E7%AE%B1/bcdgpdljiogdmomapjdgnmmhdjipkgkl" target="_blank" rel="noopener">官方商店</a></p><p>由于工作时发现的一些问题和痛点，比如：</p><ul><li>生成二维码要找专门的网站，在它的网站还要点击好几次才能生成一张，批量生成还要收费</li><li>在前端 base64 编码 Emoji 表情，后端解析会出现乱码。而且多个 chrome 的扩展也都有这问题</li></ul><p>所以，决定学习并写一个 chrome 扩展来解决这些问题，以后遇到其他问题也可以把解决方案都放在这个扩展中。还有一些实用工具也会放在里面，主要方便公司的各种专业人士使用。</p></li><li><p><a href="https://github.com/gavin66/track" target="_blank" rel="noopener">track</a> -  PHP 框架</p><p>也是在工作中遇到的问题，客气的说没有规范，不客气的说就是垃圾代码，胡写乱写。开发人员的水平参差不齐。使用外国的框架，找中文的文档，只知道文档内的理论，不懂源码，出现深层次的问题不知如何解决。所以为了解决这种问题并锻炼自己的能力，按照自己对 laravel 的理解写了一个完整的 PHP 框架，注释详细并且全部是中文注释。希望在未来的项目中使用起来，一点点完善它，让它成为公司 PHP 项目的主要框架。</p></li><li><p><a href="https://github.com/gavin66/proxy_list" target="_blank" rel="noopener">proxy_list</a> - 代理池</p><p>维护老项目，解决 github 上提的 issues ，添加了爬取 IP 的地址，提升稳定性等</p></li><li><p><a href="https://github.com/gavin66/go-note" target="_blank" rel="noopener">go-note</a> -  Go 语言学习笔记</p><p>新技能，学习了 Go 语言的基本语法和特性，未来会磨练此技术。在未来业务需求中增加一种技术上选择的可能性。</p></li></ol><p>事实上，这一年在工作或做开源时还有一些其他的成长和收获。比如，加深了对 vue 的理解和使用，微博爬虫的学习等等。</p><h1 id="2019-计划"><a href="#2019-计划" class="headerlink" title="2019 计划"></a>2019 计划</h1><ol><li>学习绘画，使用 iPad Pro 画出一些简单的游戏原型图</li><li>学习 unity，希望2019年能做出个像样的小游戏</li><li>学习 IOS 应用开发，做一个代理应用并上架</li><li>开源项目的维护</li></ol><p><strong>希望2019天下太平，国泰民安，家人身体健康</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018 即将结束，又该写总结了。好让自己知道这一年做了什么事情，得与失，成与败。还有今年都发生了哪些大事件，我关注的哪些事件，来写一个年度盘点。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.imgavin.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://blog.imgavin.me/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计划" scheme="http://blog.imgavin.me/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - grep</title>
    <link href="http://blog.imgavin.me/2018/06/27/linux-cmd-grep/"/>
    <id>http://blog.imgavin.me/2018/06/27/linux-cmd-grep/</id>
    <published>2018-06-27T06:38:44.000Z</published>
    <updated>2018-12-26T06:08:38.487Z</updated>
    
    <content type="html"><![CDATA[<p>grep (global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p><a id="more"></a><h2 id="grep命令的一般选项及实例"><a href="#grep命令的一般选项及实例" class="headerlink" title="grep命令的一般选项及实例"></a>grep命令的一般选项及实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep [OPTIONS] PATTERN [FILE...] </span><br><span class="line">grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]</span><br></pre></td></tr></table></figure><p>grep命令用于搜索由Pattern参数指定的模式，并将每个匹配的行写入标准输出中。这些模式是具有限定的正则表达式，它们使用ed或egrep命令样式。如果在File参数中指定了多个名称，grep命令将显示包含匹配行的文件的名称。对 shell 有特殊含义的字符 ($, *, [, |, ^, (, ), \ ) 出现在 Pattern参数中时必须带双引号。如果 Pattern参数不是简单字符串，通常必须用单引号将整个模式括起来。在诸如 [a-z], 之类的表达式中，-（减号）cml 可根据当前正在整理的序列来指定一个范围。整理序列可以定义等价的类以供在字符范围中使用。如果未指定任何文件，grep会假定为标准输入。</p><h2 id="grep正则表达式元字符集-基本集"><a href="#grep正则表达式元字符集-基本集" class="headerlink" title="grep正则表达式元字符集(基本集)"></a>grep正则表达式元字符集(基本集)</h2><p><code>^</code>  锚定行的开始 如：<code>&#39;^grep&#39;</code>匹配所有以grep开头的行。</p><p><code>$</code>  锚定行的结束 如：<code>&#39;grep$&#39;</code>匹配所有以grep结尾的行。</p><p><code>.</code>   匹配一个非换行符的字符 如：<code>&#39;gr.p&#39;</code>匹配gr后接一个任意字符，然后是p。</p><p><code>*</code>  匹配零个或多个先前字符 如：<code>&#39; *grep&#39;</code>匹配所有一个或多个空格后紧跟grep的行。 <code>.*</code>一起用代表任意字符。</p><p><code>[]</code> 匹配一个指定范围内的字符，如<code>&#39;[Gg]rep&#39;</code>匹配Grep和grep。</p><p><code>[^]</code> 匹配一个不在指定范围内的字符，如：<code>&#39;[^A-FH-Z]rep&#39;</code>匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行。</p><p><code>\(..\)</code>  标记匹配字符，如：<code>&#39;\(love\)&#39;</code>，love被标记为1。</p><p><code>\&lt;</code>  锚定单词的开始，如：<code>&#39;\</code></p><p><code>\&gt;</code>  锚定单词的结束，如<code>&#39;grep\&gt;&#39;</code>匹配包含以grep结尾的单词的行。</p><p><code>x\{m\}</code> 连续重复字符x，m次，如：<code>&#39;o\{5\}&#39;</code>匹配包含连续5个o的行。</p><p><code>x\{m,\}</code> 连续重复字符x,至少m次，如：<code>&#39;o\{5,\}&#39;</code>匹配至少连续有5个o的行。</p><p><code>x\{m,n\}</code> 连续重复字符x，至少m次，不多于n次，如：<code>&#39;o\{5,10\}&#39;</code>匹配连续5–10个o的行。</p><p><code>\w</code>  匹配一个文字和数字字符，也就是[A-Za-z0-9]，如：<code>&#39;G\w*p&#39;</code>匹配以G后跟零个或多个文字或数字字符，然后是p。</p><p><code>\W</code> w的反置形式，匹配一个非单词字符，如点号句号等。<code>\W*</code>则可匹配多个。</p><p><code>\b</code>  单词锁定符，如: <code>&#39;\bgrep\b&#39;</code>只匹配grep，即只能是grep这个单词，两边均为空格。</p><h2 id="grep命令的常用选项"><a href="#grep命令的常用选项" class="headerlink" title="grep命令的常用选项"></a>grep命令的常用选项</h2><p><code>-?</code></p><p>同时显示匹配行上下的？行，如：grep -2 pattern filename同时显示匹配行的上下2行。</p><p><code>-b，--byte-offset</code></p><p>打印匹配行前面打印该行所在的块号码。</p><p><code>-c,--count</code></p><p>只打印匹配的行数，不显示匹配的内容。</p><p><code>-f File，--file=File</code></p><p>从文件中提取模板。空文件中包含0个模板，所以什么都不匹配。</p><p><code>-h，--no-filename</code></p><p>当搜索多个文件时，不显示匹配文件名前缀。</p><p><code>-i，--ignore-case</code></p><p>忽略大小写差别。</p><p><code>-q，--quiet</code></p><p>取消显示，只返回退出状态。0则表示找到了匹配的行。</p><p><code>-l，--files-with-matches</code></p><p>打印匹配模板的文件清单。</p><p><code>-L，--files-without-match</code></p><p>打印不匹配模板的文件清单。</p><p><code>-n，--line-number</code></p><p>在匹配的行前面打印行号。</p><p><code>-s，--silent</code></p><p>不显示关于不存在或者无法读取文件的错误信息。</p><p><code>-v，--revert-match</code></p><p>反检索，只显示不匹配的行。</p><p><code>-w，--word-regexp</code></p><p>如果被\引用，就把表达式做为一个单词搜索。</p><p><code>-V，--version</code></p><p>显示软件版本信息。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>ls -l | grep &#39;^a&#39;</code> ：通过管道过滤ls -l输出的内容，只显示以a开头的行</p><p><code>grep &#39;test&#39; d*</code> ：显示所有以d开头的文件中包含test的行</p><p><code>grep &#39;test&#39; aa bb cc</code> ：显示在aa，bb，cc文件中匹配test的行</p><p><code>grep &#39;[a-z]&#39; aa</code> ：显示所有包含每个字符串至少有5个连续小写字符的字符串的行</p><p><code>grep &#39;w(es)t.*&#39; aa</code> ：如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符(.<em>)，这些字符后面紧跟着另外一个es()，找到就显示该行。如果用egrep或grep -E，就不用””号进行转义，直接写成’w(es)t.</em>‘就可以了</p><p><code>grep -i pattern files</code>：不区分大小写地搜索。默认情况区分大小写</p><p><code>grep -l pattern files</code> ：只列出匹配的文件名</p><p><code>grep -L pattern files</code> ：列出不匹配的文件名</p><p><code>grep -w pattern files</code> ：只匹配整个单词，而不是字符串的一部分(如匹配‘magic’，而不是‘magical’)</p><p><code>grep -C number pattern files</code> ：匹配的上下文分别显示[number]行</p><p><code>grep pattern1 | pattern2 files</code>：显示匹配 pattern1 或 pattern2 的行</p><p><code>grep pattern1 files | grep pattern2</code> ：显示既匹配 pattern1 又匹配 pattern2 的行</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linux.cn/article-1672-1.html" target="_blank" rel="noopener">linux 中强大且常用命令：find、grep</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;grep (global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - find</title>
    <link href="http://blog.imgavin.me/2018/06/27/linux-cmd-find/"/>
    <id>http://blog.imgavin.me/2018/06/27/linux-cmd-find/</id>
    <published>2018-06-27T05:55:33.000Z</published>
    <updated>2018-06-27T06:57:51.219Z</updated>
    
    <content type="html"><![CDATA[<p>find 命令用于在目录及子目录中搜索文件。可以执行搜索规则，如文件名，文件类型，文件修改时间等等。</p><a id="more"></a><h2 id="find命令的一般形式"><a href="#find命令的一般形式" class="headerlink" title="find命令的一般形式"></a>find命令的一般形式</h2><p>man文档中给出的find命令的一般形式为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]</span><br></pre></td></tr></table></figure><p>其实 [-H][-L] [-P][-D debugopts] [-Olevel]这几个选项并不常用（至少在我的日常工作中，没有用到过），上面的find命令的常用形式可以简化为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [path...] [expression]</span><br></pre></td></tr></table></figure><ul><li><p>path：find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录</p></li><li><p>expression：expression可以分为<code>-options [-print -exec -ok ...]</code></p><ul><li><code>-options</code>，指定find命令的常用选项，下节详细介绍</li><li><code>-print</code>，find命令将匹配的文件输出到标准输出</li><li><code>-exec</code>，find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为<code>&#39;command&#39; {  } \;</code>，注意{   }和\；之间的空格<br><code>find ./ -size 0 -exec rm {} \;</code> 删除文件大小为零的文件 （还可以以这样做：<code>rm -i</code>find ./ -size 0<code></code> 或 <code>find ./ -size 0 | xargs rm -f &amp;</code>） </li><li>为了用ls -l命令列出所匹配到的文件，可以把ls -l命令放在find命令的-exec选项中：<code>find . -type f -exec ls -l {  } \;</code><br>在/logs目录中查找更改时间在5日以前的文件并删除它们：<code>find /logs -type f -mtime +5 -exec rm {  } \;</code></li><li><code>-ok</code>，和<code>-exec</code>的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。<br><code>find . -name &quot;*.conf&quot;  -mtime +5 -ok rm {  } \;</code> 在当前目录中查找所有文件名以.LOG结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示</li></ul></li></ul><h2 id="find命令的常用选项及实例"><a href="#find命令的常用选项及实例" class="headerlink" title="find命令的常用选项及实例"></a>find命令的常用选项及实例</h2><ul><li><code>-name</code><br>按照文件名查找文件。<br><code>find /dir -name filename</code> 在/dir目录及其子目录下面查找名字为filename的文件<br><code>find . -name &quot;*.c&quot;</code> 在当前目录及其子目录（用“.”表示）中查找任何扩展名为“c”的文件</li><li><code>-perm</code><br>按照文件权限来查找文件。<br><code>find . -perm 755 –print</code> 在当前目录下查找文件权限位为755的文件，即文件属主可以读、写、执行，其它用户可以读、执行的文件</li><li><code>-prune</code><br>使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。<br><code>find /apps -path &quot;/apps/bin&quot; -prune -o –print</code>在/apps目录下查找文件，但不希望在/apps/bin目录下查找<br><code>find /usr/sam -path &quot;/usr/sam/dir1&quot; -prune -o –print</code> 在/usr/sam目录下查找不在dir1子目录之内的所有文件</li><li><code>-user</code><br>按照文件属主来查找文件。<br><code>find ~ -user sam –print</code> 在$HOME目录中查找文件属主为sam的文件</li><li><code>-group</code><br>按照文件所属的组来查找文件。<br><code>find /apps -group gem –print</code> 在/apps目录下查找属于gem用户组的文件 </li><li><code>-mtime -n +n</code><br>按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前。<br><code>find / -mtime -5 –print</code>在系统根目录下查找更改时间在5日以内的文件<br><code>find /var/adm -mtime +3 –print</code> 在/var/adm目录下查找更改时间在3日以前的文件</li><li><code>-nogroup</code><br>查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。<br><code>find / –nogroup -print</code></li><li><code>-nouser</code><br>查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。<br><code>find /home -nouser –print</code></li><li><code>-newer file1 ! file2</code><br>查找更改时间比文件file1新但比文件file2旧的文件。</li><li><code>-type</code><br>查找某一类型的文件，诸如：<br>b - 块设备文件。<br>d - 目录。<br>c - 字符设备文件。<br>p - 管道文件。<br>l - 符号链接文件。<br>f - 普通文件。<br><code>find /etc -type d –print</code> 在/etc目录下查找所有的目录<br><code>find . ! -type d –print</code> 在当前目录下查找除目录以外的所有类型的文件<br><code>find /etc -type l –print</code> 在/etc目录下查找所有的符号链接文件</li><li><code>-size n</code>：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。<br><code>find . -size +1000000c –print</code> 在当前目录下查找文件长度大于1 M字节的文件<br><code>find /home/apache -size 100c –print</code> 在/home/apache目录下查找文件长度恰好为100字节的文件<br><code>find . -size +10 –print</code> 在当前目录下查找长度超过10块的文件（一块等于512字节）</li><li><code>-depth</code>：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。<br><code>find / -name &quot;CON.FILE&quot; -depth –print</code> 它将首先匹配所有的文件然后再进入子目录中查找 </li><li><code>-mount</code>：在查找文件时不跨越文件系统mount点。<br><code>find . -name &quot;*.XC&quot; -mount –print</code> 从当前目录开始查找位于本文件系统中文件名以XC结尾的文件（不进入其它文件系统）</li><li><code>-follow</code>：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。</li></ul><h2 id="find与xargs"><a href="#find与xargs" class="headerlink" title="find与xargs"></a>find与xargs</h2><p>在使用find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。</p><p>find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p><p>在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；</p><p>而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p><p>来看看xargs命令是如何同find命令一起使用的，并给出一些例子。</p><p><code>find . -type f -print | xargs file</code>查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</p><p><code>find / -name &quot;core&quot; -print | xargs echo &quot;&quot; &gt;/tmp/core.log</code> 在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到/tmp/core.log 文件中：</p><p><code>find . -type f -print | xargs grep &quot;hostname&quot;</code> 用grep命令在所有的普通文件中搜索hostname这个词</p><p><code>find ./ -mtime +3 -print|xargs rm -f –r</code>删除3天以前的所有东西 （<code>find . -ctime +3 -exec rm -rf {} \;</code>）</p><p><code>find ./ -size 0 | xargs rm -f &amp;</code> 删除文件大小为零的文件</p><p>find命令配合使用exec和xargs可以使用户对所匹配到的文件执行几乎所有的命令。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linux.cn/article-1672-1.html" target="_blank" rel="noopener">linux 中强大且常用命令：find、grep</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;find 命令用于在目录及子目录中搜索文件。可以执行搜索规则，如文件名，文件类型，文件修改时间等等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL [ERROR 2006 MySQL server has gone away] 错误解决方法</title>
    <link href="http://blog.imgavin.me/2018/05/23/mysql-max-packet/"/>
    <id>http://blog.imgavin.me/2018/05/23/mysql-max-packet/</id>
    <published>2018-05-23T03:44:04.000Z</published>
    <updated>2019-03-15T03:19:52.214Z</updated>
    
    <content type="html"><![CDATA[<p>当在 MySQL 表中插入一行很大的数据时,会有一条错误 [ERROR 2006 (HY000): MySQL server has gone away].这时,你需要修改 MySQL 的配置文件,把<code>max_allowed_packet</code>值设置大一些.</p><p>查看当前<code>max_allowed_packet</code>值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;max_allowed_packet&apos;;</span><br><span class="line">+--------------------+----------+</span><br><span class="line">| Variable_name      | Value    |</span><br><span class="line">+--------------------+----------+</span><br><span class="line">| max_allowed_packet | 16777216 |</span><br><span class="line">+--------------------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这是我已经改过的值(16M),之前默认是1M.</p><p>修改<code>my.cnf</code>文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加以下配置,自行改变</span></span><br><span class="line">max_allowed_packet = 16M</span><br></pre></td></tr></table></figure><p> 最后就是重启 MySQL <code>systemctl restart mysql</code> 就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当在 MySQL 表中插入一行很大的数据时,会有一条错误 [ERROR 2006 (HY000): MySQL server has gone away].这时,你需要修改 MySQL 的配置文件,把&lt;code&gt;max_allowed_packet&lt;/code&gt;值设置大一些
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://blog.imgavin.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>开启 TCP BBR 加速</title>
    <link href="http://blog.imgavin.me/2018/04/28/tcp-bbr-install/"/>
    <id>http://blog.imgavin.me/2018/04/28/tcp-bbr-install/</id>
    <published>2018-04-28T03:28:26.000Z</published>
    <updated>2018-04-28T03:35:36.061Z</updated>
    
    <content type="html"><![CDATA[<p>Google 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。<br>根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。<br>于是我根据目前三大发行版的最新内核，开发了一键安装最新内核并开启 TCP BBR 脚本。</p><a id="more"></a><h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>虚拟技术：OpenVZ 以外的，比如 KVM、Xen、VMware 等<br>内存要求：≥128M<br>日期　　：2018 年 02 月 24 日</p><h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><ul><li>本脚本已在 <a href="https://teddysun.com/t/vultr" target="_blank" rel="noopener"><strong>Vultr</strong></a> 上的 VPS 全部测试通过。</li><li>当脚本检测到 VPS 的虚拟方式为 OpenVZ 时，会提示错误，并自动退出安装。</li><li>脚本运行完重启发现开不了机的，打开 VPS 后台控制面板的 VNC, 开机卡在 grub 引导, 手动选择内核即可。</li><li>由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure><p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。<br>重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>查看内核版本，显示为最新版就表示 OK 了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>返回值一般为：<br>net.ipv4.tcp_available_congestion_control = bbr cubic reno</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>返回值一般为：<br>net.ipv4.tcp_congestion_control = bbr</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.core.default_qdisc</span><br></pre></td></tr></table></figure><p>返回值一般为：<br>net.core.default_qdisc = fq</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。</p><h3 id="CentOS-下最新版内核-headers-安装方法"><a href="#CentOS-下最新版内核-headers-安装方法" class="headerlink" title="CentOS 下最新版内核 headers 安装方法"></a>CentOS 下最新版内核 headers 安装方法</h3><p>本来打算在脚本里直接安装 kernel-ml-headers，但会出现和原版内核 headers 冲突的问题。因此在这里添加一个脚本执行完后，手动安装最新版内核 headers 之教程。<br>执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>根据 CentOS 版本的不同，此时一般会出现类似于以下的错误提示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: kernel-ml-headers conflicts with kernel-headers-2.6.32-696.20.1.el6.x86_64</span><br><span class="line">Error: kernel-ml-headers conflicts with kernel-headers-3.10.0-693.17.1.el7.x86_64</span><br></pre></td></tr></table></figure><p>因此需要先卸载原版内核 headers ，然后再安装最新版内核 headers。执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove kernel-headers</span><br></pre></td></tr></table></figure><p>确认无误后，输入 y，回车开始卸载。注意，有时候这么操作还会卸载一些对内核 headers 依赖的安装包，比如 gcc、gcc-c++ 之类的。不过不要紧，我们可以在安装完最新版内核 headers 后再重新安装回来即可。<br>卸载完成后，再次执行上面给出的安装命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>成功安装后，再把那些之前对内核 headers 依赖的安装包，比如 gcc、gcc-c++ 之类的再安装一次即可。</p><p>为什么要安装最新版内核 headers 呢？<br>这是因为 shadowsocks-libev 版有个 tcp fast open 功能，如果不安装的话，这个功能是无法开启的。</p><h3 id="内核升级方法"><a href="#内核升级方法" class="headerlink" title="内核升级方法"></a>内核升级方法</h3><p>如果是 CentOS 系统，执行如下命令即可升级内核：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml kernel-ml-devel</span><br></pre></td></tr></table></figure><p>如果你还手动安装了新版内核 headers ，那么还需要以下命令来升级 headers ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>CentOS 6 的话，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/^default=.*/default=0/g'</span> /boot/grub/grub.conf</span><br></pre></td></tr></table></figure><p>CentOS 7 的话，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure><p>如果是 Debian/Ubuntu 系统，则需要手动下载最新版内核来安装升级。<br>去<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">这里</a>下载最新版的内核 deb 安装包。<br>如果系统是 64 位，则下载 amd64 的 linux-image 中含有 generic 这个 deb 包；<br>如果系统是 32 位，则下载 i386 的 linux-image 中含有 generic 这个 deb 包；<br>安装的命令如下（以最新版的 64 位 4.12.4 举例而已，请替换为下载好的 deb 包）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb</span><br></pre></td></tr></table></figure><p>安装完成后，再执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/update-grub</span><br></pre></td></tr></table></figure><p>最后，重启 VPS 即可。</p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>如果你使用的是 Google Cloud Platform （GCP）更换内核，有时会遇到重启后，整个磁盘变为只读的情况。只需执行以下命令即可恢复：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount rw /</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://teddysun.com/489.html" target="_blank" rel="noopener">一键安装最新内核并开启 BBR 脚本</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Google 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。&lt;br&gt;根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。&lt;br&gt;于是我根据目前三大发行版的最新内核，开发了一键安装最新内核并开启 TCP BBR 脚本。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="bbr" scheme="http://blog.imgavin.me/tags/bbr/"/>
    
      <category term="tcp 加速优化" scheme="http://blog.imgavin.me/tags/tcp-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks 一键安装脚本</title>
    <link href="http://blog.imgavin.me/2018/04/28/ss-install-script/"/>
    <id>http://blog.imgavin.me/2018/04/28/ss-install-script/</id>
    <published>2018-04-28T02:36:02.000Z</published>
    <updated>2018-12-28T09:04:13.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="脚本适用环境"><a href="#脚本适用环境" class="headerlink" title="脚本适用环境"></a>脚本适用环境</h1><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>内存要求：≥128M<br>日期　　：2018 年 02 月 07 日</p><h2 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h2><ul><li><p>一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端</p></li><li><p>各版本的启动脚本及配置文件名不再重合</p></li><li><p>每次运行可安装一种版本</p></li><li><p>支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）</p></li><li><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p></li><li><p>Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）</p><p> <strong>安装遇到问题,请先参考 <a href="https://github.com/shadowsocks/shadowsocks/wiki/Troubleshooting" target="_blank" rel="noopener">Troubleshooting</a> 尝试解决</strong></p></li></ul><a id="more"></a><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><ul><li>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）</li><li>密码：自己设定（如不设定，默认为 teddysun.com）</li><li>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）</li><li>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）</li><li>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</li></ul><p><strong>脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</strong></p><h2 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h2><p>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用root用户登录，运行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><h2 id="安装完成后，脚本提示如下"><a href="#安装完成后，脚本提示如下" class="headerlink" title="安装完成后，脚本提示如下"></a>安装完成后，脚本提示如下</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</span><br><span class="line"> ss://your_encryption_method:your_password@your_server_ip:your_server_port</span><br><span class="line">Your QR Code has been saved as a PNG file path:</span><br><span class="line"> your_path.png</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://teddysun.com/486.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><h2 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h2><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p><p>使用root用户登录，运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p><p>Shadowsocks-Python 版：<br>/etc/init.d/shadowsocks-python start | stop | restart | status</p><p>ShadowsocksR 版：<br>/etc/init.d/shadowsocks-r start | stop | restart | status</p><p>Shadowsocks-Go 版：<br>/etc/init.d/shadowsocks-go start | stop | restart | status</p><p>Shadowsocks-libev 版：<br>/etc/init.d/shadowsocks-libev start | stop | restart | status</p><h2 id="各版本默认配置文件"><a href="#各版本默认配置文件" class="headerlink" title="各版本默认配置文件"></a>各版本默认配置文件</h2><p>Shadowsocks-Python 版：<br>/etc/shadowsocks-python/config.json</p><p>ShadowsocksR 版：<br>/etc/shadowsocks-r/config.json</p><p>Shadowsocks-Go 版：<br>/etc/shadowsocks-go/config.json</p><p>Shadowsocks-libev 版：<br>/etc/shadowsocks-libev/config.json</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://teddysun.com/486.html" target="_blank" rel="noopener">Shadowsocks 一键安装脚本（四合一）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;脚本适用环境&quot;&gt;&lt;a href=&quot;#脚本适用环境&quot; class=&quot;headerlink&quot; title=&quot;脚本适用环境&quot;&gt;&lt;/a&gt;脚本适用环境&lt;/h1&gt;&lt;p&gt;系统支持：CentOS 6+，Debian 7+，Ubuntu 12+&lt;br&gt;内存要求：≥128M&lt;br&gt;日期　　：2018 年 02 月 07 日&lt;/p&gt;
&lt;h2 id=&quot;关于本脚本&quot;&gt;&lt;a href=&quot;#关于本脚本&quot; class=&quot;headerlink&quot; title=&quot;关于本脚本&quot;&gt;&lt;/a&gt;关于本脚本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各版本的启动脚本及配置文件名不再重合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每次运行可安装一种版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若已安装多个版本，则卸载时也需多次运行（每次卸载一种）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;安装遇到问题,请先参考 &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Troubleshooting&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Troubleshooting&lt;/a&gt; 尝试解决&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ss" scheme="http://blog.imgavin.me/tags/ss/"/>
    
      <category term="shadowsocks" scheme="http://blog.imgavin.me/tags/shadowsocks/"/>
    
      <category term="科学上网" scheme="http://blog.imgavin.me/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - systemctl</title>
    <link href="http://blog.imgavin.me/2018/04/19/linux-cmd-systemctl/"/>
    <id>http://blog.imgavin.me/2018/04/19/linux-cmd-systemctl/</id>
    <published>2018-04-19T07:00:03.000Z</published>
    <updated>2019-05-21T06:57:13.260Z</updated>
    
    <content type="html"><![CDATA[<p>Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。</p><p>Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V初始进程。Systemd的功能是用于集中管理和配置类UNIX系统。</p><p>在Linux生态系统中，Systemd被部署到了大多数的标准Linux发行版中，只有为数不多的几个发行版尚未部署。Systemd通常是所有其它守护进程的父进程，但并非总是如此。</p><a id="more"></a><h1 id="Systemd初体验和Systemctl基础"><a href="#Systemd初体验和Systemctl基础" class="headerlink" title="Systemd初体验和Systemctl基础"></a>Systemd初体验和Systemctl基础</h1><h2 id="首先检查你的系统中是否安装有systemd并确定当前安装的版本"><a href="#首先检查你的系统中是否安装有systemd并确定当前安装的版本" class="headerlink" title="首先检查你的系统中是否安装有systemd并确定当前安装的版本"></a>首先检查你的系统中是否安装有systemd并确定当前安装的版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl --version</span></span><br><span class="line">systemd 219</span><br><span class="line">+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN</span><br></pre></td></tr></table></figure><p>上例中很清楚地表明，我们安装了219版本的systemd。</p><h2 id="检查systemd和systemctl的二进制文件和库文件的安装位置"><a href="#检查systemd和systemctl的二进制文件和库文件的安装位置" class="headerlink" title="检查systemd和systemctl的二进制文件和库文件的安装位置"></a>检查systemd和systemctl的二进制文件和库文件的安装位置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  whereis systemd</span></span><br><span class="line">systemd: /usr/lib/systemd /etc/systemd /usr/share/systemd /usr/share/man/man1/systemd.1.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#  whereis systemctl</span></span><br><span class="line">systemctl: /usr/bin/systemctl /usr/share/man/man1/systemctl.1.gz</span><br></pre></td></tr></table></figure><h2 id="检查systemd是否运行"><a href="#检查systemd是否运行" class="headerlink" title="检查systemd是否运行"></a>检查systemd是否运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  ps -eaf | grep systemd</span></span><br><span class="line">root         1     0  0 3月18 ?       00:03:11 /usr/lib/systemd/systemd --switched-root --system --deserialize 21</span><br><span class="line">root       323     1  0 3月18 ?       00:01:45 /usr/lib/systemd/systemd-journald</span><br><span class="line">root       348     1  0 3月18 ?       00:00:00 /usr/lib/systemd/systemd-udevd</span><br><span class="line">dbus       459     1  0 3月18 ?       00:02:49 /bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</span><br><span class="line">root       468     1  0 3月18 ?       00:01:23 /usr/lib/systemd/systemd-logind</span><br></pre></td></tr></table></figure><h2 id="分析systemd启动进程"><a href="#分析systemd启动进程" class="headerlink" title="分析systemd启动进程"></a>分析systemd启动进程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze</span></span><br><span class="line">Startup finished <span class="keyword">in</span> 690ms (kernel) + 1.288s (initrd) + 8.138s (userspace) = 10.117s</span><br></pre></td></tr></table></figure><h2 id="分析启动时各个进程花费的时间"><a href="#分析启动时各个进程花费的时间" class="headerlink" title="分析启动时各个进程花费的时间"></a>分析启动时各个进程花费的时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze blame</span></span><br><span class="line">          5.130s network.service</span><br><span class="line">          3.022s rabbitmq-server.service</span><br><span class="line">          2.120s postfix.service</span><br><span class="line">           320ms systemd-journal-flush.service</span><br><span class="line">           296ms tuned.service</span><br><span class="line">           293ms lvm2-monitor.service</span><br><span class="line">           226ms nginx.service</span><br><span class="line">           187ms dev-vda1.device</span><br><span class="line">           181ms rc-local.service</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure><h2 id="分析启动时的关键链"><a href="#分析启动时的关键链" class="headerlink" title="分析启动时的关键链"></a>分析启动时的关键链</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze critical-chain</span></span><br><span class="line">The time after the unit is active or started is printed after the <span class="string">"@"</span> character.</span><br><span class="line">The time the unit takes to start is printed after the <span class="string">"+"</span> character.</span><br><span class="line"></span><br><span class="line">multi-user.target @8.129s</span><br><span class="line">└─tuned.service @6.008s +296ms</span><br><span class="line">  └─network.target @5.999s</span><br><span class="line">    └─network.service @869ms +5.130s</span><br><span class="line">      └─basic.target @811ms</span><br><span class="line">        └─sockets.target @811ms</span><br><span class="line">          └─rpcbind.socket @811ms</span><br><span class="line">            └─sysinit.target @808ms</span><br><span class="line">              └─systemd-update-utmp.service @797ms +9ms</span><br><span class="line">                └─auditd.service @642ms +154ms</span><br><span class="line">                  └─systemd-tmpfiles-setup.service @615ms +26ms</span><br><span class="line">                    └─rhel-import-state.service @531ms +83ms</span><br><span class="line">                      └─<span class="built_in">local</span>-fs.target @471ms</span><br><span class="line">                        └─<span class="built_in">local</span>-fs-pre.target @471ms</span><br><span class="line">                          └─lvm2-monitor.service @177ms +293ms</span><br><span class="line">                            └─lvm2-lvmetad.service @232ms</span><br><span class="line">                              └─lvm2-lvmetad.socket @163ms</span><br><span class="line">                                └─-.slice</span><br></pre></td></tr></table></figure><p><strong>重要</strong>：Systemctl接受服务（.service），挂载点（.mount），套接口（.socket）和设备（.device）作为单元。</p><h2 id="列出所有可用单元"><a href="#列出所有可用单元" class="headerlink" title="列出所有可用单元"></a>列出所有可用单元</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files</span></span><br><span class="line">UNIT FILE                                     STATE</span><br><span class="line">proc-sys-fs-binfmt_misc.automount             static</span><br><span class="line">dev-hugepages.mount                           static</span><br><span class="line">dev-mqueue.mount                              static</span><br><span class="line">proc-sys-fs-binfmt_misc.mount                 static</span><br><span class="line">sys-fs-fuse-connections.mount                 static</span><br><span class="line">sys-kernel-config.mount                       static</span><br><span class="line">sys-kernel-debug.mount                        static</span><br><span class="line">tmp.mount                                     disabled</span><br><span class="line">brandbot.path                                 disabled</span><br></pre></td></tr></table></figure><h2 id="列出所有运行中单元"><a href="#列出所有运行中单元" class="headerlink" title="列出所有运行中单元"></a>列出所有运行中单元</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-units</span></span><br><span class="line">  UNIT                                                              LOAD   ACTIVE SUB       DESCRIPTION</span><br><span class="line">  proc-sys-fs-binfmt_misc.automount                                 loaded active waiting   Arbitrary Executable File Formats File System Automount Point</span><br><span class="line">  sys-devices-pci0000:00-0000:00:03.0-virtio0-net-eth0.device       loaded active plugged   Virtio network device</span><br><span class="line">  sys-devices-pci0000:00-0000:00:04.0-virtio1-block-vda-vda1.device loaded active plugged   /sys/devices/pci0000:00/0000:00:04.0/virtio1/block/vda/vda1</span><br><span class="line">  sys-devices-pci0000:00-0000:00:04.0-virtio1-block-vda.device      loaded active plugged   /sys/devices/pci0000:00/0000:00:04.0/virtio1/block/vda</span><br><span class="line">  sys-devices-platform-serial8250-tty-ttyS1.device                  loaded active plugged   /sys/devices/platform/serial8250/tty/ttyS1</span><br></pre></td></tr></table></figure><h2 id="列出所有失败单元"><a href="#列出所有失败单元" class="headerlink" title="列出所有失败单元"></a>列出所有失败单元</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl --failed</span></span><br><span class="line">  UNIT              LOAD   ACTIVE SUB    DESCRIPTION</span><br><span class="line">● kdump.service     loaded failed failed Crash recovery kernel arming</span><br><span class="line">● postfix.service   loaded failed failed Postfix Mail Transport Agent</span><br><span class="line">● YDService.service loaded failed failed LSB: tomcat service</span><br><span class="line"></span><br><span class="line">LOAD   = Reflects whether the unit definition was properly loaded.</span><br><span class="line">ACTIVE = The high-level unit activation state, i.e. generalization of SUB.</span><br><span class="line">SUB    = The low-level unit activation state, values depend on unit <span class="built_in">type</span>.</span><br><span class="line"></span><br><span class="line">3 loaded units listed. Pass --all to see loaded but inactive units, too.</span><br><span class="line">To show all installed unit files use <span class="string">'systemctl list-unit-files'</span>.</span><br></pre></td></tr></table></figure><h2 id="检查某个单元（如-cron-service）是否启用"><a href="#检查某个单元（如-cron-service）是否启用" class="headerlink" title="检查某个单元（如 cron.service）是否启用"></a>检查某个单元（如 cron.service）是否启用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl is-enabled crond.service</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><h2 id="检查某个单元或服务是否运行"><a href="#检查某个单元或服务是否运行" class="headerlink" title="检查某个单元或服务是否运行"></a>检查某个单元或服务是否运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl status firewalld.service</span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></table></figure><h1 id="使用Systemctl控制并管理服务"><a href="#使用Systemctl控制并管理服务" class="headerlink" title="使用Systemctl控制并管理服务"></a>使用Systemctl控制并管理服务</h1><h2 id="列出所有服务（包括启用的和禁用的）"><a href="#列出所有服务（包括启用的和禁用的）" class="headerlink" title="列出所有服务（包括启用的和禁用的）"></a>列出所有服务（包括启用的和禁用的）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files --type=service</span></span><br><span class="line">UNIT FILE                                     STATE</span><br><span class="line">acpid.service                                 enabled</span><br><span class="line">arp-ethers.service                            disabled</span><br><span class="line">atd.service                                   enabled</span><br><span class="line">auditd.service                                enabled</span><br><span class="line">autovt@.service                               enabled</span><br><span class="line">blk-availability.service                      disabled</span><br><span class="line">brandbot.service                              static</span><br><span class="line">chrony-dnssrv@.service                        static</span><br><span class="line">chrony-wait.service                           disabled</span><br></pre></td></tr></table></figure><h2 id="Linux中如何启动、重启、停止、重载服务以及检查服务（如-httpd-service）状态"><a href="#Linux中如何启动、重启、停止、重载服务以及检查服务（如-httpd-service）状态" class="headerlink" title="Linux中如何启动、重启、停止、重载服务以及检查服务（如 httpd.service）状态"></a>Linux中如何启动、重启、停止、重载服务以及检查服务（如 httpd.service）状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start httpd.service</span></span><br><span class="line"><span class="comment"># systemctl restart httpd.service</span></span><br><span class="line"><span class="comment"># systemctl stop httpd.service</span></span><br><span class="line"><span class="comment"># systemctl reload httpd.service</span></span><br><span class="line"><span class="comment"># systemctl status httpd.service</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：当我们使用systemctl的start，restart，stop和reload命令时，我们不会从终端获取到任何输出内容，只有status命令可以打印输出。</p><h2 id="如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）"><a href="#如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）" class="headerlink" title="如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）"></a>如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl is-active httpd.service</span></span><br><span class="line"><span class="comment"># systemctl enable httpd.service</span></span><br><span class="line"><span class="comment"># systemctl disable httpd.service</span></span><br></pre></td></tr></table></figure><h2 id="如何屏蔽（让它不能启动）或显示服务（如-httpd-service）"><a href="#如何屏蔽（让它不能启动）或显示服务（如-httpd-service）" class="headerlink" title="如何屏蔽（让它不能启动）或显示服务（如 httpd.service）"></a>如何屏蔽（让它不能启动）或显示服务（如 httpd.service）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl mask httpd.service</span></span><br><span class="line">ln -s <span class="string">'/dev/null'</span> <span class="string">'/etc/systemd/system/httpd.service'</span></span><br><span class="line"><span class="comment"># systemctl unmask httpd.service</span></span><br><span class="line">rm <span class="string">'/etc/systemd/system/httpd.service'</span></span><br></pre></td></tr></table></figure><h2 id="使用systemctl命令杀死服务"><a href="#使用systemctl命令杀死服务" class="headerlink" title="使用systemctl命令杀死服务"></a>使用systemctl命令杀死服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl kill httpd</span></span><br><span class="line"><span class="comment"># systemctl status httpd</span></span><br></pre></td></tr></table></figure><h1 id="使用Systemctl控制并管理挂载点"><a href="#使用Systemctl控制并管理挂载点" class="headerlink" title="使用Systemctl控制并管理挂载点"></a>使用Systemctl控制并管理挂载点</h1><h2 id="列出所有系统挂载点"><a href="#列出所有系统挂载点" class="headerlink" title="列出所有系统挂载点"></a>列出所有系统挂载点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files --type=mount</span></span><br><span class="line">UNIT FILE                     STATE</span><br><span class="line">dev-hugepages.mount           static</span><br><span class="line">dev-mqueue.mount              static</span><br><span class="line">proc-sys-fs-binfmt_misc.mount static</span><br><span class="line">sys-fs-fuse-connections.mount static</span><br><span class="line">sys-kernel-config.mount       static</span><br><span class="line">sys-kernel-debug.mount        static</span><br><span class="line">tmp.mount                     disabled</span><br></pre></td></tr></table></figure><h2 id="挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态"><a href="#挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态" class="headerlink" title="挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态"></a>挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl stop tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl restart tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl reload tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl status tmp.mount</span></span><br></pre></td></tr></table></figure><h2 id="在启动时激活、启用或禁用挂载点（系统启动时自动挂载）"><a href="#在启动时激活、启用或禁用挂载点（系统启动时自动挂载）" class="headerlink" title="在启动时激活、启用或禁用挂载点（系统启动时自动挂载）"></a>在启动时激活、启用或禁用挂载点（系统启动时自动挂载）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl is-active tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl enable tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl disable  tmp.mount</span></span><br></pre></td></tr></table></figure><h2 id="在Linux中屏蔽（让它不能启用）或可见挂载点"><a href="#在Linux中屏蔽（让它不能启用）或可见挂载点" class="headerlink" title="在Linux中屏蔽（让它不能启用）或可见挂载点"></a>在Linux中屏蔽（让它不能启用）或可见挂载点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl mask tmp.mount</span></span><br><span class="line">ln -s <span class="string">'/dev/null'</span> <span class="string">'/etc/systemd/system/tmp.mount'</span></span><br><span class="line"><span class="comment"># systemctl unmask tmp.mount</span></span><br><span class="line">rm <span class="string">'/etc/systemd/system/tmp.mount'</span></span><br></pre></td></tr></table></figure><h1 id="使用Systemctl控制并管理套接口"><a href="#使用Systemctl控制并管理套接口" class="headerlink" title="使用Systemctl控制并管理套接口"></a>使用Systemctl控制并管理套接口</h1><h2 id="列出所有可用系统套接口"><a href="#列出所有可用系统套接口" class="headerlink" title="列出所有可用系统套接口"></a>列出所有可用系统套接口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files --type=socket</span></span><br><span class="line">UNIT FILE                    STATE</span><br><span class="line">dbus.socket                  static</span><br><span class="line">dm-event.socket              enabled</span><br><span class="line">epmd.socket                  disabled</span><br><span class="line">epmd@.socket                 disabled</span><br><span class="line">lvm2-lvmetad.socket          enabled</span><br><span class="line">lvm2-lvmpolld.socket         enabled</span><br><span class="line">rpcbind.socket               enabled</span><br><span class="line">rsyncd.socket                disabled</span><br><span class="line">sshd.socket                  disabled</span><br><span class="line">syslog.socket                static</span><br><span class="line">systemd-initctl.socket       static</span><br><span class="line">systemd-journald.socket      static</span><br><span class="line">systemd-shutdownd.socket     static</span><br><span class="line">systemd-udevd-control.socket static</span><br><span class="line">systemd-udevd-kernel.socket  static</span><br></pre></td></tr></table></figure><h2 id="在Linux中启动、重启、停止、重载套接口并检查其状态"><a href="#在Linux中启动、重启、停止、重载套接口并检查其状态" class="headerlink" title="在Linux中启动、重启、停止、重载套接口并检查其状态"></a>在Linux中启动、重启、停止、重载套接口并检查其状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start cups.socket</span></span><br><span class="line"><span class="comment"># systemctl restart cups.socket</span></span><br><span class="line"><span class="comment"># systemctl stop cups.socket</span></span><br><span class="line"><span class="comment"># systemctl reload cups.socket</span></span><br><span class="line"><span class="comment"># systemctl status cups.socket</span></span><br></pre></td></tr></table></figure><h2 id="在启动时激活套接口，并启用或禁用它（系统启动时自启动）"><a href="#在启动时激活套接口，并启用或禁用它（系统启动时自启动）" class="headerlink" title="在启动时激活套接口，并启用或禁用它（系统启动时自启动）"></a>在启动时激活套接口，并启用或禁用它（系统启动时自启动）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl is-active cups.socket</span></span><br><span class="line"><span class="comment"># systemctl enable cups.socket</span></span><br><span class="line"><span class="comment"># systemctl disable cups.socket</span></span><br></pre></td></tr></table></figure><h2 id="屏蔽（使它不能启动）或显示套接口"><a href="#屏蔽（使它不能启动）或显示套接口" class="headerlink" title="屏蔽（使它不能启动）或显示套接口"></a>屏蔽（使它不能启动）或显示套接口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl mask cups.socket</span></span><br><span class="line">ln -s <span class="string">'/dev/null'</span> <span class="string">'/etc/systemd/system/cups.socket'</span></span><br><span class="line"><span class="comment"># systemctl unmask cups.socket</span></span><br><span class="line">rm <span class="string">'/etc/systemd/system/cups.socket'</span></span><br></pre></td></tr></table></figure><h1 id="服务的CPU利用率（分配额）"><a href="#服务的CPU利用率（分配额）" class="headerlink" title="服务的CPU利用率（分配额）"></a>服务的CPU利用率（分配额）</h1><h2 id="获取当前某个服务的CPU分配额（如httpd）"><a href="#获取当前某个服务的CPU分配额（如httpd）" class="headerlink" title="获取当前某个服务的CPU分配额（如httpd）"></a>获取当前某个服务的CPU分配额（如httpd）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl show -p CPUShares httpd.service</span></span><br><span class="line">CPUShares=1024</span><br></pre></td></tr></table></figure><h2 id="将某个服务（httpd-service）的CPU分配份额限制为2000-CPUShares"><a href="#将某个服务（httpd-service）的CPU分配份额限制为2000-CPUShares" class="headerlink" title="将某个服务（httpd.service）的CPU分配份额限制为2000 CPUShares/"></a>将某个服务（httpd.service）的CPU分配份额限制为2000 CPUShares/</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl set-property httpd.service CPUShares=2000</span></span><br><span class="line"><span class="comment"># systemctl show -p CPUShares httpd.service</span></span><br><span class="line">CPUShares=2000</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：当你为某个服务设置CPUShares，会自动创建一个以服务名命名的目录（如 httpd.service），里面包含了一个名为90-CPUShares.conf的文件，该文件含有CPUShare限制信息，你可以通过以下方式查看该文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/systemd/system/httpd.service.d/90-CPUShares.conf </span><br><span class="line">[Service]</span><br><span class="line">CPUShares=2000</span><br></pre></td></tr></table></figure><h2 id="检查某个服务的所有配置细节"><a href="#检查某个服务的所有配置细节" class="headerlink" title="检查某个服务的所有配置细节"></a>检查某个服务的所有配置细节</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl show nginx</span></span><br><span class="line">Type=forking</span><br><span class="line">Restart=no</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line">NotifyAccess=none</span><br><span class="line">RestartUSec=100ms</span><br><span class="line">TimeoutStartUSec=1min 30s</span><br><span class="line">TimeoutStopUSec=5s</span><br><span class="line">WatchdogUSec=0</span><br><span class="line">WatchdogTimestampMonotonic=0</span><br><span class="line">StartLimitInterval=10000000</span><br></pre></td></tr></table></figure><h2 id="分析某个服务（nginx）的关键链"><a href="#分析某个服务（nginx）的关键链" class="headerlink" title="分析某个服务（nginx）的关键链"></a>分析某个服务（nginx）的关键链</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze critical-chain nginx.service</span></span><br><span class="line">The time after the unit is active or started is printed after the <span class="string">"@"</span> character.</span><br><span class="line">The time the unit takes to start is printed after the <span class="string">"+"</span> character.</span><br><span class="line"></span><br><span class="line">nginx.service +226ms</span><br><span class="line">└─network.target @5.999s</span><br><span class="line">  └─network.service @869ms +5.130s</span><br><span class="line">    └─basic.target @811ms</span><br><span class="line">      └─sockets.target @811ms</span><br><span class="line">        └─rpcbind.socket @811ms</span><br><span class="line">          └─sysinit.target @808ms</span><br><span class="line">            └─systemd-update-utmp.service @797ms +9ms</span><br><span class="line">              └─auditd.service @642ms +154ms</span><br><span class="line">                └─systemd-tmpfiles-setup.service @615ms +26ms</span><br><span class="line">                  └─rhel-import-state.service @531ms +83ms</span><br><span class="line">                    └─<span class="built_in">local</span>-fs.target @471ms</span><br><span class="line">                      └─<span class="built_in">local</span>-fs-pre.target @471ms</span><br><span class="line">                        └─lvm2-monitor.service @177ms +293ms</span><br><span class="line">                          └─lvm2-lvmetad.service @232ms</span><br><span class="line">                            └─lvm2-lvmetad.socket @163ms</span><br><span class="line">                              └─-.slice</span><br></pre></td></tr></table></figure><h2 id="获取某个服务（nginx）的依赖性列表"><a href="#获取某个服务（nginx）的依赖性列表" class="headerlink" title="获取某个服务（nginx）的依赖性列表"></a>获取某个服务（nginx）的依赖性列表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-dependencies nginx.service</span></span><br><span class="line">nginx.service</span><br><span class="line">● ├─-.mount</span><br><span class="line">● ├─system.slice</span><br><span class="line">● └─basic.target</span><br><span class="line">●   ├─rhel-autorelabel-mark.service</span><br><span class="line">●   ├─rhel-autorelabel.service</span><br><span class="line">●   ├─rhel-configure.service</span><br><span class="line">●   ├─rhel-dmesg.service</span><br><span class="line">●   ├─rhel-loadmodules.service</span><br><span class="line">●   ├─selinux-policy-migrate-local-changes@targeted.service</span><br><span class="line">●   ├─paths.target</span><br><span class="line">●   ├─slices.target</span><br><span class="line">●   │ ├─-.slice</span><br><span class="line">●   │ └─system.slice</span><br><span class="line">●   ├─sockets.target</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="按等级列出控制组"><a href="#按等级列出控制组" class="headerlink" title="按等级列出控制组"></a>按等级列出控制组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-cgls</span></span><br><span class="line">├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 21</span><br><span class="line">├─user.slice</span><br><span class="line">│ └─user-0.slice</span><br><span class="line">│   ├─session-48911.scope</span><br><span class="line">│   │ ├─17567 sshd: root@pts/0</span><br><span class="line">│   │ ├─17570 -zsh</span><br><span class="line">│   │ ├─17604 sh -c <span class="function"><span class="title">main</span></span>() &#123;   <span class="comment"># Use colors, but only if connected to a terminal, and that terminal   # supports them.   if which tput &gt;/dev/null 2&gt;&amp;1; then       ncolors=$(tput colors)   fi   if [ -t 1 ] &amp;&amp; [ -n "$ncolors" ] &amp;&amp; [ "$ncolors" -ge 8 ]; then     RED="$(tput</span></span><br><span class="line">│   │ ├─17643 zsh</span><br><span class="line">│   │ ├─27128 systemd-cgls</span><br><span class="line">│   │ └─27129 systemd-cgls</span><br><span class="line">│   └─session-1.scope</span><br><span class="line">│     ├─25471 barad_agent</span><br><span class="line">│     ├─25477 barad_agent</span><br><span class="line">│     ├─25478 barad_agent</span><br><span class="line">│     └─25839 /usr/<span class="built_in">local</span>/qcloud/stargate/sgagent -d</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="按CPU、内存、输入和输出列出控制组"><a href="#按CPU、内存、输入和输出列出控制组" class="headerlink" title="按CPU、内存、输入和输出列出控制组"></a>按CPU、内存、输入和输出列出控制组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-cgtop</span></span><br><span class="line">Path                                                                                                                                                                                                                                     Tasks   %CPU   Memory  Input/s Output/s</span><br><span class="line"></span><br><span class="line">/                                                                                                                                                                                                                                           78      -   827.5M        -        -</span><br><span class="line">/system.slice/acpid.service                                                                                                                                                                                                                  1      -        -        -        -</span><br><span class="line">/system.slice/atd.service                                                                                                                                                                                                                    1      -        -        -        -</span><br><span class="line">/system.slice/auditd.service                                                                                                                                                                                                                 1      -        -        -        -</span><br><span class="line">/system.slice/crond.service                                                                                                                                                                                                                  1      -        -        -        -</span><br><span class="line">/system.slice/dbus.service                                                                                                                                                                                                                   1      -        -        -        -</span><br><span class="line">/system.slice/libstoragemgmt.service                                                                                                                                                                                                         1      -        -        -        -</span><br><span class="line">/system.slice/lvm2-lvmetad.service</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="控制系统运行等级"><a href="#控制系统运行等级" class="headerlink" title="控制系统运行等级"></a>控制系统运行等级</h1><h2 id="启动系统救援模式"><a href="#启动系统救援模式" class="headerlink" title="启动系统救援模式"></a>启动系统救援模式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl rescue</span></span><br><span class="line">PolicyKit daemon disconnected from the bus.</span><br><span class="line">We are no longer a registered authentication agent.</span><br><span class="line"></span><br><span class="line">Broadcast message from root@server_base on pts/0 (四 2018-04-19 16:31:36 CST):</span><br><span class="line"></span><br><span class="line">The system is going down to rescue mode NOW!</span><br></pre></td></tr></table></figure><h2 id="进入紧急模式"><a href="#进入紧急模式" class="headerlink" title="进入紧急模式"></a>进入紧急模式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl emergency</span></span><br><span class="line">Welcome to emergency mode! After logging <span class="keyword">in</span>, <span class="built_in">type</span> <span class="string">"journalctl -xb"</span> to view</span><br><span class="line">system logs, <span class="string">"systemctl reboot"</span> to reboot, <span class="string">"systemctl default"</span> to try again</span><br><span class="line">to boot into default mode.</span><br></pre></td></tr></table></figure><h2 id="列出当前使用的运行等级"><a href="#列出当前使用的运行等级" class="headerlink" title="列出当前使用的运行等级"></a>列出当前使用的运行等级</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl get-default</span></span><br><span class="line">multi-user.target</span><br></pre></td></tr></table></figure><h2 id="启动运行等级5，即图形模式"><a href="#启动运行等级5，即图形模式" class="headerlink" title="启动运行等级5，即图形模式"></a>启动运行等级5，即图形模式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl isolate runlevel5.target</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># systemctl isolate graphical.target</span></span><br></pre></td></tr></table></figure><h2 id="启动运行等级3，即多用户模式（命令行）"><a href="#启动运行等级3，即多用户模式（命令行）" class="headerlink" title="启动运行等级3，即多用户模式（命令行）"></a>启动运行等级3，即多用户模式（命令行）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl isolate runlevel3.target</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># systemctl isolate multiuser.target</span></span><br></pre></td></tr></table></figure><h2 id="设置多用户模式或图形模式为默认运行等级"><a href="#设置多用户模式或图形模式为默认运行等级" class="headerlink" title="设置多用户模式或图形模式为默认运行等级"></a>设置多用户模式或图形模式为默认运行等级</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl set-default runlevel3.target</span></span><br><span class="line"><span class="comment"># systemctl set-default runlevel5.target</span></span><br></pre></td></tr></table></figure><h2 id="重启、停止、挂起、休眠系统或使系统进入混合睡眠"><a href="#重启、停止、挂起、休眠系统或使系统进入混合睡眠" class="headerlink" title="重启、停止、挂起、休眠系统或使系统进入混合睡眠"></a>重启、停止、挂起、休眠系统或使系统进入混合睡眠</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl reboot</span></span><br><span class="line"><span class="comment"># systemctl halt</span></span><br><span class="line"><span class="comment"># systemctl suspend</span></span><br><span class="line"><span class="comment"># systemctl hibernate</span></span><br><span class="line"><span class="comment"># systemctl hybrid-sleep</span></span><br></pre></td></tr></table></figure><p><strong>运行等级说明</strong></p><ul><li>Runlevel 0 : 关闭系统</li><li>Runlevel 1 : 救援？维护模式</li><li>Runlevel 3 : 多用户，无图形系统</li><li>Runlevel 4 : 多用户，无图形系统</li><li>Runlevel 5 : 多用户，图形化系统</li><li>Runlevel 6 : 关闭并重启机器</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://linux.cn/article-5926-1.html" target="_blank" rel="noopener">systemctl 命令完全指南</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。&lt;/p&gt;
&lt;p&gt;Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V初始进程。Systemd的功能是用于集中管理和配置类UNIX系统。&lt;/p&gt;
&lt;p&gt;在Linux生态系统中，Systemd被部署到了大多数的标准Linux发行版中，只有为数不多的几个发行版尚未部署。Systemd通常是所有其它守护进程的父进程，但并非总是如此。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
      <category term="systemctl" scheme="http://blog.imgavin.me/tags/systemctl/"/>
    
  </entry>
  
  <entry>
    <title>缓存雪崩与缓存穿透</title>
    <link href="http://blog.imgavin.me/2018/02/25/cache-collapse-cross/"/>
    <id>http://blog.imgavin.me/2018/02/25/cache-collapse-cross/</id>
    <published>2018-02-25T09:14:27.000Z</published>
    <updated>2018-02-26T02:00:23.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><p><strong>解决方案</strong></p><p>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。</p><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><p><strong>解决方案</strong></p><p>我们把查询为空的数据也进行缓存，过期时间设置要短很多，比如5分钟。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="http://www.cnblogs.com/zhangweizhong/p/6258797.html" target="_blank" rel="noopener">Redis总结（五）缓存雪崩和缓存穿透等问题</a></p></li><li><p><a href="http://ifeve.com/concurrency-cache-cross/" target="_blank" rel="noopener">缓存穿透、缓存并发、缓存失效之思路变迁</a></p></li><li><p><a href="https://zhangxh20.github.io/2017/09/04/redis/cacheCollapse/" target="_blank" rel="noopener">缓存雪崩问题</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存雪崩&quot;&gt;&lt;a href=&quot;#缓存雪崩&quot; class=&quot;headerlink&quot; title=&quot;缓存雪崩&quot;&gt;&lt;/a&gt;缓存雪崩&lt;/h1&gt;&lt;p&gt;缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。&lt;/
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="缓存" scheme="http://blog.imgavin.me/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="redis" scheme="http://blog.imgavin.me/tags/redis/"/>
    
      <category term="并发" scheme="http://blog.imgavin.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置</title>
    <link href="http://blog.imgavin.me/2018/01/21/nginx-product-config/"/>
    <id>http://blog.imgavin.me/2018/01/21/nginx-product-config/</id>
    <published>2018-01-21T04:15:18.000Z</published>
    <updated>2019-03-28T10:20:56.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询是否开启80端口则</span></span><br><span class="line">firewall-cmd --query-port=80/tcp --permanent</span><br><span class="line"><span class="comment"># 开启80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SELinux 设置</span></span><br><span class="line"><span class="comment"># 查看 SELinux 模式</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="comment"># 查看 SELinux 状态与模式等</span></span><br><span class="line">sestatus</span><br><span class="line"><span class="comment"># 关闭 SELinux</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># 查看 nginx 是否受限制</span></span><br><span class="line">ps -eZ | grep nginx</span><br><span class="line"><span class="comment"># 查看文件受限</span></span><br><span class="line">ll -Zd</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://tengine.taobao.org/nginx_docs/cn/docs/" target="_blank" rel="noopener">淘宝翻译的中文文档</a></li><li><a href="https://nginxconfig.io/" target="_blank" rel="noopener">nginx 在线配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://blog.imgavin.me/tags/nginx/"/>
    
      <category term="配置" scheme="http://blog.imgavin.me/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>2017 总结</title>
    <link href="http://blog.imgavin.me/2017/12/31/2017-annual-summary/"/>
    <id>http://blog.imgavin.me/2017/12/31/2017-annual-summary/</id>
    <published>2017-12-31T13:38:05.000Z</published>
    <updated>2018-12-27T06:46:29.872Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2017年12月31日，2017年的最后一天。各种跨年演讲，晚会都在直播着，看着他们的总结，想着自己这一年虽然没有太多的波折，无惊无喜，但也是需要理清自己这一年干的事情，是吧。</p><a id="more"></a><hr><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><ul><li><p>众病之王：癌症传</p></li><li><p>人类简史</p><blockquote><p>读这前，这本书就已经大火了。读了之后也确实觉得书中的各种脑洞开的挺大，还挺有意思。</p></blockquote></li><li><p>最好的告别：关于衰老与死亡，你必须知道的常识</p><blockquote><p>我认为每个成年人都应该读</p></blockquote></li><li><p>未来世界的幸存者</p><blockquote><p>看过后，我陷入深深的焦虑中，事实上至今都未缓过来。</p></blockquote></li><li><p>黑客与画家</p></li><li><p>head first 设计模式</p></li><li><p>漂洋过海来看你</p></li><li><p>幸福了吗</p></li><li><p>长夜难明</p><blockquote><p>第一次看紫金陈的推理小说，没失望</p></blockquote></li><li><p>推理之王1：无证之罪</p></li><li><p>推理之王2：坏小孩</p></li><li><p>鬼吹灯 (精绝古城, 龙岭迷窟, 云南虫谷, 昆仑神宫)</p><blockquote><p>高中时这书就很火，多年过去现在才看，随时补回一些青春的遗憾。虽然还未看完。。。</p></blockquote></li><li><p>挪威的森林</p></li><li><p>许三观卖血记</p></li><li><p>活着</p></li><li><p>三重门</p><blockquote><p>补青春？</p></blockquote></li></ul><h1 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h1><p>没必要把看过的电影，玩过的游戏都列举出来，我就写几个值得看，感触较深的。</p><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><ul><li><p>血战钢锯岭</p></li><li><p>忠犬八公的故事</p><blockquote><p>感人</p></blockquote></li><li><p>疯狂动物城</p></li><li><p>乘风破浪</p></li><li><p>战狼2</p><blockquote><p>确实是好电影，但网友们吹的过头了</p></blockquote></li></ul><h2 id="电视剧"><a href="#电视剧" class="headerlink" title="电视剧"></a>电视剧</h2><ul><li><p>人名的名义</p><blockquote><p>非常推荐</p></blockquote></li><li><p>欢乐颂 2</p></li><li><p>大军师司马懿之军师联盟</p><blockquote><p>推荐，这个时间正在更新它的第二部</p></blockquote></li><li><p>越狱 5</p><blockquote><p>主要越狱的前几部看的很过瘾，这新作极其期待，但其实一般</p></blockquote></li><li><p>鬼吹灯之精绝古城</p><blockquote><p>好看</p></blockquote></li><li><p>我的前半生</p></li><li><p>灵魂摆渡 1，2，3</p></li><li><p>黑镜 1，2，3</p><blockquote><p>有意思</p></blockquote></li><li><p>白夜追凶</p><blockquote><p>媲美美剧，最高评价</p></blockquote></li><li><p>无证之罪</p></li><li><p>生逢灿烂的日子</p></li><li><p>一起同过窗1，2</p></li></ul><blockquote><p>让我笑得像个傻子，赶紧出第三季</p></blockquote><h2 id="综艺"><a href="#综艺" class="headerlink" title="综艺"></a>综艺</h2><ul><li><p>极限挑战 3</p><blockquote><p>事实上今年我就看了这一个，我也认为其他综艺也完全不是极挑的对手</p></blockquote></li></ul><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><ul><li><p>饥荒</p></li><li><p>文明 6</p></li><li><p>失落城堡</p><blockquote><p>据说是几个大学生做的游戏，卖了20W份？很强。</p></blockquote></li><li><p>星露谷物语</p><blockquote><p>极其适合在 NS 上玩，推荐。找回初中玩 GBA 《牧场物语：矿石镇》的回忆。</p></blockquote></li><li><p>FIFA17</p></li><li><p>FIFA18</p></li><li><p>神秘海域4</p></li><li><p>喷射战士2</p></li><li><p>古墓丽影：崛起</p></li></ul><h1 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h1><img src="/2017/12/31/2017-annual-summary/p1.png" title="Github 2017 贡献图"><ul><li><a href="https://github.com/gavin66/zhihu_crawler" target="_blank" rel="noopener">zhihu_crawler</a> - 广度搜索爬取知乎用户信息</li><li><a href="https://github.com/gavin66/proxy_list" target="_blank" rel="noopener">proxy_list</a> - 爬取免费代理 （第一次上 Github 日 Trending，虽然是短暂的一天）</li><li><a href="https://github.com/gavin66/pg-es-fdw" target="_blank" rel="noopener">pg-es-fdw</a> - PostgreSQL数据自动同步至Elasticsearch</li></ul><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>我发现我入职的所有公司都没有加班的习惯，即使是在北京工作，也从未有过996的体验。工作本身也很轻松，闲暇时间挺多，自学了很多技术。即使这样，也还是在10月离职了。现在是在家做远程兼职工作，虽然工资大幅减少，但胜在自由轻松，考虑着再找一份远程全职工作。但这工作第一不好找，第二待遇也不会太好。如果过了年回北京再找工作，工资肯定会达到心里预期，但每天挤着地铁，住着租的房子，吃饭不方便，每周还要高铁跑来跑去，这样的生活我已经过怵了。所以现在就在自由和工资间纠结，怎么办？我需要好好想想。</p><h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><ol><li>多读书</li><li>学习 Golang</li><li>学习游戏制作，做一款自己的游戏</li><li>找个女朋友？（感情呢，还是和去年一样。相亲了两位，基本是看了照片就“劝退”了，我一点办法没有。。。我觉得我长的就一大众脸，也没太差吧）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2017年12月31日，2017年的最后一天。各种跨年演讲，晚会都在直播着，看着他们的总结，想着自己这一年虽然没有太多的波折，无惊无喜，但也是需要理清自己这一年干的事情，是吧。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.imgavin.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://blog.imgavin.me/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计划" scheme="http://blog.imgavin.me/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - ss</title>
    <link href="http://blog.imgavin.me/2017/12/15/linux-cmd-ss/"/>
    <id>http://blog.imgavin.me/2017/12/15/linux-cmd-ss/</id>
    <published>2017-12-15T03:10:58.000Z</published>
    <updated>2018-04-19T07:15:11.365Z</updated>
    
    <content type="html"><![CDATA[<p>ss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p><p>当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。</p><p>天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）</p><a id="more"></a><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>-h, –help    帮助信息</p><p>-V, –version    程序版本信息</p><p>-n, –numeric    不解析服务名称</p><p>-r, –resolve        解析主机名</p><p>-a, –all    显示所有套接字（sockets）</p><p>-l, –listening    显示监听状态的套接字（sockets）</p><p>-o, –options        显示计时器信息</p><p>-e, –extended       显示详细的套接字（sockets）信息</p><p>-m, –memory         显示套接字（socket）的内存使用情况</p><p>-p, –processes    显示使用套接字（socket）的进程</p><p>-i, –info    显示 TCP内部信息</p><p>-s, –summary    显示套接字（socket）使用概况</p><p>-4, –ipv4           仅显示IPv4的套接字（sockets）</p><p>-6, –ipv6           仅显示IPv6的套接字（sockets）</p><p>-0, –packet            显示 PACKET 套接字（socket）</p><p>-t, –tcp    仅显示 TCP套接字（sockets）</p><p>-u, –udp    仅显示 UCP套接字（sockets）</p><p>-d, –dccp    仅显示 DCCP套接字（sockets）</p><p>-w, –raw    仅显示 RAW套接字（sockets）</p><p>-x, –unix    仅显示 Unix套接字（sockets）</p><p>-f, –family=FAMILY  显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink</p><p>-A, –query=QUERY, –socket=QUERY</p><p>​      QUERY := {all|inet|tcp|udp|raw|unix|packet|netlink}[,QUERY]</p><p>-D, –diag=FILE     将原始TCP套接字（sockets）信息转储到文件</p><p> -F, –filter=FILE   从文件中都去过滤器信息</p><p>​       FILTER := [ state TCP-STATE ] [ EXPRESSION ]</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ol><li><p>显示TCP连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -at</span></span><br><span class="line">State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port   </span><br><span class="line">LISTEN     0      0                                         127.0.0.1:smux                                               *:*       </span><br><span class="line">LISTEN     0      0                                                 *:3690                                               *:*       </span><br><span class="line">LISTEN     0      0                                                 *:ssh                                                *:*       </span><br><span class="line">ESTAB      0      0                                   192.168.120.204:ssh                                        10.2.0.68:49368</span><br></pre></td></tr></table></figure></li><li><p>显示 Sockets 摘要</p><p>列出当前的established, closed, orphaned and waiting TCP sockets</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -s</span></span><br><span class="line">Total: 34 (kernel 48)</span><br><span class="line">TCP:   4 (estab 1, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 3</span><br><span class="line"></span><br><span class="line">Transport Total     IP        IPv6</span><br><span class="line">*         48        -         -        </span><br><span class="line">RAW       0         0         0        </span><br><span class="line">UDP       5         5         0        </span><br><span class="line">TCP       4         4         0        </span><br><span class="line">INET      9         9         0        </span><br><span class="line">FRAG      0         0         0</span><br></pre></td></tr></table></figure></li><li><p>列出所有打开的网络连接端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -l</span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   </span><br><span class="line">0      0                                              127.0.0.1:smux                                                    *:*       </span><br><span class="line">0      0                                                      *:3690                                                    *:*       </span><br><span class="line">0      0                                                      *:ssh                                                     *:*</span><br></pre></td></tr></table></figure></li><li><p>查看进程使用的socket</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -pl</span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   </span><br><span class="line">0      0                                              127.0.0.1:smux                                                    *:*        users:((<span class="string">"snmpd"</span>,2716,8))</span><br><span class="line">0      0                                                      *:3690                                                    *:*        users:((<span class="string">"svnserve"</span>,3590,3))</span><br><span class="line">0      0                                                      *:ssh                                                     *:*        users:((<span class="string">"sshd"</span>,2735,3))</span><br></pre></td></tr></table></figure></li><li><p>找出打开套接字/端口应用程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -lp|grep 1935</span></span><br><span class="line">0      0                            *:1935                          *:*        users:((<span class="string">"fmsedge"</span>,2913,18))</span><br><span class="line">0      0                    127.0.0.1:19350                         *:*        users:((<span class="string">"fmsedge"</span>,2913,17))</span><br><span class="line">[root@localhost ~]<span class="comment"># ss -lp|grep 3306</span></span><br><span class="line">0      0                            *:3306                          *:*        users:((<span class="string">"mysqld"</span>,2871,10))</span><br></pre></td></tr></table></figure></li><li><p>显示所有UDP Sockets</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -au</span></span><br><span class="line">State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port   </span><br><span class="line">UNCONN     0      0                                         127.0.0.1:syslog                                             *:*       </span><br><span class="line">UNCONN     0      0                                                 *:snmp                                               *:*       </span><br><span class="line">ESTAB      0      0                                   192.168.120.203:39641                                  10.58.119.119:domain</span><br></pre></td></tr></table></figure></li><li><p>显示所有状态为established的SMTP连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -o state established '( dport = :smtp or sport = :smtp )' </span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port</span><br></pre></td></tr></table></figure></li><li><p>显示所有状态为Established的HTTP连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -o state established '( dport = :http or sport = :http )' </span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   </span><br><span class="line">0      0                                              75.126.153.214:2164                                        192.168.10.42:http</span><br></pre></td></tr></table></figure></li><li><p>列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7/24所有 tcp套接字</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -o state fin-wait-1 <span class="string">'( sport = :http or sport = :https )'</span> dst 193.233.7/24</span><br></pre></td></tr></table></figure></li><li><p>用TCP 状态过滤Sockets:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss -4 state FILTER-NAME-HERE </span><br><span class="line">ss -6 state FILTER-NAME-HERE</span><br></pre></td></tr></table></figure><p>[root@localhost ~]#ss -4 state closing<br>Recv-Q Send-Q                                                  Local Address:Port                                                      Peer Address:Port<br>1      11094                                                  75.126.153.214:http                                                      192.168.10.42:4669<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    FILTER-NAME-HERE 可以代表以下任何一个：</span><br><span class="line">    </span><br><span class="line">    established</span><br><span class="line">    </span><br><span class="line">    syn-sent</span><br><span class="line">    </span><br><span class="line">    syn-recv</span><br><span class="line">    </span><br><span class="line">    fin-wait-1</span><br><span class="line">    </span><br><span class="line">    fin-wait-2</span><br><span class="line">    </span><br><span class="line">    time-wait</span><br><span class="line">    </span><br><span class="line">    closed</span><br><span class="line">    </span><br><span class="line">    close-wait</span><br><span class="line">    </span><br><span class="line">    last-ack</span><br><span class="line">    </span><br><span class="line">    listen</span><br><span class="line">    </span><br><span class="line">    closing</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">    all : 所有以上状态</span><br><span class="line"></span><br><span class="line">    connected : 除了listen and closed的所有状态</span><br><span class="line"></span><br><span class="line">    synchronized :所有已连接的状态除了syn-sent</span><br><span class="line"></span><br><span class="line">    bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.</span><br><span class="line"></span><br><span class="line">    big : 和bucket相反.</span><br><span class="line"></span><br><span class="line">11. 匹配远程地址和端口号</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    ss dst ADDRESS_PATTERN</span><br><span class="line">    ss dst 192.168.1.5</span><br><span class="line">    ss dst 192.168.119.113:http </span><br><span class="line">    ss dst 192.168.119.113:smtp </span><br><span class="line">    ss dst 192.168.119.113:443</span><br></pre></td></tr></table></figure></p><p>[root@localhost ~]# ss dst 192.168.119.113<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:20229<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:61056<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:61623<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:60924<br>ESTAB      0      0                                   192.168.119.103:16050                                192.168.119.113:43701<br>ESTAB      0      0                                   192.168.119.103:16073                                192.168.119.113:32930<br>ESTAB      0      0                                   192.168.119.103:16073                                192.168.119.113:49318<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:3844<br>[root@localhost ~]# ss dst 192.168.119.113:http<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>[root@localhost ~]# ss dst 192.168.119.113:3844<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:3844<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">12. 匹配本地地址和端口号</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    ss src ADDRESS_PATTERN</span><br><span class="line">    ss src 192.168.119.103</span><br><span class="line">    ss src 192.168.119.103:http</span><br><span class="line">    ss src 192.168.119.103:80</span><br><span class="line">    ss src 192.168.119.103:smtp</span><br><span class="line">    ss src 192.168.119.103:25</span><br></pre></td></tr></table></figure></p><p>[root@localhost ~]# ss src 192.168.119.103:16021<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:63054<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:62894<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:63055<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:2274<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:44784<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:7233<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.103:58660<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:44822<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56737<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:57487<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56736<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:64652<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56586<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:64653<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56587<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">13. 将本地或者远程端口和一个数比较</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    ss dport OP PORT </span><br><span class="line">    ss sport OP PORT</span><br></pre></td></tr></table></figure></p><p>[root@localhost ~]# ss  sport = :http<br>[root@localhost ~]# ss  dport = :http<br>[root@localhost ~]# ss  dport > :1024<br>[root@localhost ~]# ss  sport > :1024<br>[root@localhost ~]# ss sport \&lt; :32000<br>[root@localhost ~]# ss  sport eq :22<br>[root@localhost ~]# ss  dport != :22<br>[root@localhost ~]# ss  state connected sport = :http<br>[root@localhost ~]# ss ( sport = :http or sport = :https )<br>[root@localhost ~]# ss -o state fin-wait-1 ( sport = :http or sport = :https ) dst 192.168.1/24<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    ss dport OP PORT 远程端口和一个数比较；ss sport OP PORT 本地端口和一个数比较。</span><br><span class="line">    </span><br><span class="line">    OP 可以代表以下任意一个: </span><br><span class="line">    </span><br><span class="line">    &lt;= or le : 小于或等于端口号</span><br><span class="line">    </span><br><span class="line">    \&gt;= or ge : 大于或等于端口号</span><br><span class="line">    </span><br><span class="line">    == or eq : 等于端口号</span><br><span class="line">    </span><br><span class="line">    != or ne : 不等于端口号</span><br><span class="line">    </span><br><span class="line">    &lt; or gt : 小于端口号</span><br><span class="line">    </span><br><span class="line">    \&gt; or lt : 大于端口号</span><br><span class="line"></span><br><span class="line">14. ss 和 netstat 效率对比</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    time netstat -at</span><br><span class="line">    time ss</span><br><span class="line"></span><br><span class="line">    [root@localhost ~]# time ss   </span><br><span class="line">    real    0m0.739s</span><br><span class="line">    user    0m0.019s</span><br><span class="line">    sys     0m0.013s</span><br><span class="line">    [root@localhost ~]# </span><br><span class="line">    [root@localhost ~]# time netstat -at</span><br><span class="line">    real    2m45.907s</span><br><span class="line">    user    0m0.063s</span><br><span class="line">    sys     0m0.067s</span><br></pre></td></tr></table></figure></p><p>用time 命令分别获取通过netstat和ss命令获取程序和概要占用资源所使用的时间。在服务器连接数比较多的时候，netstat的效率完全没法和ss比。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。&lt;/p&gt;
&lt;p&gt;当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。&lt;/p&gt;
&lt;p&gt;天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
      <category term="ss" scheme="http://blog.imgavin.me/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 主从复制</title>
    <link href="http://blog.imgavin.me/2017/10/25/mysql-replication/"/>
    <id>http://blog.imgavin.me/2017/10/25/mysql-replication/</id>
    <published>2017-10-25T02:42:22.000Z</published>
    <updated>2018-03-23T02:07:36.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建复制帐号,主库和从库都需创建</span></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO repl@<span class="string">'192.168.100.%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主库 my.cnf 指定一个独一无二的服务器 ID(server ID)</span></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">server_id = 21</span><br><span class="line"><span class="comment"># 如果之前没有在 Mysql 配置文件中指定 log-bin 选项，就需要重启 mysql</span></span><br><span class="line"><span class="comment"># 使用 SHOW MASTER STATUS 命令，检查二进制日志文件是否已经在主库上创建</span></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      120 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从库上修改 my.cnf 配置，需重启 Mysql</span></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">server_id = 22</span><br><span class="line">relay_log = /var/lib/mysql/mysql-relay-bin</span><br><span class="line">log_slave_updates = 1</span><br><span class="line">read_only = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动复制</span></span><br><span class="line"><span class="comment"># 下一步告诉从库如何连接到主库并重放其二进制日志。</span></span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">'192.168.100.21'</span>,</span><br><span class="line">    -&gt; MASTER_USER=<span class="string">'repl'</span>,</span><br><span class="line">    -&gt; MASTER_PASSWORD=<span class="string">'123456'</span>,</span><br><span class="line">    -&gt; MASTER_LOG_FILE=<span class="string">'mysql-bin.000001'</span>,</span><br><span class="line">    -&gt; MASTER_LOG_POS=0;</span><br><span class="line"><span class="comment"># 开启复制</span></span><br><span class="line">mysql&gt; START SLAVE;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主库可以看到由从库 IO 线程向主库发起的连接</span></span><br><span class="line">mysql&gt; SHOW PROCESSLIST\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">     Id: 5</span><br><span class="line">   User: repl</span><br><span class="line">   Host: 192.168.100.22:54294</span><br><span class="line">     db: NULL</span><br><span class="line">Command: Binlog Dump</span><br><span class="line">   Time: 88</span><br><span class="line">  State: Master has sent all binlog to slave; waiting <span class="keyword">for</span> binlog to be updated</span><br><span class="line">   Info: NULL</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 从库可以看到 IO 线程和 SQL 线程</span></span><br><span class="line">mysql&gt; SHOW PROCESSLIST\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">     Id: 3</span><br><span class="line">   User: system user</span><br><span class="line">   Host:</span><br><span class="line">     db: NULL</span><br><span class="line">Command: Connect</span><br><span class="line">   Time: 2005</span><br><span class="line">  State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">   Info: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">     Id: 4</span><br><span class="line">   User: system user</span><br><span class="line">   Host:</span><br><span class="line">     db: NULL</span><br><span class="line">Command: Connect</span><br><span class="line">   Time: 1184</span><br><span class="line">  State: Slave has <span class="built_in">read</span> all relay <span class="built_in">log</span>; waiting <span class="keyword">for</span> the slave I/O thread to update it</span><br><span class="line">   Info: NULL</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://segmentfault.com/a/1190000008942618" target="_blank" rel="noopener">MySql 主从复制及配置实现</a></p></li><li><p><a href="http://www.raye.wang/2017/04/14/mysqlzhu-cong-fu-zhi-da-jian-ji-yu-ri-zhi-binlog/" target="_blank" rel="noopener">MySQL主从复制搭建，基于日志（binlog）</a></p></li><li><a href="https://lanjingling.github.io/2015/10/26/mysql-replication-master-master/" target="_blank" rel="noopener">Mysql 主主复制</a></li><li><a href="https://segmentfault.com/a/1190000009724090" target="_blank" rel="noopener">mysql主从复制 主主复制</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://blog.imgavin.me/tags/mysql/"/>
    
      <category term="replication" scheme="http://blog.imgavin.me/tags/replication/"/>
    
      <category term="master" scheme="http://blog.imgavin.me/tags/master/"/>
    
      <category term="slave" scheme="http://blog.imgavin.me/tags/slave/"/>
    
  </entry>
  
  <entry>
    <title>wrk - HTTP 性能测试工具</title>
    <link href="http://blog.imgavin.me/2017/10/18/tools-http-wrk/"/>
    <id>http://blog.imgavin.me/2017/10/18/tools-http-wrk/</id>
    <published>2017-10-18T02:09:19.000Z</published>
    <updated>2017-11-02T08:18:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/wg/wrk" target="_blank" rel="noopener">wrk</a> 是一个 http 的性能基准测试工具。使用简单的多核机器，多线程并且利用 Linux系统的 io 模型（ epoll ，kqueue）来产生大量并发。并且 http 请求的创建可以使用 <code>LuaJIT</code> 脚本。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wrk</span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wg/wrk</span><br><span class="line"><span class="built_in">cd</span> wrk</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可执行文件放进你的环境变量路径中，方便命令行执行</span></span><br><span class="line">cp wrk /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html</span><br></pre></td></tr></table></figure><p>使用12个线程创建400个连接，持续30秒</p><p>测试结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Running 30s <span class="built_in">test</span> @ http://127.0.0.1:8080/index.html</span><br><span class="line">  12 threads and 400 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   635.91us    0.89ms  12.92ms   93.69%</span><br><span class="line">    Req/Sec    56.20k     8.07k   62.00k    86.54%</span><br><span class="line">  22464657 requests <span class="keyword">in</span> 30.00s, 17.76GB <span class="built_in">read</span></span><br><span class="line">Requests/sec: 748868.53</span><br><span class="line">Transfer/sec:    606.33MB</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">每个线程数据状态</span><br><span class="line">平均响应时间 635.91ms 偏差0.89(越小越稳定) 最大12.92ms</span><br><span class="line">每秒请求 56.20k 个 偏差 8.07k 最大 62.00k  </span><br><span class="line"></span><br><span class="line">总共在 30.00s 内发生了 22464657 个请求，读取了 17.76GB 数据</span><br><span class="line">每秒请求数为 748868.53</span><br><span class="line">每秒数据传输量 606.33MB</span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c, --connections  连接数，每个线程连接数是：connections/threads</span><br><span class="line">-d, --duration     测试持续时间</span><br><span class="line">-t, --threads      使用的线程数量</span><br><span class="line">-s, --script       使用的 lua 脚本</span><br><span class="line">-H, --header       请求头信息</span><br><span class="line">--latency      打印详细响应数据</span><br><span class="line">--timeout      未响应的超时时间</span><br><span class="line">-v, --version      打印版本号</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://zjumty.iteye.com/blog/2221040" target="_blank" rel="noopener">wrk – 小巧轻盈的 http 性能测试工具</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/wg/wrk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wrk&lt;/a&gt; 是一个 http 的性能基准测试工具。使用简单的多核机器，多线程并且利用 Linux系统的 io 模型（ epoll ，kqueue）来产生大量并发。并且 http 请求的创建可以使用 &lt;code&gt;LuaJIT&lt;/code&gt; 脚本。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="http" scheme="http://blog.imgavin.me/tags/http/"/>
    
      <category term="压力测试" scheme="http://blog.imgavin.me/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
      <category term="负载测试" scheme="http://blog.imgavin.me/tags/%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
