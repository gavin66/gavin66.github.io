<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gavin&#39;s Blog</title>
  
  <subtitle>宁愿小众,不愿平庸</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.imgavin.me/"/>
  <updated>2018-12-29T04:14:59.249Z</updated>
  <id>http://blog.imgavin.me/</id>
  
  <author>
    <name>Gavin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018 总结</title>
    <link href="http://blog.imgavin.me/2018/12/27/2018-annual-summary/"/>
    <id>http://blog.imgavin.me/2018/12/27/2018-annual-summary/</id>
    <published>2018-12-27T06:32:33.000Z</published>
    <updated>2018-12-29T04:14:59.249Z</updated>
    
    <content type="html"><![CDATA[<p>2018 即将结束，又该写总结了。好让自己知道这一年做了什么事情，得与失，成与败。还有今年都发生了哪些大事件，我关注的哪些事件，来写一个年度盘点。</p><a id="more"></a><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>结束了远程的工作并在4月份入职新的公司。工作轻松愉快，没有加班文化，工作之余拥有更多自己的时间。并且公司离租的房子步行只有1公里，上下班和中午休息都可以回家吃到自己做的饭，更卫生健康。</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>从4月开始继续天津北京两地跑，只是这次多数时候是两周回一次天津，看心情看情况可能也会周末连续回家。回家陪老爹出门玩一玩，转一转，吃一吃他做的饭，陪伴很重要</p><p>今年明显厨艺见长，因为总不能吃我之前只会做的那几样。需要学习新的品种，优化老的菜品</p><p>老爹去年在静海买的房子终于是交房了，他也开始自己动手装修，真的是自己装修，没有装修队。自己买沙子水泥瓷砖等等，全部自己动手，毕竟他干了几十年建筑。只是他毕竟60岁了，我还有些顾虑，但他知轻重就还好。他在装修之余，凭着他的养老金去了西安，越南等地旅游，终于是舍得花钱，我挺高兴的</p><p>第一次尝试着买基金，目前为止是亏的，希望来年能回本，这要求真低！</p><p>这一年有很多名人去世，霍金、单田芳、李咏、金庸、臧天朔、师胜杰等等，癌症依然是人类的头号敌人</p><p>中国的环境，空气仍旧不乐观，空气清新程度主要依赖刮风的级数</p><p>最近看到好多大公司裁员的信息，各种自媒体宣扬“2019年可能会是过去十年里最差的一年，但却是未来十年里最好的一年”。事实上每年都会有裁员，只不过今年被重点对待了呢。但不管怎样，我自己没有房贷、车贷、负债，而且还是单身狗，老爹又有养老金，即使被裁我也能依靠手里的钱度过这个“冬天”。</p><hr><div class="note info"><p>老爹在西安 2018.04.24 </p></div><img src="/2018/12/27/2018-annual-summary/p2.jpg"><img src="/2018/12/27/2018-annual-summary/p3.jpg"><img src="/2018/12/27/2018-annual-summary/p4.jpg"><hr><div class="note info"><p>老爹和我在蓟县 2018.08.25 </p></div><img src="/2018/12/27/2018-annual-summary/p10.jpg"><img src="/2018/12/27/2018-annual-summary/p11.jpg"><img src="/2018/12/27/2018-annual-summary/p12.jpg"><img src="/2018/12/27/2018-annual-summary/p13.jpg"><img src="/2018/12/27/2018-annual-summary/p14.jpg"><hr><div class="note info"><p>老爹在越南芽庄 2018.11.01 </p></div><img src="/2018/12/27/2018-annual-summary/p5.jpg"><img src="/2018/12/27/2018-annual-summary/p6.jpg"><img src="/2018/12/27/2018-annual-summary/p7.jpg"><img src="/2018/12/27/2018-annual-summary/p8.jpg"><img src="/2018/12/27/2018-annual-summary/p9.jpg"><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><ul><li>网络是怎样连接的</li><li>高性能 Mysql</li><li>亿级流量网站架构核心技术</li><li>赌球记</li></ul><p>这一年没读多少书，一个是自己懒，一个是诱惑太多，下了班只想玩游戏看视频，追漫画的优先级都很低，何况看书。新的一年，多看几本？</p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><ul><li>美国末日</li><li>塞尔达传说荒野之息</li><li>超级马里奥奥德赛</li><li>马里奥赛车8</li><li>精灵宝可梦Let’s Go 皮卡丘</li><li>无双大蛇3</li><li>FIFA19</li><li>命运2</li></ul><h2 id="足球"><a href="#足球" class="headerlink" title="足球"></a>足球</h2><p>皇马欧冠三连冠，尤文意甲七连冠，拜仁德甲六连冠</p><p>法国时隔二十年再登世界之巅，克罗地亚延续神奇夺世界杯亚军，上港首夺中超冠军</p><p>姆巴佩惊艳世界杯，莫德里奇成为梅罗时代的第一位金球奖</p><p>梅西第五次夺得欧洲金靴，中国骄傲王霜成为亚足联最佳女运动员</p><p>伊涅斯塔离开巴萨，布冯离开尤文，C 罗离开皇马，托雷斯告别马竞，温格告别阿森纳</p><p>桑巴精灵罗纳尔迪尼奥退役，特里退役，德罗巴退役</p><p>阿斯托里，维猜，张欧影，希望天堂也有足球</p><p>穆里尼奥的曼联第三年下课</p><p><strong>米兰复兴仍看不到希望！</strong></p><div class="video-container"><iframe src="//www.youtube.com/embed/KRdYKHX76SM" frameborder="0" allowfullscreen></iframe></div><h1 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h1><img src="/2018/12/27/2018-annual-summary/p1.jpg" title="Github 2018 贡献图"><ol><li><p><a href="https://github.com/gavin66/crx_toolkit" target="_blank" rel="noopener">crx_toolkit</a> -  chrome 的扩展程序，已上架 <a href="https://chrome.google.com/webstore/detail/toolkit-%E5%B7%A5%E5%85%B7%E7%AE%B1/bcdgpdljiogdmomapjdgnmmhdjipkgkl" target="_blank" rel="noopener">官方商店</a></p><p>由于工作时发现的一些问题和痛点，比如：</p><ul><li>生成二维码要找专门的网站，在它的网站还要点击好几次才能生成一张，批量生成还要收费</li><li>在前端 base64 编码 Emoji 表情，后端解析会出现乱码。而且多个 chrome 的扩展也都有这问题</li></ul><p>所以，决定学习并写一个 chrome 扩展来解决这些问题，以后遇到其他问题也可以把解决方案都放在这个扩展中。还有一些实用工具也会放在里面，主要方便公司的各种专业人士使用。</p></li><li><p><a href="https://github.com/gavin66/track" target="_blank" rel="noopener">track</a> -  PHP 框架</p><p>也是在工作中遇到的问题，客气的说没有规范，不客气的说就是垃圾代码，胡写乱写。开发人员的水平参差不齐。使用外国的框架，找中文的文档，只知道文档内的理论，不懂源码，出现深层次的问题不知如何解决。所以为了解决这种问题并锻炼自己的能力，按照自己对 laravel 的理解写了一个完整的 PHP 框架，注释详细并且全部是中文注释。希望在未来的项目中使用起来，一点点完善它，让它成为公司 PHP 项目的主要框架。</p></li><li><p><a href="https://github.com/gavin66/proxy_list" target="_blank" rel="noopener">proxy_list</a> - 代理池</p><p>维护老项目，解决 github 上提的 issues ，添加了爬取 IP 的地址，提升稳定性等</p></li><li><p><a href="https://github.com/gavin66/go-note" target="_blank" rel="noopener">go-note</a> -  Go 语言学习笔记</p><p>新技能，学习了 Go 语言的基本语法和特性，未来会磨练此技术。在未来业务需求中增加一种技术上选择的可能性。</p></li></ol><p>事实上，这一年在工作或做开源时还有一些其他的成长和收获。比如，加深了对 vue 的理解和使用，微博爬虫的学习等等。</p><h1 id="2019-计划"><a href="#2019-计划" class="headerlink" title="2019 计划"></a>2019 计划</h1><ol><li>在学 unity，希望2019年能做出个像样的小游戏</li><li>开源项目的维护，新功能的添加</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018 即将结束，又该写总结了。好让自己知道这一年做了什么事情，得与失，成与败。还有今年都发生了哪些大事件，我关注的哪些事件，来写一个年度盘点。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.imgavin.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://blog.imgavin.me/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计划" scheme="http://blog.imgavin.me/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - grep</title>
    <link href="http://blog.imgavin.me/2018/06/27/linux-cmd-grep/"/>
    <id>http://blog.imgavin.me/2018/06/27/linux-cmd-grep/</id>
    <published>2018-06-27T06:38:44.000Z</published>
    <updated>2018-12-26T06:08:38.487Z</updated>
    
    <content type="html"><![CDATA[<p>grep (global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p><a id="more"></a><h2 id="grep命令的一般选项及实例"><a href="#grep命令的一般选项及实例" class="headerlink" title="grep命令的一般选项及实例"></a>grep命令的一般选项及实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep [OPTIONS] PATTERN [FILE...] </span><br><span class="line">grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]</span><br></pre></td></tr></table></figure><p>grep命令用于搜索由Pattern参数指定的模式，并将每个匹配的行写入标准输出中。这些模式是具有限定的正则表达式，它们使用ed或egrep命令样式。如果在File参数中指定了多个名称，grep命令将显示包含匹配行的文件的名称。对 shell 有特殊含义的字符 ($, *, [, |, ^, (, ), \ ) 出现在 Pattern参数中时必须带双引号。如果 Pattern参数不是简单字符串，通常必须用单引号将整个模式括起来。在诸如 [a-z], 之类的表达式中，-（减号）cml 可根据当前正在整理的序列来指定一个范围。整理序列可以定义等价的类以供在字符范围中使用。如果未指定任何文件，grep会假定为标准输入。</p><h2 id="grep正则表达式元字符集-基本集"><a href="#grep正则表达式元字符集-基本集" class="headerlink" title="grep正则表达式元字符集(基本集)"></a>grep正则表达式元字符集(基本集)</h2><p><code>^</code>  锚定行的开始 如：<code>&#39;^grep&#39;</code>匹配所有以grep开头的行。</p><p><code>$</code>  锚定行的结束 如：<code>&#39;grep$&#39;</code>匹配所有以grep结尾的行。</p><p><code>.</code>   匹配一个非换行符的字符 如：<code>&#39;gr.p&#39;</code>匹配gr后接一个任意字符，然后是p。</p><p><code>*</code>  匹配零个或多个先前字符 如：<code>&#39; *grep&#39;</code>匹配所有一个或多个空格后紧跟grep的行。 <code>.*</code>一起用代表任意字符。</p><p><code>[]</code> 匹配一个指定范围内的字符，如<code>&#39;[Gg]rep&#39;</code>匹配Grep和grep。</p><p><code>[^]</code> 匹配一个不在指定范围内的字符，如：<code>&#39;[^A-FH-Z]rep&#39;</code>匹配不包含A-F和H-Z的一个字母开头，紧跟rep的行。</p><p><code>\(..\)</code>  标记匹配字符，如：<code>&#39;\(love\)&#39;</code>，love被标记为1。</p><p><code>\&lt;</code>  锚定单词的开始，如：<code>&#39;\</code></p><p><code>\&gt;</code>  锚定单词的结束，如<code>&#39;grep\&gt;&#39;</code>匹配包含以grep结尾的单词的行。</p><p><code>x\{m\}</code> 连续重复字符x，m次，如：<code>&#39;o\{5\}&#39;</code>匹配包含连续5个o的行。</p><p><code>x\{m,\}</code> 连续重复字符x,至少m次，如：<code>&#39;o\{5,\}&#39;</code>匹配至少连续有5个o的行。</p><p><code>x\{m,n\}</code> 连续重复字符x，至少m次，不多于n次，如：<code>&#39;o\{5,10\}&#39;</code>匹配连续5–10个o的行。</p><p><code>\w</code>  匹配一个文字和数字字符，也就是[A-Za-z0-9]，如：<code>&#39;G\w*p&#39;</code>匹配以G后跟零个或多个文字或数字字符，然后是p。</p><p><code>\W</code> w的反置形式，匹配一个非单词字符，如点号句号等。<code>\W*</code>则可匹配多个。</p><p><code>\b</code>  单词锁定符，如: <code>&#39;\bgrep\b&#39;</code>只匹配grep，即只能是grep这个单词，两边均为空格。</p><h2 id="grep命令的常用选项"><a href="#grep命令的常用选项" class="headerlink" title="grep命令的常用选项"></a>grep命令的常用选项</h2><p><code>-?</code></p><p>同时显示匹配行上下的？行，如：grep -2 pattern filename同时显示匹配行的上下2行。</p><p><code>-b，--byte-offset</code></p><p>打印匹配行前面打印该行所在的块号码。</p><p><code>-c,--count</code></p><p>只打印匹配的行数，不显示匹配的内容。</p><p><code>-f File，--file=File</code></p><p>从文件中提取模板。空文件中包含0个模板，所以什么都不匹配。</p><p><code>-h，--no-filename</code></p><p>当搜索多个文件时，不显示匹配文件名前缀。</p><p><code>-i，--ignore-case</code></p><p>忽略大小写差别。</p><p><code>-q，--quiet</code></p><p>取消显示，只返回退出状态。0则表示找到了匹配的行。</p><p><code>-l，--files-with-matches</code></p><p>打印匹配模板的文件清单。</p><p><code>-L，--files-without-match</code></p><p>打印不匹配模板的文件清单。</p><p><code>-n，--line-number</code></p><p>在匹配的行前面打印行号。</p><p><code>-s，--silent</code></p><p>不显示关于不存在或者无法读取文件的错误信息。</p><p><code>-v，--revert-match</code></p><p>反检索，只显示不匹配的行。</p><p><code>-w，--word-regexp</code></p><p>如果被\引用，就把表达式做为一个单词搜索。</p><p><code>-V，--version</code></p><p>显示软件版本信息。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><code>ls -l | grep &#39;^a&#39;</code> ：通过管道过滤ls -l输出的内容，只显示以a开头的行</p><p><code>grep &#39;test&#39; d*</code> ：显示所有以d开头的文件中包含test的行</p><p><code>grep &#39;test&#39; aa bb cc</code> ：显示在aa，bb，cc文件中匹配test的行</p><p><code>grep &#39;[a-z]&#39; aa</code> ：显示所有包含每个字符串至少有5个连续小写字符的字符串的行</p><p><code>grep &#39;w(es)t.*&#39; aa</code> ：如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符(.<em>)，这些字符后面紧跟着另外一个es()，找到就显示该行。如果用egrep或grep -E，就不用””号进行转义，直接写成’w(es)t.</em>‘就可以了</p><p><code>grep -i pattern files</code>：不区分大小写地搜索。默认情况区分大小写</p><p><code>grep -l pattern files</code> ：只列出匹配的文件名</p><p><code>grep -L pattern files</code> ：列出不匹配的文件名</p><p><code>grep -w pattern files</code> ：只匹配整个单词，而不是字符串的一部分(如匹配‘magic’，而不是‘magical’)</p><p><code>grep -C number pattern files</code> ：匹配的上下文分别显示[number]行</p><p><code>grep pattern1 | pattern2 files</code>：显示匹配 pattern1 或 pattern2 的行</p><p><code>grep pattern1 files | grep pattern2</code> ：显示既匹配 pattern1 又匹配 pattern2 的行</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linux.cn/article-1672-1.html" target="_blank" rel="noopener">linux 中强大且常用命令：find、grep</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;grep (global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - find</title>
    <link href="http://blog.imgavin.me/2018/06/27/linux-cmd-find/"/>
    <id>http://blog.imgavin.me/2018/06/27/linux-cmd-find/</id>
    <published>2018-06-27T05:55:33.000Z</published>
    <updated>2018-06-27T06:57:51.219Z</updated>
    
    <content type="html"><![CDATA[<p>find 命令用于在目录及子目录中搜索文件。可以执行搜索规则，如文件名，文件类型，文件修改时间等等。</p><a id="more"></a><h2 id="find命令的一般形式"><a href="#find命令的一般形式" class="headerlink" title="find命令的一般形式"></a>find命令的一般形式</h2><p>man文档中给出的find命令的一般形式为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]</span><br></pre></td></tr></table></figure><p>其实 [-H][-L] [-P][-D debugopts] [-Olevel]这几个选项并不常用（至少在我的日常工作中，没有用到过），上面的find命令的常用形式可以简化为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [path...] [expression]</span><br></pre></td></tr></table></figure><ul><li><p>path：find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录</p></li><li><p>expression：expression可以分为<code>-options [-print -exec -ok ...]</code></p><ul><li><code>-options</code>，指定find命令的常用选项，下节详细介绍</li><li><code>-print</code>，find命令将匹配的文件输出到标准输出</li><li><code>-exec</code>，find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为<code>&#39;command&#39; {  } \;</code>，注意{   }和\；之间的空格<br><code>find ./ -size 0 -exec rm {} \;</code> 删除文件大小为零的文件 （还可以以这样做：<code>rm -i</code>find ./ -size 0<code></code> 或 <code>find ./ -size 0 | xargs rm -f &amp;</code>） </li><li>为了用ls -l命令列出所匹配到的文件，可以把ls -l命令放在find命令的-exec选项中：<code>find . -type f -exec ls -l {  } \;</code><br>在/logs目录中查找更改时间在5日以前的文件并删除它们：<code>find /logs -type f -mtime +5 -exec rm {  } \;</code></li><li><code>-ok</code>，和<code>-exec</code>的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。<br><code>find . -name &quot;*.conf&quot;  -mtime +5 -ok rm {  } \;</code> 在当前目录中查找所有文件名以.LOG结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示</li></ul></li></ul><h2 id="find命令的常用选项及实例"><a href="#find命令的常用选项及实例" class="headerlink" title="find命令的常用选项及实例"></a>find命令的常用选项及实例</h2><ul><li><code>-name</code><br>按照文件名查找文件。<br><code>find /dir -name filename</code> 在/dir目录及其子目录下面查找名字为filename的文件<br><code>find . -name &quot;*.c&quot;</code> 在当前目录及其子目录（用“.”表示）中查找任何扩展名为“c”的文件</li><li><code>-perm</code><br>按照文件权限来查找文件。<br><code>find . -perm 755 –print</code> 在当前目录下查找文件权限位为755的文件，即文件属主可以读、写、执行，其它用户可以读、执行的文件</li><li><code>-prune</code><br>使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。<br><code>find /apps -path &quot;/apps/bin&quot; -prune -o –print</code>在/apps目录下查找文件，但不希望在/apps/bin目录下查找<br><code>find /usr/sam -path &quot;/usr/sam/dir1&quot; -prune -o –print</code> 在/usr/sam目录下查找不在dir1子目录之内的所有文件</li><li><code>-user</code><br>按照文件属主来查找文件。<br><code>find ~ -user sam –print</code> 在$HOME目录中查找文件属主为sam的文件</li><li><code>-group</code><br>按照文件所属的组来查找文件。<br><code>find /apps -group gem –print</code> 在/apps目录下查找属于gem用户组的文件 </li><li><code>-mtime -n +n</code><br>按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前。<br><code>find / -mtime -5 –print</code>在系统根目录下查找更改时间在5日以内的文件<br><code>find /var/adm -mtime +3 –print</code> 在/var/adm目录下查找更改时间在3日以前的文件</li><li><code>-nogroup</code><br>查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。<br><code>find / –nogroup -print</code></li><li><code>-nouser</code><br>查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。<br><code>find /home -nouser –print</code></li><li><code>-newer file1 ! file2</code><br>查找更改时间比文件file1新但比文件file2旧的文件。</li><li><code>-type</code><br>查找某一类型的文件，诸如：<br>b - 块设备文件。<br>d - 目录。<br>c - 字符设备文件。<br>p - 管道文件。<br>l - 符号链接文件。<br>f - 普通文件。<br><code>find /etc -type d –print</code> 在/etc目录下查找所有的目录<br><code>find . ! -type d –print</code> 在当前目录下查找除目录以外的所有类型的文件<br><code>find /etc -type l –print</code> 在/etc目录下查找所有的符号链接文件</li><li><code>-size n</code>：[c] 查找文件长度为n块的文件，带有c时表示文件长度以字节计。<br><code>find . -size +1000000c –print</code> 在当前目录下查找文件长度大于1 M字节的文件<br><code>find /home/apache -size 100c –print</code> 在/home/apache目录下查找文件长度恰好为100字节的文件<br><code>find . -size +10 –print</code> 在当前目录下查找长度超过10块的文件（一块等于512字节）</li><li><code>-depth</code>：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找。<br><code>find / -name &quot;CON.FILE&quot; -depth –print</code> 它将首先匹配所有的文件然后再进入子目录中查找 </li><li><code>-mount</code>：在查找文件时不跨越文件系统mount点。<br><code>find . -name &quot;*.XC&quot; -mount –print</code> 从当前目录开始查找位于本文件系统中文件名以XC结尾的文件（不进入其它文件系统）</li><li><code>-follow</code>：如果find命令遇到符号链接文件，就跟踪至链接所指向的文件。</li></ul><h2 id="find与xargs"><a href="#find与xargs" class="headerlink" title="find与xargs"></a>find与xargs</h2><p>在使用find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。</p><p>find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p><p>在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；</p><p>而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p><p>来看看xargs命令是如何同find命令一起使用的，并给出一些例子。</p><p><code>find . -type f -print | xargs file</code>查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</p><p><code>find / -name &quot;core&quot; -print | xargs echo &quot;&quot; &gt;/tmp/core.log</code> 在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到/tmp/core.log 文件中：</p><p><code>find . -type f -print | xargs grep &quot;hostname&quot;</code> 用grep命令在所有的普通文件中搜索hostname这个词</p><p><code>find ./ -mtime +3 -print|xargs rm -f –r</code>删除3天以前的所有东西 （<code>find . -ctime +3 -exec rm -rf {} \;</code>）</p><p><code>find ./ -size 0 | xargs rm -f &amp;</code> 删除文件大小为零的文件</p><p>find命令配合使用exec和xargs可以使用户对所匹配到的文件执行几乎所有的命令。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://linux.cn/article-1672-1.html" target="_blank" rel="noopener">linux 中强大且常用命令：find、grep</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;find 命令用于在目录及子目录中搜索文件。可以执行搜索规则，如文件名，文件类型，文件修改时间等等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 错误解决方法 &quot;ERROR 2006 MySQL server has gone away&quot;</title>
    <link href="http://blog.imgavin.me/2018/05/23/mysql-max-packet/"/>
    <id>http://blog.imgavin.me/2018/05/23/mysql-max-packet/</id>
    <published>2018-05-23T03:44:04.000Z</published>
    <updated>2018-12-25T09:17:09.665Z</updated>
    
    <content type="html"><![CDATA[<p>当在 MySQL 表中插入一行很大的数据时,会有一条错误 [ERROR 2006 (HY000): MySQL server has gone away].这时,你需要修改 MySQL 的配置文件,把<code>max_allowed_packet</code>值设置大一些.</p><p>查看当前<code>max_allowed_packet</code>值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;max_allowed_packet&apos;;</span><br><span class="line">+--------------------+----------+</span><br><span class="line">| Variable_name      | Value    |</span><br><span class="line">+--------------------+----------+</span><br><span class="line">| max_allowed_packet | 16777216 |</span><br><span class="line">+--------------------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这是我已经改过的值(16M),之前默认是1M.</p><p>修改<code>my.cnf</code>文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加以下配置,自行改变</span></span><br><span class="line">max_allowed_packet = 16M</span><br></pre></td></tr></table></figure><p> 最后就是重启 MySQL <code>systemctl restart mysql</code> 就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当在 MySQL 表中插入一行很大的数据时,会有一条错误 [ERROR 2006 (HY000): MySQL server has gone away].这时,你需要修改 MySQL 的配置文件,把&lt;code&gt;max_allowed_packet&lt;/code&gt;值设置大一些
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://blog.imgavin.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>开启 TCP BBR 加速</title>
    <link href="http://blog.imgavin.me/2018/04/28/tcp-bbr-install/"/>
    <id>http://blog.imgavin.me/2018/04/28/tcp-bbr-install/</id>
    <published>2018-04-28T03:28:26.000Z</published>
    <updated>2018-04-28T03:35:36.061Z</updated>
    
    <content type="html"><![CDATA[<p>Google 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。<br>根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。<br>于是我根据目前三大发行版的最新内核，开发了一键安装最新内核并开启 TCP BBR 脚本。</p><a id="more"></a><h2 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h2><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>虚拟技术：OpenVZ 以外的，比如 KVM、Xen、VMware 等<br>内存要求：≥128M<br>日期　　：2018 年 02 月 24 日</p><h3 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h3><ul><li>本脚本已在 <a href="https://teddysun.com/t/vultr" target="_blank" rel="noopener"><strong>Vultr</strong></a> 上的 VPS 全部测试通过。</li><li>当脚本检测到 VPS 的虚拟方式为 OpenVZ 时，会提示错误，并自动退出安装。</li><li>脚本运行完重启发现开不了机的，打开 VPS 后台控制面板的 VNC, 开机卡在 grub 引导, 手动选择内核即可。</li><li>由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用root用户登录，运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure><p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。<br>重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>查看内核版本，显示为最新版就表示 OK 了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>返回值一般为：<br>net.ipv4.tcp_available_congestion_control = bbr cubic reno</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>返回值一般为：<br>net.ipv4.tcp_congestion_control = bbr</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.core.default_qdisc</span><br></pre></td></tr></table></figure><p>返回值一般为：<br>net.core.default_qdisc = fq</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。</p><h3 id="CentOS-下最新版内核-headers-安装方法"><a href="#CentOS-下最新版内核-headers-安装方法" class="headerlink" title="CentOS 下最新版内核 headers 安装方法"></a>CentOS 下最新版内核 headers 安装方法</h3><p>本来打算在脚本里直接安装 kernel-ml-headers，但会出现和原版内核 headers 冲突的问题。因此在这里添加一个脚本执行完后，手动安装最新版内核 headers 之教程。<br>执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>根据 CentOS 版本的不同，此时一般会出现类似于以下的错误提示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: kernel-ml-headers conflicts with kernel-headers-2.6.32-696.20.1.el6.x86_64</span><br><span class="line">Error: kernel-ml-headers conflicts with kernel-headers-3.10.0-693.17.1.el7.x86_64</span><br></pre></td></tr></table></figure><p>因此需要先卸载原版内核 headers ，然后再安装最新版内核 headers。执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove kernel-headers</span><br></pre></td></tr></table></figure><p>确认无误后，输入 y，回车开始卸载。注意，有时候这么操作还会卸载一些对内核 headers 依赖的安装包，比如 gcc、gcc-c++ 之类的。不过不要紧，我们可以在安装完最新版内核 headers 后再重新安装回来即可。<br>卸载完成后，再次执行上面给出的安装命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>成功安装后，再把那些之前对内核 headers 依赖的安装包，比如 gcc、gcc-c++ 之类的再安装一次即可。</p><p>为什么要安装最新版内核 headers 呢？<br>这是因为 shadowsocks-libev 版有个 tcp fast open 功能，如果不安装的话，这个功能是无法开启的。</p><h3 id="内核升级方法"><a href="#内核升级方法" class="headerlink" title="内核升级方法"></a>内核升级方法</h3><p>如果是 CentOS 系统，执行如下命令即可升级内核：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml kernel-ml-devel</span><br></pre></td></tr></table></figure><p>如果你还手动安装了新版内核 headers ，那么还需要以下命令来升级 headers ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel -y install kernel-ml-headers</span><br></pre></td></tr></table></figure><p>CentOS 6 的话，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/^default=.*/default=0/g'</span> /boot/grub/grub.conf</span><br></pre></td></tr></table></figure><p>CentOS 7 的话，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure><p>如果是 Debian/Ubuntu 系统，则需要手动下载最新版内核来安装升级。<br>去<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">这里</a>下载最新版的内核 deb 安装包。<br>如果系统是 64 位，则下载 amd64 的 linux-image 中含有 generic 这个 deb 包；<br>如果系统是 32 位，则下载 i386 的 linux-image 中含有 generic 这个 deb 包；<br>安装的命令如下（以最新版的 64 位 4.12.4 举例而已，请替换为下载好的 deb 包）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb</span><br></pre></td></tr></table></figure><p>安装完成后，再执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/update-grub</span><br></pre></td></tr></table></figure><p>最后，重启 VPS 即可。</p><h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>如果你使用的是 Google Cloud Platform （GCP）更换内核，有时会遇到重启后，整个磁盘变为只读的情况。只需执行以下命令即可恢复：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount rw /</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://teddysun.com/489.html" target="_blank" rel="noopener">一键安装最新内核并开启 BBR 脚本</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Google 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。&lt;br&gt;根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。&lt;br&gt;于是我根据目前三大发行版的最新内核，开发了一键安装最新内核并开启 TCP BBR 脚本。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="bbr" scheme="http://blog.imgavin.me/tags/bbr/"/>
    
      <category term="tcp 加速优化" scheme="http://blog.imgavin.me/tags/tcp-%E5%8A%A0%E9%80%9F%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>shadowsocks 一键安装脚本</title>
    <link href="http://blog.imgavin.me/2018/04/28/ss-install-script/"/>
    <id>http://blog.imgavin.me/2018/04/28/ss-install-script/</id>
    <published>2018-04-28T02:36:02.000Z</published>
    <updated>2018-12-28T09:04:13.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="脚本适用环境"><a href="#脚本适用环境" class="headerlink" title="脚本适用环境"></a>脚本适用环境</h1><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>内存要求：≥128M<br>日期　　：2018 年 02 月 07 日</p><h2 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h2><ul><li><p>一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端</p></li><li><p>各版本的启动脚本及配置文件名不再重合</p></li><li><p>每次运行可安装一种版本</p></li><li><p>支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）</p></li><li><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p></li><li><p>Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）</p><p> <strong>安装遇到问题,请先参考 <a href="https://github.com/shadowsocks/shadowsocks/wiki/Troubleshooting" target="_blank" rel="noopener">Troubleshooting</a> 尝试解决</strong></p></li></ul><a id="more"></a><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><ul><li>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）</li><li>密码：自己设定（如不设定，默认为 teddysun.com）</li><li>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）</li><li>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）</li><li>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）</li></ul><p><strong>脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</strong></p><h2 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h2><p>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用root用户登录，运行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><h2 id="安装完成后，脚本提示如下"><a href="#安装完成后，脚本提示如下" class="headerlink" title="安装完成后，脚本提示如下"></a>安装完成后，脚本提示如下</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption Method:your_encryption_method</span><br><span class="line"></span><br><span class="line">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</span><br><span class="line"> ss://your_encryption_method:your_password@your_server_ip:your_server_port</span><br><span class="line">Your QR Code has been saved as a PNG file path:</span><br><span class="line"> your_path.png</span><br><span class="line"></span><br><span class="line">Welcome to visit:https://teddysun.com/486.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><h2 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h2><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p><p>使用root用户登录，运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p><p>Shadowsocks-Python 版：<br>/etc/init.d/shadowsocks-python start | stop | restart | status</p><p>ShadowsocksR 版：<br>/etc/init.d/shadowsocks-r start | stop | restart | status</p><p>Shadowsocks-Go 版：<br>/etc/init.d/shadowsocks-go start | stop | restart | status</p><p>Shadowsocks-libev 版：<br>/etc/init.d/shadowsocks-libev start | stop | restart | status</p><h2 id="各版本默认配置文件"><a href="#各版本默认配置文件" class="headerlink" title="各版本默认配置文件"></a>各版本默认配置文件</h2><p>Shadowsocks-Python 版：<br>/etc/shadowsocks-python/config.json</p><p>ShadowsocksR 版：<br>/etc/shadowsocks-r/config.json</p><p>Shadowsocks-Go 版：<br>/etc/shadowsocks-go/config.json</p><p>Shadowsocks-libev 版：<br>/etc/shadowsocks-libev/config.json</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://teddysun.com/486.html" target="_blank" rel="noopener">Shadowsocks 一键安装脚本（四合一）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;脚本适用环境&quot;&gt;&lt;a href=&quot;#脚本适用环境&quot; class=&quot;headerlink&quot; title=&quot;脚本适用环境&quot;&gt;&lt;/a&gt;脚本适用环境&lt;/h1&gt;&lt;p&gt;系统支持：CentOS 6+，Debian 7+，Ubuntu 12+&lt;br&gt;内存要求：≥128M&lt;br&gt;日期　　：2018 年 02 月 07 日&lt;/p&gt;
&lt;h2 id=&quot;关于本脚本&quot;&gt;&lt;a href=&quot;#关于本脚本&quot; class=&quot;headerlink&quot; title=&quot;关于本脚本&quot;&gt;&lt;/a&gt;关于本脚本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;各版本的启动脚本及配置文件名不再重合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每次运行可安装一种版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若已安装多个版本，则卸载时也需多次运行（每次卸载一种）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shadowsocks-Python 和 ShadowsocksR 安装后不可同时启动（因为本质上都属 Python 版）&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;安装遇到问题,请先参考 &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks/wiki/Troubleshooting&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Troubleshooting&lt;/a&gt; 尝试解决&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ss" scheme="http://blog.imgavin.me/tags/ss/"/>
    
      <category term="shadowsocks" scheme="http://blog.imgavin.me/tags/shadowsocks/"/>
    
      <category term="科学上网" scheme="http://blog.imgavin.me/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - systemctl</title>
    <link href="http://blog.imgavin.me/2018/04/19/linux-cmd-systemctl/"/>
    <id>http://blog.imgavin.me/2018/04/19/linux-cmd-systemctl/</id>
    <published>2018-04-19T07:00:03.000Z</published>
    <updated>2018-04-23T08:55:57.149Z</updated>
    
    <content type="html"><![CDATA[<p>Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。</p><p>Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V初始进程。Systemd的功能是用于集中管理和配置类UNIX系统。</p><p>在Linux生态系统中，Systemd被部署到了大多数的标准Linux发行版中，只有为数不多的几个发行版尚未部署。Systemd通常是所有其它守护进程的父进程，但并非总是如此。</p><a id="more"></a><h1 id="Systemd初体验和Systemctl基础"><a href="#Systemd初体验和Systemctl基础" class="headerlink" title="Systemd初体验和Systemctl基础"></a>Systemd初体验和Systemctl基础</h1><h2 id="首先检查你的系统中是否安装有systemd并确定当前安装的版本"><a href="#首先检查你的系统中是否安装有systemd并确定当前安装的版本" class="headerlink" title="首先检查你的系统中是否安装有systemd并确定当前安装的版本"></a>首先检查你的系统中是否安装有systemd并确定当前安装的版本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl --version</span></span><br><span class="line">systemd 219</span><br><span class="line">+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN</span><br></pre></td></tr></table></figure><p>上例中很清楚地表明，我们安装了215版本的systemd。</p><h2 id="检查systemd和systemctl的二进制文件和库文件的安装位置"><a href="#检查systemd和systemctl的二进制文件和库文件的安装位置" class="headerlink" title="检查systemd和systemctl的二进制文件和库文件的安装位置"></a>检查systemd和systemctl的二进制文件和库文件的安装位置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  whereis systemd</span></span><br><span class="line">systemd: /usr/lib/systemd /etc/systemd /usr/share/systemd /usr/share/man/man1/systemd.1.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#  whereis systemctl</span></span><br><span class="line">systemctl: /usr/bin/systemctl /usr/share/man/man1/systemctl.1.gz</span><br></pre></td></tr></table></figure><h2 id="检查systemd是否运行"><a href="#检查systemd是否运行" class="headerlink" title="检查systemd是否运行"></a>检查systemd是否运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  ps -eaf | grep systemd</span></span><br><span class="line">root         1     0  0 3月18 ?       00:03:11 /usr/lib/systemd/systemd --switched-root --system --deserialize 21</span><br><span class="line">root       323     1  0 3月18 ?       00:01:45 /usr/lib/systemd/systemd-journald</span><br><span class="line">root       348     1  0 3月18 ?       00:00:00 /usr/lib/systemd/systemd-udevd</span><br><span class="line">dbus       459     1  0 3月18 ?       00:02:49 /bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation</span><br><span class="line">root       468     1  0 3月18 ?       00:01:23 /usr/lib/systemd/systemd-logind</span><br></pre></td></tr></table></figure><h2 id="分析systemd启动进程"><a href="#分析systemd启动进程" class="headerlink" title="分析systemd启动进程"></a>分析systemd启动进程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze</span></span><br><span class="line">Startup finished <span class="keyword">in</span> 690ms (kernel) + 1.288s (initrd) + 8.138s (userspace) = 10.117s</span><br></pre></td></tr></table></figure><h2 id="分析启动时各个进程花费的时间"><a href="#分析启动时各个进程花费的时间" class="headerlink" title="分析启动时各个进程花费的时间"></a>分析启动时各个进程花费的时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze blame</span></span><br><span class="line">          5.130s network.service</span><br><span class="line">          3.022s rabbitmq-server.service</span><br><span class="line">          2.120s postfix.service</span><br><span class="line">           320ms systemd-journal-flush.service</span><br><span class="line">           296ms tuned.service</span><br><span class="line">           293ms lvm2-monitor.service</span><br><span class="line">           226ms nginx.service</span><br><span class="line">           187ms dev-vda1.device</span><br><span class="line">           181ms rc-local.service</span><br><span class="line">          ...</span><br></pre></td></tr></table></figure><h2 id="分析启动时的关键链"><a href="#分析启动时的关键链" class="headerlink" title="分析启动时的关键链"></a>分析启动时的关键链</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze critical-chain</span></span><br><span class="line">The time after the unit is active or started is printed after the <span class="string">"@"</span> character.</span><br><span class="line">The time the unit takes to start is printed after the <span class="string">"+"</span> character.</span><br><span class="line"></span><br><span class="line">multi-user.target @8.129s</span><br><span class="line">└─tuned.service @6.008s +296ms</span><br><span class="line">  └─network.target @5.999s</span><br><span class="line">    └─network.service @869ms +5.130s</span><br><span class="line">      └─basic.target @811ms</span><br><span class="line">        └─sockets.target @811ms</span><br><span class="line">          └─rpcbind.socket @811ms</span><br><span class="line">            └─sysinit.target @808ms</span><br><span class="line">              └─systemd-update-utmp.service @797ms +9ms</span><br><span class="line">                └─auditd.service @642ms +154ms</span><br><span class="line">                  └─systemd-tmpfiles-setup.service @615ms +26ms</span><br><span class="line">                    └─rhel-import-state.service @531ms +83ms</span><br><span class="line">                      └─<span class="built_in">local</span>-fs.target @471ms</span><br><span class="line">                        └─<span class="built_in">local</span>-fs-pre.target @471ms</span><br><span class="line">                          └─lvm2-monitor.service @177ms +293ms</span><br><span class="line">                            └─lvm2-lvmetad.service @232ms</span><br><span class="line">                              └─lvm2-lvmetad.socket @163ms</span><br><span class="line">                                └─-.slice</span><br></pre></td></tr></table></figure><p><strong>重要</strong>：Systemctl接受服务（.service），挂载点（.mount），套接口（.socket）和设备（.device）作为单元。</p><h2 id="列出所有可用单元"><a href="#列出所有可用单元" class="headerlink" title="列出所有可用单元"></a>列出所有可用单元</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files</span></span><br><span class="line">UNIT FILE                                     STATE</span><br><span class="line">proc-sys-fs-binfmt_misc.automount             static</span><br><span class="line">dev-hugepages.mount                           static</span><br><span class="line">dev-mqueue.mount                              static</span><br><span class="line">proc-sys-fs-binfmt_misc.mount                 static</span><br><span class="line">sys-fs-fuse-connections.mount                 static</span><br><span class="line">sys-kernel-config.mount                       static</span><br><span class="line">sys-kernel-debug.mount                        static</span><br><span class="line">tmp.mount                                     disabled</span><br><span class="line">brandbot.path                                 disabled</span><br></pre></td></tr></table></figure><h2 id="列出所有运行中单元"><a href="#列出所有运行中单元" class="headerlink" title="列出所有运行中单元"></a>列出所有运行中单元</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-units</span></span><br><span class="line">  UNIT                                                              LOAD   ACTIVE SUB       DESCRIPTION</span><br><span class="line">  proc-sys-fs-binfmt_misc.automount                                 loaded active waiting   Arbitrary Executable File Formats File System Automount Point</span><br><span class="line">  sys-devices-pci0000:00-0000:00:03.0-virtio0-net-eth0.device       loaded active plugged   Virtio network device</span><br><span class="line">  sys-devices-pci0000:00-0000:00:04.0-virtio1-block-vda-vda1.device loaded active plugged   /sys/devices/pci0000:00/0000:00:04.0/virtio1/block/vda/vda1</span><br><span class="line">  sys-devices-pci0000:00-0000:00:04.0-virtio1-block-vda.device      loaded active plugged   /sys/devices/pci0000:00/0000:00:04.0/virtio1/block/vda</span><br><span class="line">  sys-devices-platform-serial8250-tty-ttyS1.device                  loaded active plugged   /sys/devices/platform/serial8250/tty/ttyS1</span><br></pre></td></tr></table></figure><h2 id="列出所有失败单元"><a href="#列出所有失败单元" class="headerlink" title="列出所有失败单元"></a>列出所有失败单元</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl --failed</span></span><br><span class="line">  UNIT              LOAD   ACTIVE SUB    DESCRIPTION</span><br><span class="line">● kdump.service     loaded failed failed Crash recovery kernel arming</span><br><span class="line">● postfix.service   loaded failed failed Postfix Mail Transport Agent</span><br><span class="line">● YDService.service loaded failed failed LSB: tomcat service</span><br><span class="line"></span><br><span class="line">LOAD   = Reflects whether the unit definition was properly loaded.</span><br><span class="line">ACTIVE = The high-level unit activation state, i.e. generalization of SUB.</span><br><span class="line">SUB    = The low-level unit activation state, values depend on unit <span class="built_in">type</span>.</span><br><span class="line"></span><br><span class="line">3 loaded units listed. Pass --all to see loaded but inactive units, too.</span><br><span class="line">To show all installed unit files use <span class="string">'systemctl list-unit-files'</span>.</span><br></pre></td></tr></table></figure><h2 id="检查某个单元（如-cron-service）是否启用"><a href="#检查某个单元（如-cron-service）是否启用" class="headerlink" title="检查某个单元（如 cron.service）是否启用"></a>检查某个单元（如 cron.service）是否启用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl is-enabled crond.service</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><h2 id="检查某个单元或服务是否运行"><a href="#检查某个单元或服务是否运行" class="headerlink" title="检查某个单元或服务是否运行"></a>检查某个单元或服务是否运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl status firewalld.service</span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></table></figure><h1 id="使用Systemctl控制并管理服务"><a href="#使用Systemctl控制并管理服务" class="headerlink" title="使用Systemctl控制并管理服务"></a>使用Systemctl控制并管理服务</h1><h2 id="列出所有服务（包括启用的和禁用的）"><a href="#列出所有服务（包括启用的和禁用的）" class="headerlink" title="列出所有服务（包括启用的和禁用的）"></a>列出所有服务（包括启用的和禁用的）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files --type=service</span></span><br><span class="line">UNIT FILE                                     STATE</span><br><span class="line">acpid.service                                 enabled</span><br><span class="line">arp-ethers.service                            disabled</span><br><span class="line">atd.service                                   enabled</span><br><span class="line">auditd.service                                enabled</span><br><span class="line">autovt@.service                               enabled</span><br><span class="line">blk-availability.service                      disabled</span><br><span class="line">brandbot.service                              static</span><br><span class="line">chrony-dnssrv@.service                        static</span><br><span class="line">chrony-wait.service                           disabled</span><br></pre></td></tr></table></figure><h2 id="Linux中如何启动、重启、停止、重载服务以及检查服务（如-httpd-service）状态"><a href="#Linux中如何启动、重启、停止、重载服务以及检查服务（如-httpd-service）状态" class="headerlink" title="Linux中如何启动、重启、停止、重载服务以及检查服务（如 httpd.service）状态"></a>Linux中如何启动、重启、停止、重载服务以及检查服务（如 httpd.service）状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start httpd.service</span></span><br><span class="line"><span class="comment"># systemctl restart httpd.service</span></span><br><span class="line"><span class="comment"># systemctl stop httpd.service</span></span><br><span class="line"><span class="comment"># systemctl reload httpd.service</span></span><br><span class="line"><span class="comment"># systemctl status httpd.service</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：当我们使用systemctl的start，restart，stop和reload命令时，我们不会从终端获取到任何输出内容，只有status命令可以打印输出。</p><h2 id="如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）"><a href="#如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）" class="headerlink" title="如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）"></a>如何激活服务并在启动时启用或禁用服务（即系统启动时自动启动服务）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl is-active httpd.service</span></span><br><span class="line"><span class="comment"># systemctl enable httpd.service</span></span><br><span class="line"><span class="comment"># systemctl disable httpd.service</span></span><br></pre></td></tr></table></figure><h2 id="如何屏蔽（让它不能启动）或显示服务（如-httpd-service）"><a href="#如何屏蔽（让它不能启动）或显示服务（如-httpd-service）" class="headerlink" title="如何屏蔽（让它不能启动）或显示服务（如 httpd.service）"></a>如何屏蔽（让它不能启动）或显示服务（如 httpd.service）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl mask httpd.service</span></span><br><span class="line">ln -s <span class="string">'/dev/null'</span> <span class="string">'/etc/systemd/system/httpd.service'</span></span><br><span class="line"><span class="comment"># systemctl unmask httpd.service</span></span><br><span class="line">rm <span class="string">'/etc/systemd/system/httpd.service'</span></span><br></pre></td></tr></table></figure><h2 id="使用systemctl命令杀死服务"><a href="#使用systemctl命令杀死服务" class="headerlink" title="使用systemctl命令杀死服务"></a>使用systemctl命令杀死服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl kill httpd</span></span><br><span class="line"><span class="comment"># systemctl status httpd</span></span><br></pre></td></tr></table></figure><h1 id="使用Systemctl控制并管理挂载点"><a href="#使用Systemctl控制并管理挂载点" class="headerlink" title="使用Systemctl控制并管理挂载点"></a>使用Systemctl控制并管理挂载点</h1><h2 id="列出所有系统挂载点"><a href="#列出所有系统挂载点" class="headerlink" title="列出所有系统挂载点"></a>列出所有系统挂载点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files --type=mount</span></span><br><span class="line">UNIT FILE                     STATE</span><br><span class="line">dev-hugepages.mount           static</span><br><span class="line">dev-mqueue.mount              static</span><br><span class="line">proc-sys-fs-binfmt_misc.mount static</span><br><span class="line">sys-fs-fuse-connections.mount static</span><br><span class="line">sys-kernel-config.mount       static</span><br><span class="line">sys-kernel-debug.mount        static</span><br><span class="line">tmp.mount                     disabled</span><br></pre></td></tr></table></figure><h2 id="挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态"><a href="#挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态" class="headerlink" title="挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态"></a>挂载、卸载、重新挂载、重载系统挂载点并检查系统中挂载点状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl stop tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl restart tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl reload tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl status tmp.mount</span></span><br></pre></td></tr></table></figure><h2 id="在启动时激活、启用或禁用挂载点（系统启动时自动挂载）"><a href="#在启动时激活、启用或禁用挂载点（系统启动时自动挂载）" class="headerlink" title="在启动时激活、启用或禁用挂载点（系统启动时自动挂载）"></a>在启动时激活、启用或禁用挂载点（系统启动时自动挂载）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl is-active tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl enable tmp.mount</span></span><br><span class="line"><span class="comment"># systemctl disable  tmp.mount</span></span><br></pre></td></tr></table></figure><h2 id="在Linux中屏蔽（让它不能启用）或可见挂载点"><a href="#在Linux中屏蔽（让它不能启用）或可见挂载点" class="headerlink" title="在Linux中屏蔽（让它不能启用）或可见挂载点"></a>在Linux中屏蔽（让它不能启用）或可见挂载点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl mask tmp.mount</span></span><br><span class="line">ln -s <span class="string">'/dev/null'</span> <span class="string">'/etc/systemd/system/tmp.mount'</span></span><br><span class="line"><span class="comment"># systemctl unmask tmp.mount</span></span><br><span class="line">rm <span class="string">'/etc/systemd/system/tmp.mount'</span></span><br></pre></td></tr></table></figure><h1 id="使用Systemctl控制并管理套接口"><a href="#使用Systemctl控制并管理套接口" class="headerlink" title="使用Systemctl控制并管理套接口"></a>使用Systemctl控制并管理套接口</h1><h2 id="列出所有可用系统套接口"><a href="#列出所有可用系统套接口" class="headerlink" title="列出所有可用系统套接口"></a>列出所有可用系统套接口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-unit-files --type=socket</span></span><br><span class="line">UNIT FILE                    STATE</span><br><span class="line">dbus.socket                  static</span><br><span class="line">dm-event.socket              enabled</span><br><span class="line">epmd.socket                  disabled</span><br><span class="line">epmd@.socket                 disabled</span><br><span class="line">lvm2-lvmetad.socket          enabled</span><br><span class="line">lvm2-lvmpolld.socket         enabled</span><br><span class="line">rpcbind.socket               enabled</span><br><span class="line">rsyncd.socket                disabled</span><br><span class="line">sshd.socket                  disabled</span><br><span class="line">syslog.socket                static</span><br><span class="line">systemd-initctl.socket       static</span><br><span class="line">systemd-journald.socket      static</span><br><span class="line">systemd-shutdownd.socket     static</span><br><span class="line">systemd-udevd-control.socket static</span><br><span class="line">systemd-udevd-kernel.socket  static</span><br></pre></td></tr></table></figure><h2 id="在Linux中启动、重启、停止、重载套接口并检查其状态"><a href="#在Linux中启动、重启、停止、重载套接口并检查其状态" class="headerlink" title="在Linux中启动、重启、停止、重载套接口并检查其状态"></a>在Linux中启动、重启、停止、重载套接口并检查其状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start cups.socket</span></span><br><span class="line"><span class="comment"># systemctl restart cups.socket</span></span><br><span class="line"><span class="comment"># systemctl stop cups.socket</span></span><br><span class="line"><span class="comment"># systemctl reload cups.socket</span></span><br><span class="line"><span class="comment"># systemctl status cups.socket</span></span><br></pre></td></tr></table></figure><h2 id="在启动时激活套接口，并启用或禁用它（系统启动时自启动）"><a href="#在启动时激活套接口，并启用或禁用它（系统启动时自启动）" class="headerlink" title="在启动时激活套接口，并启用或禁用它（系统启动时自启动）"></a>在启动时激活套接口，并启用或禁用它（系统启动时自启动）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl is-active cups.socket</span></span><br><span class="line"><span class="comment"># systemctl enable cups.socket</span></span><br><span class="line"><span class="comment"># systemctl disable cups.socket</span></span><br></pre></td></tr></table></figure><h2 id="屏蔽（使它不能启动）或显示套接口"><a href="#屏蔽（使它不能启动）或显示套接口" class="headerlink" title="屏蔽（使它不能启动）或显示套接口"></a>屏蔽（使它不能启动）或显示套接口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl mask cups.socket</span></span><br><span class="line">ln -s <span class="string">'/dev/null'</span> <span class="string">'/etc/systemd/system/cups.socket'</span></span><br><span class="line"><span class="comment"># systemctl unmask cups.socket</span></span><br><span class="line">rm <span class="string">'/etc/systemd/system/cups.socket'</span></span><br></pre></td></tr></table></figure><h1 id="服务的CPU利用率（分配额）"><a href="#服务的CPU利用率（分配额）" class="headerlink" title="服务的CPU利用率（分配额）"></a>服务的CPU利用率（分配额）</h1><h2 id="获取当前某个服务的CPU分配额（如httpd）"><a href="#获取当前某个服务的CPU分配额（如httpd）" class="headerlink" title="获取当前某个服务的CPU分配额（如httpd）"></a>获取当前某个服务的CPU分配额（如httpd）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl show -p CPUShares httpd.service</span></span><br><span class="line">CPUShares=1024</span><br></pre></td></tr></table></figure><h2 id="将某个服务（httpd-service）的CPU分配份额限制为2000-CPUShares"><a href="#将某个服务（httpd-service）的CPU分配份额限制为2000-CPUShares" class="headerlink" title="将某个服务（httpd.service）的CPU分配份额限制为2000 CPUShares/"></a>将某个服务（httpd.service）的CPU分配份额限制为2000 CPUShares/</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl set-property httpd.service CPUShares=2000</span></span><br><span class="line"><span class="comment"># systemctl show -p CPUShares httpd.service</span></span><br><span class="line">CPUShares=2000</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：当你为某个服务设置CPUShares，会自动创建一个以服务名命名的目录（如 httpd.service），里面包含了一个名为90-CPUShares.conf的文件，该文件含有CPUShare限制信息，你可以通过以下方式查看该文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/systemd/system/httpd.service.d/90-CPUShares.conf </span><br><span class="line">[Service]</span><br><span class="line">CPUShares=2000</span><br></pre></td></tr></table></figure><h2 id="检查某个服务的所有配置细节"><a href="#检查某个服务的所有配置细节" class="headerlink" title="检查某个服务的所有配置细节"></a>检查某个服务的所有配置细节</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl show nginx</span></span><br><span class="line">Type=forking</span><br><span class="line">Restart=no</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line">NotifyAccess=none</span><br><span class="line">RestartUSec=100ms</span><br><span class="line">TimeoutStartUSec=1min 30s</span><br><span class="line">TimeoutStopUSec=5s</span><br><span class="line">WatchdogUSec=0</span><br><span class="line">WatchdogTimestampMonotonic=0</span><br><span class="line">StartLimitInterval=10000000</span><br></pre></td></tr></table></figure><h2 id="分析某个服务（nginx）的关键链"><a href="#分析某个服务（nginx）的关键链" class="headerlink" title="分析某个服务（nginx）的关键链"></a>分析某个服务（nginx）的关键链</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-analyze critical-chain nginx.service</span></span><br><span class="line">The time after the unit is active or started is printed after the <span class="string">"@"</span> character.</span><br><span class="line">The time the unit takes to start is printed after the <span class="string">"+"</span> character.</span><br><span class="line"></span><br><span class="line">nginx.service +226ms</span><br><span class="line">└─network.target @5.999s</span><br><span class="line">  └─network.service @869ms +5.130s</span><br><span class="line">    └─basic.target @811ms</span><br><span class="line">      └─sockets.target @811ms</span><br><span class="line">        └─rpcbind.socket @811ms</span><br><span class="line">          └─sysinit.target @808ms</span><br><span class="line">            └─systemd-update-utmp.service @797ms +9ms</span><br><span class="line">              └─auditd.service @642ms +154ms</span><br><span class="line">                └─systemd-tmpfiles-setup.service @615ms +26ms</span><br><span class="line">                  └─rhel-import-state.service @531ms +83ms</span><br><span class="line">                    └─<span class="built_in">local</span>-fs.target @471ms</span><br><span class="line">                      └─<span class="built_in">local</span>-fs-pre.target @471ms</span><br><span class="line">                        └─lvm2-monitor.service @177ms +293ms</span><br><span class="line">                          └─lvm2-lvmetad.service @232ms</span><br><span class="line">                            └─lvm2-lvmetad.socket @163ms</span><br><span class="line">                              └─-.slice</span><br></pre></td></tr></table></figure><h2 id="获取某个服务（nginx）的依赖性列表"><a href="#获取某个服务（nginx）的依赖性列表" class="headerlink" title="获取某个服务（nginx）的依赖性列表"></a>获取某个服务（nginx）的依赖性列表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl list-dependencies nginx.service</span></span><br><span class="line">nginx.service</span><br><span class="line">● ├─-.mount</span><br><span class="line">● ├─system.slice</span><br><span class="line">● └─basic.target</span><br><span class="line">●   ├─rhel-autorelabel-mark.service</span><br><span class="line">●   ├─rhel-autorelabel.service</span><br><span class="line">●   ├─rhel-configure.service</span><br><span class="line">●   ├─rhel-dmesg.service</span><br><span class="line">●   ├─rhel-loadmodules.service</span><br><span class="line">●   ├─selinux-policy-migrate-local-changes@targeted.service</span><br><span class="line">●   ├─paths.target</span><br><span class="line">●   ├─slices.target</span><br><span class="line">●   │ ├─-.slice</span><br><span class="line">●   │ └─system.slice</span><br><span class="line">●   ├─sockets.target</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="按等级列出控制组"><a href="#按等级列出控制组" class="headerlink" title="按等级列出控制组"></a>按等级列出控制组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-cgls</span></span><br><span class="line">├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 21</span><br><span class="line">├─user.slice</span><br><span class="line">│ └─user-0.slice</span><br><span class="line">│   ├─session-48911.scope</span><br><span class="line">│   │ ├─17567 sshd: root@pts/0</span><br><span class="line">│   │ ├─17570 -zsh</span><br><span class="line">│   │ ├─17604 sh -c <span class="function"><span class="title">main</span></span>() &#123;   <span class="comment"># Use colors, but only if connected to a terminal, and that terminal   # supports them.   if which tput &gt;/dev/null 2&gt;&amp;1; then       ncolors=$(tput colors)   fi   if [ -t 1 ] &amp;&amp; [ -n "$ncolors" ] &amp;&amp; [ "$ncolors" -ge 8 ]; then     RED="$(tput</span></span><br><span class="line">│   │ ├─17643 zsh</span><br><span class="line">│   │ ├─27128 systemd-cgls</span><br><span class="line">│   │ └─27129 systemd-cgls</span><br><span class="line">│   └─session-1.scope</span><br><span class="line">│     ├─25471 barad_agent</span><br><span class="line">│     ├─25477 barad_agent</span><br><span class="line">│     ├─25478 barad_agent</span><br><span class="line">│     └─25839 /usr/<span class="built_in">local</span>/qcloud/stargate/sgagent -d</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="按CPU、内存、输入和输出列出控制组"><a href="#按CPU、内存、输入和输出列出控制组" class="headerlink" title="按CPU、内存、输入和输出列出控制组"></a>按CPU、内存、输入和输出列出控制组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemd-cgtop</span></span><br><span class="line">Path                                                                                                                                                                                                                                     Tasks   %CPU   Memory  Input/s Output/s</span><br><span class="line"></span><br><span class="line">/                                                                                                                                                                                                                                           78      -   827.5M        -        -</span><br><span class="line">/system.slice/acpid.service                                                                                                                                                                                                                  1      -        -        -        -</span><br><span class="line">/system.slice/atd.service                                                                                                                                                                                                                    1      -        -        -        -</span><br><span class="line">/system.slice/auditd.service                                                                                                                                                                                                                 1      -        -        -        -</span><br><span class="line">/system.slice/crond.service                                                                                                                                                                                                                  1      -        -        -        -</span><br><span class="line">/system.slice/dbus.service                                                                                                                                                                                                                   1      -        -        -        -</span><br><span class="line">/system.slice/libstoragemgmt.service                                                                                                                                                                                                         1      -        -        -        -</span><br><span class="line">/system.slice/lvm2-lvmetad.service</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="控制系统运行等级"><a href="#控制系统运行等级" class="headerlink" title="控制系统运行等级"></a>控制系统运行等级</h1><h2 id="启动系统救援模式"><a href="#启动系统救援模式" class="headerlink" title="启动系统救援模式"></a>启动系统救援模式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl rescue</span></span><br><span class="line">PolicyKit daemon disconnected from the bus.</span><br><span class="line">We are no longer a registered authentication agent.</span><br><span class="line"></span><br><span class="line">Broadcast message from root@server_base on pts/0 (四 2018-04-19 16:31:36 CST):</span><br><span class="line"></span><br><span class="line">The system is going down to rescue mode NOW!</span><br></pre></td></tr></table></figure><h2 id="进入紧急模式"><a href="#进入紧急模式" class="headerlink" title="进入紧急模式"></a>进入紧急模式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl emergency</span></span><br><span class="line">Welcome to emergency mode! After logging <span class="keyword">in</span>, <span class="built_in">type</span> <span class="string">"journalctl -xb"</span> to view</span><br><span class="line">system logs, <span class="string">"systemctl reboot"</span> to reboot, <span class="string">"systemctl default"</span> to try again</span><br><span class="line">to boot into default mode.</span><br></pre></td></tr></table></figure><h2 id="列出当前使用的运行等级"><a href="#列出当前使用的运行等级" class="headerlink" title="列出当前使用的运行等级"></a>列出当前使用的运行等级</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  systemctl get-default</span></span><br><span class="line">multi-user.target</span><br></pre></td></tr></table></figure><h2 id="启动运行等级5，即图形模式"><a href="#启动运行等级5，即图形模式" class="headerlink" title="启动运行等级5，即图形模式"></a>启动运行等级5，即图形模式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl isolate runlevel5.target</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># systemctl isolate graphical.target</span></span><br></pre></td></tr></table></figure><h2 id="启动运行等级3，即多用户模式（命令行）"><a href="#启动运行等级3，即多用户模式（命令行）" class="headerlink" title="启动运行等级3，即多用户模式（命令行）"></a>启动运行等级3，即多用户模式（命令行）</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl isolate runlevel3.target</span></span><br><span class="line">或</span><br><span class="line"><span class="comment"># systemctl isolate multiuser.target</span></span><br></pre></td></tr></table></figure><h2 id="设置多用户模式或图形模式为默认运行等级"><a href="#设置多用户模式或图形模式为默认运行等级" class="headerlink" title="设置多用户模式或图形模式为默认运行等级"></a>设置多用户模式或图形模式为默认运行等级</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl set-default runlevel3.target</span></span><br><span class="line"><span class="comment"># systemctl set-default runlevel5.target</span></span><br></pre></td></tr></table></figure><h2 id="重启、停止、挂起、休眠系统或使系统进入混合睡眠"><a href="#重启、停止、挂起、休眠系统或使系统进入混合睡眠" class="headerlink" title="重启、停止、挂起、休眠系统或使系统进入混合睡眠"></a>重启、停止、挂起、休眠系统或使系统进入混合睡眠</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl reboot</span></span><br><span class="line"><span class="comment"># systemctl halt</span></span><br><span class="line"><span class="comment"># systemctl suspend</span></span><br><span class="line"><span class="comment"># systemctl hibernate</span></span><br><span class="line"><span class="comment"># systemctl hybrid-sleep</span></span><br></pre></td></tr></table></figure><p><strong>运行等级说明</strong></p><ul><li>Runlevel 0 : 关闭系统</li><li>Runlevel 1 : 救援？维护模式</li><li>Runlevel 3 : 多用户，无图形系统</li><li>Runlevel 4 : 多用户，无图形系统</li><li>Runlevel 5 : 多用户，图形化系统</li><li>Runlevel 6 : 关闭并重启机器</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://linux.cn/article-5926-1.html" target="_blank" rel="noopener">systemctl 命令完全指南</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。&lt;/p&gt;
&lt;p&gt;Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V初始进程。Systemd的功能是用于集中管理和配置类UNIX系统。&lt;/p&gt;
&lt;p&gt;在Linux生态系统中，Systemd被部署到了大多数的标准Linux发行版中，只有为数不多的几个发行版尚未部署。Systemd通常是所有其它守护进程的父进程，但并非总是如此。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
      <category term="systemctl" scheme="http://blog.imgavin.me/tags/systemctl/"/>
    
  </entry>
  
  <entry>
    <title>缓存雪崩与缓存穿透</title>
    <link href="http://blog.imgavin.me/2018/02/25/cache-collapse-cross/"/>
    <id>http://blog.imgavin.me/2018/02/25/cache-collapse-cross/</id>
    <published>2018-02-25T09:14:27.000Z</published>
    <updated>2018-02-26T02:00:23.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p><p><strong>解决方案</strong></p><p>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。</p><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><p><strong>解决方案</strong></p><p>我们把查询为空的数据也进行缓存，过期时间设置要短很多，比如5分钟。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="http://www.cnblogs.com/zhangweizhong/p/6258797.html" target="_blank" rel="noopener">Redis总结（五）缓存雪崩和缓存穿透等问题</a></p></li><li><p><a href="http://ifeve.com/concurrency-cache-cross/" target="_blank" rel="noopener">缓存穿透、缓存并发、缓存失效之思路变迁</a></p></li><li><p><a href="https://zhangxh20.github.io/2017/09/04/redis/cacheCollapse/" target="_blank" rel="noopener">缓存雪崩问题</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存雪崩&quot;&gt;&lt;a href=&quot;#缓存雪崩&quot; class=&quot;headerlink&quot; title=&quot;缓存雪崩&quot;&gt;&lt;/a&gt;缓存雪崩&lt;/h1&gt;&lt;p&gt;缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。&lt;/
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="缓存" scheme="http://blog.imgavin.me/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="redis" scheme="http://blog.imgavin.me/tags/redis/"/>
    
      <category term="并发" scheme="http://blog.imgavin.me/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置</title>
    <link href="http://blog.imgavin.me/2018/01/21/nginx-product-config/"/>
    <id>http://blog.imgavin.me/2018/01/21/nginx-product-config/</id>
    <published>2018-01-21T04:15:18.000Z</published>
    <updated>2018-03-23T04:03:35.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询是否开启80端口则</span></span><br><span class="line">firewall-cmd --query-port=80/tcp --permanent</span><br><span class="line"><span class="comment"># 开启80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SELinux 设置</span></span><br><span class="line"><span class="comment"># 查看 SELinux 模式</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="comment"># 查看 SELinux 状态与模式等</span></span><br><span class="line">sestatus</span><br><span class="line"><span class="comment"># 关闭 SELinux</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># 查看 nginx 是否受限制</span></span><br><span class="line">ps -eZ | grep nginx</span><br><span class="line"><span class="comment"># 查看文件受限</span></span><br><span class="line">ll -Zd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://blog.imgavin.me/tags/nginx/"/>
    
      <category term="配置" scheme="http://blog.imgavin.me/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>2017 总结</title>
    <link href="http://blog.imgavin.me/2017/12/31/2017-annual-summary/"/>
    <id>http://blog.imgavin.me/2017/12/31/2017-annual-summary/</id>
    <published>2017-12-31T13:38:05.000Z</published>
    <updated>2018-12-27T06:46:29.872Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2017年12月31日，2017年的最后一天。各种跨年演讲，晚会都在直播着，看着他们的总结，想着自己这一年虽然没有太多的波折，无惊无喜，但也是需要理清自己这一年干的事情，是吧。</p><a id="more"></a><hr><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><ul><li><p>众病之王：癌症传</p></li><li><p>人类简史</p><blockquote><p>读这前，这本书就已经大火了。读了之后也确实觉得书中的各种脑洞开的挺大，还挺有意思。</p></blockquote></li><li><p>最好的告别：关于衰老与死亡，你必须知道的常识</p><blockquote><p>我认为每个成年人都应该读</p></blockquote></li><li><p>未来世界的幸存者</p><blockquote><p>看过后，我陷入深深的焦虑中，事实上至今都未缓过来。</p></blockquote></li><li><p>黑客与画家</p></li><li><p>head first 设计模式</p></li><li><p>漂洋过海来看你</p></li><li><p>幸福了吗</p></li><li><p>长夜难明</p><blockquote><p>第一次看紫金陈的推理小说，没失望</p></blockquote></li><li><p>推理之王1：无证之罪</p></li><li><p>推理之王2：坏小孩</p></li><li><p>鬼吹灯 (精绝古城, 龙岭迷窟, 云南虫谷, 昆仑神宫)</p><blockquote><p>高中时这书就很火，多年过去现在才看，随时补回一些青春的遗憾。虽然还未看完。。。</p></blockquote></li><li><p>挪威的森林</p></li><li><p>许三观卖血记</p></li><li><p>活着</p></li><li><p>三重门</p><blockquote><p>补青春？</p></blockquote></li></ul><h1 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h1><p>没必要把看过的电影，玩过的游戏都列举出来，我就写几个值得看，感触较深的。</p><h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><ul><li><p>血战钢锯岭</p></li><li><p>忠犬八公的故事</p><blockquote><p>感人</p></blockquote></li><li><p>疯狂动物城</p></li><li><p>乘风破浪</p></li><li><p>战狼2</p><blockquote><p>确实是好电影，但网友们吹的过头了</p></blockquote></li></ul><h2 id="电视剧"><a href="#电视剧" class="headerlink" title="电视剧"></a>电视剧</h2><ul><li><p>人名的名义</p><blockquote><p>非常推荐</p></blockquote></li><li><p>欢乐颂 2</p></li><li><p>大军师司马懿之军师联盟</p><blockquote><p>推荐，这个时间正在更新它的第二部</p></blockquote></li><li><p>越狱 5</p><blockquote><p>主要越狱的前几部看的很过瘾，这新作极其期待，但其实一般</p></blockquote></li><li><p>鬼吹灯之精绝古城</p><blockquote><p>好看</p></blockquote></li><li><p>我的前半生</p></li><li><p>灵魂摆渡 1，2，3</p></li><li><p>黑镜 1，2，3</p><blockquote><p>有意思</p></blockquote></li><li><p>白夜追凶</p><blockquote><p>媲美美剧，最高评价</p></blockquote></li><li><p>无证之罪</p></li><li><p>生逢灿烂的日子</p></li><li><p>一起同过窗1，2</p></li></ul><blockquote><p>让我笑得像个傻子，赶紧出第三季</p></blockquote><h2 id="综艺"><a href="#综艺" class="headerlink" title="综艺"></a>综艺</h2><ul><li><p>极限挑战 3</p><blockquote><p>事实上今年我就看了这一个，我也认为其他综艺也完全不是极挑的对手</p></blockquote></li></ul><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><ul><li><p>饥荒</p></li><li><p>文明 6</p></li><li><p>失落城堡</p><blockquote><p>据说是几个大学生做的游戏，卖了20W份？很强。</p></blockquote></li><li><p>星露谷物语</p><blockquote><p>极其适合在 NS 上玩，推荐。找回初中玩 GBA 《牧场物语：矿石镇》的回忆。</p></blockquote></li><li><p>FIFA17</p></li><li><p>FIFA18</p></li><li><p>神秘海域4</p></li><li><p>喷射战士2</p></li><li><p>古墓丽影：崛起</p></li></ul><h1 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h1><img src="/2017/12/31/2017-annual-summary/p1.png" title="Github 2017 贡献图"><ul><li><a href="https://github.com/gavin66/zhihu_crawler" target="_blank" rel="noopener">zhihu_crawler</a> - 广度搜索爬取知乎用户信息</li><li><a href="https://github.com/gavin66/proxy_list" target="_blank" rel="noopener">proxy_list</a> - 爬取免费代理 （第一次上 Github 日 Trending，虽然是短暂的一天）</li><li><a href="https://github.com/gavin66/pg-es-fdw" target="_blank" rel="noopener">pg-es-fdw</a> - PostgreSQL数据自动同步至Elasticsearch</li></ul><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>我发现我入职的所有公司都没有加班的习惯，即使是在北京工作，也从未有过996的体验。工作本身也很轻松，闲暇时间挺多，自学了很多技术。即使这样，也还是在10月离职了。现在是在家做远程兼职工作，虽然工资大幅减少，但胜在自由轻松，考虑着再找一份远程全职工作。但这工作第一不好找，第二待遇也不会太好。如果过了年回北京再找工作，工资肯定会达到心里预期，但每天挤着地铁，住着租的房子，吃饭不方便，每周还要高铁跑来跑去，这样的生活我已经过怵了。所以现在就在自由和工资间纠结，怎么办？我需要好好想想。</p><h1 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h1><ol><li>多读书</li><li>学习 Golang</li><li>学习游戏制作，做一款自己的游戏</li><li>找个女朋友？（感情呢，还是和去年一样。相亲了两位，基本是看了照片就“劝退”了，我一点办法没有。。。我觉得我长的就一大众脸，也没太差吧）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2017年12月31日，2017年的最后一天。各种跨年演讲，晚会都在直播着，看着他们的总结，想着自己这一年虽然没有太多的波折，无惊无喜，但也是需要理清自己这一年干的事情，是吧。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.imgavin.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://blog.imgavin.me/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="计划" scheme="http://blog.imgavin.me/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令 - ss</title>
    <link href="http://blog.imgavin.me/2017/12/15/linux-cmd-ss/"/>
    <id>http://blog.imgavin.me/2017/12/15/linux-cmd-ss/</id>
    <published>2017-12-15T03:10:58.000Z</published>
    <updated>2018-04-19T07:15:11.365Z</updated>
    
    <content type="html"><![CDATA[<p>ss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p><p>当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。</p><p>天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）</p><a id="more"></a><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>-h, –help    帮助信息</p><p>-V, –version    程序版本信息</p><p>-n, –numeric    不解析服务名称</p><p>-r, –resolve        解析主机名</p><p>-a, –all    显示所有套接字（sockets）</p><p>-l, –listening    显示监听状态的套接字（sockets）</p><p>-o, –options        显示计时器信息</p><p>-e, –extended       显示详细的套接字（sockets）信息</p><p>-m, –memory         显示套接字（socket）的内存使用情况</p><p>-p, –processes    显示使用套接字（socket）的进程</p><p>-i, –info    显示 TCP内部信息</p><p>-s, –summary    显示套接字（socket）使用概况</p><p>-4, –ipv4           仅显示IPv4的套接字（sockets）</p><p>-6, –ipv6           仅显示IPv6的套接字（sockets）</p><p>-0, –packet            显示 PACKET 套接字（socket）</p><p>-t, –tcp    仅显示 TCP套接字（sockets）</p><p>-u, –udp    仅显示 UCP套接字（sockets）</p><p>-d, –dccp    仅显示 DCCP套接字（sockets）</p><p>-w, –raw    仅显示 RAW套接字（sockets）</p><p>-x, –unix    仅显示 Unix套接字（sockets）</p><p>-f, –family=FAMILY  显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink</p><p>-A, –query=QUERY, –socket=QUERY</p><p>​      QUERY := {all|inet|tcp|udp|raw|unix|packet|netlink}[,QUERY]</p><p>-D, –diag=FILE     将原始TCP套接字（sockets）信息转储到文件</p><p> -F, –filter=FILE   从文件中都去过滤器信息</p><p>​       FILTER := [ state TCP-STATE ] [ EXPRESSION ]</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ol><li><p>显示TCP连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -at</span></span><br><span class="line">State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port   </span><br><span class="line">LISTEN     0      0                                         127.0.0.1:smux                                               *:*       </span><br><span class="line">LISTEN     0      0                                                 *:3690                                               *:*       </span><br><span class="line">LISTEN     0      0                                                 *:ssh                                                *:*       </span><br><span class="line">ESTAB      0      0                                   192.168.120.204:ssh                                        10.2.0.68:49368</span><br></pre></td></tr></table></figure></li><li><p>显示 Sockets 摘要</p><p>列出当前的established, closed, orphaned and waiting TCP sockets</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -s</span></span><br><span class="line">Total: 34 (kernel 48)</span><br><span class="line">TCP:   4 (estab 1, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 3</span><br><span class="line"></span><br><span class="line">Transport Total     IP        IPv6</span><br><span class="line">*         48        -         -        </span><br><span class="line">RAW       0         0         0        </span><br><span class="line">UDP       5         5         0        </span><br><span class="line">TCP       4         4         0        </span><br><span class="line">INET      9         9         0        </span><br><span class="line">FRAG      0         0         0</span><br></pre></td></tr></table></figure></li><li><p>列出所有打开的网络连接端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -l</span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   </span><br><span class="line">0      0                                              127.0.0.1:smux                                                    *:*       </span><br><span class="line">0      0                                                      *:3690                                                    *:*       </span><br><span class="line">0      0                                                      *:ssh                                                     *:*</span><br></pre></td></tr></table></figure></li><li><p>查看进程使用的socket</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -pl</span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   </span><br><span class="line">0      0                                              127.0.0.1:smux                                                    *:*        users:((<span class="string">"snmpd"</span>,2716,8))</span><br><span class="line">0      0                                                      *:3690                                                    *:*        users:((<span class="string">"svnserve"</span>,3590,3))</span><br><span class="line">0      0                                                      *:ssh                                                     *:*        users:((<span class="string">"sshd"</span>,2735,3))</span><br></pre></td></tr></table></figure></li><li><p>找出打开套接字/端口应用程序</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -lp|grep 1935</span></span><br><span class="line">0      0                            *:1935                          *:*        users:((<span class="string">"fmsedge"</span>,2913,18))</span><br><span class="line">0      0                    127.0.0.1:19350                         *:*        users:((<span class="string">"fmsedge"</span>,2913,17))</span><br><span class="line">[root@localhost ~]<span class="comment"># ss -lp|grep 3306</span></span><br><span class="line">0      0                            *:3306                          *:*        users:((<span class="string">"mysqld"</span>,2871,10))</span><br></pre></td></tr></table></figure></li><li><p>显示所有UDP Sockets</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -au</span></span><br><span class="line">State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port   </span><br><span class="line">UNCONN     0      0                                         127.0.0.1:syslog                                             *:*       </span><br><span class="line">UNCONN     0      0                                                 *:snmp                                               *:*       </span><br><span class="line">ESTAB      0      0                                   192.168.120.203:39641                                  10.58.119.119:domain</span><br></pre></td></tr></table></figure></li><li><p>显示所有状态为established的SMTP连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -o state established '( dport = :smtp or sport = :smtp )' </span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port</span><br></pre></td></tr></table></figure></li><li><p>显示所有状态为Established的HTTP连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ss -o state established '( dport = :http or sport = :http )' </span></span><br><span class="line">Recv-Q Send-Q                                     Local Address:Port                                         Peer Address:Port   </span><br><span class="line">0      0                                              75.126.153.214:2164                                        192.168.10.42:http</span><br></pre></td></tr></table></figure></li><li><p>列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7/24所有 tcp套接字</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -o state fin-wait-1 <span class="string">'( sport = :http or sport = :https )'</span> dst 193.233.7/24</span><br></pre></td></tr></table></figure></li><li><p>用TCP 状态过滤Sockets:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss -4 state FILTER-NAME-HERE </span><br><span class="line">ss -6 state FILTER-NAME-HERE</span><br></pre></td></tr></table></figure><p>[root@localhost ~]#ss -4 state closing<br>Recv-Q Send-Q                                                  Local Address:Port                                                      Peer Address:Port<br>1      11094                                                  75.126.153.214:http                                                      192.168.10.42:4669<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    FILTER-NAME-HERE 可以代表以下任何一个：</span><br><span class="line">    </span><br><span class="line">    established</span><br><span class="line">    </span><br><span class="line">    syn-sent</span><br><span class="line">    </span><br><span class="line">    syn-recv</span><br><span class="line">    </span><br><span class="line">    fin-wait-1</span><br><span class="line">    </span><br><span class="line">    fin-wait-2</span><br><span class="line">    </span><br><span class="line">    time-wait</span><br><span class="line">    </span><br><span class="line">    closed</span><br><span class="line">    </span><br><span class="line">    close-wait</span><br><span class="line">    </span><br><span class="line">    last-ack</span><br><span class="line">    </span><br><span class="line">    listen</span><br><span class="line">    </span><br><span class="line">    closing</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">    all : 所有以上状态</span><br><span class="line"></span><br><span class="line">    connected : 除了listen and closed的所有状态</span><br><span class="line"></span><br><span class="line">    synchronized :所有已连接的状态除了syn-sent</span><br><span class="line"></span><br><span class="line">    bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.</span><br><span class="line"></span><br><span class="line">    big : 和bucket相反.</span><br><span class="line"></span><br><span class="line">11. 匹配远程地址和端口号</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    ss dst ADDRESS_PATTERN</span><br><span class="line">    ss dst 192.168.1.5</span><br><span class="line">    ss dst 192.168.119.113:http </span><br><span class="line">    ss dst 192.168.119.113:smtp </span><br><span class="line">    ss dst 192.168.119.113:443</span><br></pre></td></tr></table></figure></p><p>[root@localhost ~]# ss dst 192.168.119.113<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:20229<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:61056<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:61623<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:60924<br>ESTAB      0      0                                   192.168.119.103:16050                                192.168.119.113:43701<br>ESTAB      0      0                                   192.168.119.103:16073                                192.168.119.113:32930<br>ESTAB      0      0                                   192.168.119.103:16073                                192.168.119.113:49318<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:3844<br>[root@localhost ~]# ss dst 192.168.119.113:http<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>[root@localhost ~]# ss dst 192.168.119.113:3844<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>ESTAB      0      0                                   192.168.119.103:16014                                192.168.119.113:3844<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">12. 匹配本地地址和端口号</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    ss src ADDRESS_PATTERN</span><br><span class="line">    ss src 192.168.119.103</span><br><span class="line">    ss src 192.168.119.103:http</span><br><span class="line">    ss src 192.168.119.103:80</span><br><span class="line">    ss src 192.168.119.103:smtp</span><br><span class="line">    ss src 192.168.119.103:25</span><br></pre></td></tr></table></figure></p><p>[root@localhost ~]# ss src 192.168.119.103:16021<br>State      Recv-Q Send-Q                                Local Address:Port                                    Peer Address:Port<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:63054<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:62894<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:63055<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:2274<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:44784<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:7233<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.103:58660<br>ESTAB      0      0                                   192.168.119.103:16021                                192.168.119.201:44822<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56737<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:57487<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56736<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:64652<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56586<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:64653<br>ESTAB      0      0                                   192.168.119.103:16021                                     10.2.1.206:56587<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">13. 将本地或者远程端口和一个数比较</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    ss dport OP PORT </span><br><span class="line">    ss sport OP PORT</span><br></pre></td></tr></table></figure></p><p>[root@localhost ~]# ss  sport = :http<br>[root@localhost ~]# ss  dport = :http<br>[root@localhost ~]# ss  dport > :1024<br>[root@localhost ~]# ss  sport > :1024<br>[root@localhost ~]# ss sport \&lt; :32000<br>[root@localhost ~]# ss  sport eq :22<br>[root@localhost ~]# ss  dport != :22<br>[root@localhost ~]# ss  state connected sport = :http<br>[root@localhost ~]# ss ( sport = :http or sport = :https )<br>[root@localhost ~]# ss -o state fin-wait-1 ( sport = :http or sport = :https ) dst 192.168.1/24<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    ss dport OP PORT 远程端口和一个数比较；ss sport OP PORT 本地端口和一个数比较。</span><br><span class="line">    </span><br><span class="line">    OP 可以代表以下任意一个: </span><br><span class="line">    </span><br><span class="line">    &lt;= or le : 小于或等于端口号</span><br><span class="line">    </span><br><span class="line">    \&gt;= or ge : 大于或等于端口号</span><br><span class="line">    </span><br><span class="line">    == or eq : 等于端口号</span><br><span class="line">    </span><br><span class="line">    != or ne : 不等于端口号</span><br><span class="line">    </span><br><span class="line">    &lt; or gt : 小于端口号</span><br><span class="line">    </span><br><span class="line">    \&gt; or lt : 大于端口号</span><br><span class="line"></span><br><span class="line">14. ss 和 netstat 效率对比</span><br><span class="line"></span><br><span class="line">    ```sh</span><br><span class="line">    time netstat -at</span><br><span class="line">    time ss</span><br><span class="line"></span><br><span class="line">    [root@localhost ~]# time ss   </span><br><span class="line">    real    0m0.739s</span><br><span class="line">    user    0m0.019s</span><br><span class="line">    sys     0m0.013s</span><br><span class="line">    [root@localhost ~]# </span><br><span class="line">    [root@localhost ~]# time netstat -at</span><br><span class="line">    real    2m45.907s</span><br><span class="line">    user    0m0.063s</span><br><span class="line">    sys     0m0.067s</span><br></pre></td></tr></table></figure></p><p>用time 命令分别获取通过netstat和ss命令获取程序和概要占用资源所使用的时间。在服务器连接数比较多的时候，netstat的效率完全没法和ss比。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。&lt;/p&gt;
&lt;p&gt;当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。&lt;/p&gt;
&lt;p&gt;天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="命令" scheme="http://blog.imgavin.me/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://blog.imgavin.me/tags/Linux/"/>
    
      <category term="ss" scheme="http://blog.imgavin.me/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 主从复制</title>
    <link href="http://blog.imgavin.me/2017/10/25/mysql-replication/"/>
    <id>http://blog.imgavin.me/2017/10/25/mysql-replication/</id>
    <published>2017-10-25T02:42:22.000Z</published>
    <updated>2018-03-23T02:07:36.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建复制帐号,主库和从库都需创建</span></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO repl@<span class="string">'192.168.100.%'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主库 my.cnf 指定一个独一无二的服务器 ID(server ID)</span></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">server_id = 21</span><br><span class="line"><span class="comment"># 如果之前没有在 Mysql 配置文件中指定 log-bin 选项，就需要重启 mysql</span></span><br><span class="line"><span class="comment"># 使用 SHOW MASTER STATUS 命令，检查二进制日志文件是否已经在主库上创建</span></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      120 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从库上修改 my.cnf 配置，需重启 Mysql</span></span><br><span class="line">log_bin = mysql-bin</span><br><span class="line">server_id = 22</span><br><span class="line">relay_log = /var/lib/mysql/mysql-relay-bin</span><br><span class="line">log_slave_updates = 1</span><br><span class="line">read_only = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动复制</span></span><br><span class="line"><span class="comment"># 下一步告诉从库如何连接到主库并重放其二进制日志。</span></span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">'192.168.100.21'</span>,</span><br><span class="line">    -&gt; MASTER_USER=<span class="string">'repl'</span>,</span><br><span class="line">    -&gt; MASTER_PASSWORD=<span class="string">'123456'</span>,</span><br><span class="line">    -&gt; MASTER_LOG_FILE=<span class="string">'mysql-bin.000001'</span>,</span><br><span class="line">    -&gt; MASTER_LOG_POS=0;</span><br><span class="line"><span class="comment"># 开启复制</span></span><br><span class="line">mysql&gt; START SLAVE;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主库可以看到由从库 IO 线程向主库发起的连接</span></span><br><span class="line">mysql&gt; SHOW PROCESSLIST\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">     Id: 5</span><br><span class="line">   User: repl</span><br><span class="line">   Host: 192.168.100.22:54294</span><br><span class="line">     db: NULL</span><br><span class="line">Command: Binlog Dump</span><br><span class="line">   Time: 88</span><br><span class="line">  State: Master has sent all binlog to slave; waiting <span class="keyword">for</span> binlog to be updated</span><br><span class="line">   Info: NULL</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 从库可以看到 IO 线程和 SQL 线程</span></span><br><span class="line">mysql&gt; SHOW PROCESSLIST\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">     Id: 3</span><br><span class="line">   User: system user</span><br><span class="line">   Host:</span><br><span class="line">     db: NULL</span><br><span class="line">Command: Connect</span><br><span class="line">   Time: 2005</span><br><span class="line">  State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">   Info: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">     Id: 4</span><br><span class="line">   User: system user</span><br><span class="line">   Host:</span><br><span class="line">     db: NULL</span><br><span class="line">Command: Connect</span><br><span class="line">   Time: 1184</span><br><span class="line">  State: Slave has <span class="built_in">read</span> all relay <span class="built_in">log</span>; waiting <span class="keyword">for</span> the slave I/O thread to update it</span><br><span class="line">   Info: NULL</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://segmentfault.com/a/1190000008942618" target="_blank" rel="noopener">MySql 主从复制及配置实现</a></p></li><li><p><a href="http://www.raye.wang/2017/04/14/mysqlzhu-cong-fu-zhi-da-jian-ji-yu-ri-zhi-binlog/" target="_blank" rel="noopener">MySQL主从复制搭建，基于日志（binlog）</a></p></li><li><a href="https://lanjingling.github.io/2015/10/26/mysql-replication-master-master/" target="_blank" rel="noopener">Mysql 主主复制</a></li><li><a href="https://segmentfault.com/a/1190000009724090" target="_blank" rel="noopener">mysql主从复制 主主复制</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://blog.imgavin.me/tags/mysql/"/>
    
      <category term="replication" scheme="http://blog.imgavin.me/tags/replication/"/>
    
      <category term="master" scheme="http://blog.imgavin.me/tags/master/"/>
    
      <category term="slave" scheme="http://blog.imgavin.me/tags/slave/"/>
    
  </entry>
  
  <entry>
    <title>wrk - HTTP 性能测试工具</title>
    <link href="http://blog.imgavin.me/2017/10/18/tools-http-wrk/"/>
    <id>http://blog.imgavin.me/2017/10/18/tools-http-wrk/</id>
    <published>2017-10-18T02:09:19.000Z</published>
    <updated>2017-11-02T08:18:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/wg/wrk" target="_blank" rel="noopener">wrk</a> 是一个 http 的性能基准测试工具。使用简单的多核机器，多线程并且利用 Linux系统的 io 模型（ epoll ，kqueue）来产生大量并发。并且 http 请求的创建可以使用 <code>LuaJIT</code> 脚本。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wrk</span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wg/wrk</span><br><span class="line"><span class="built_in">cd</span> wrk</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可执行文件放进你的环境变量路径中，方便命令行执行</span></span><br><span class="line">cp wrk /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html</span><br></pre></td></tr></table></figure><p>使用12个线程创建400个连接，持续30秒</p><p>测试结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Running 30s <span class="built_in">test</span> @ http://127.0.0.1:8080/index.html</span><br><span class="line">  12 threads and 400 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   635.91us    0.89ms  12.92ms   93.69%</span><br><span class="line">    Req/Sec    56.20k     8.07k   62.00k    86.54%</span><br><span class="line">  22464657 requests <span class="keyword">in</span> 30.00s, 17.76GB <span class="built_in">read</span></span><br><span class="line">Requests/sec: 748868.53</span><br><span class="line">Transfer/sec:    606.33MB</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">每个线程数据状态</span><br><span class="line">平均响应时间 635.91ms 偏差0.89(越小越稳定) 最大12.92ms</span><br><span class="line">每秒请求 56.20k 个 偏差 8.07k 最大 62.00k  </span><br><span class="line"></span><br><span class="line">总共在 30.00s 内发生了 22464657 个请求，读取了 17.76GB 数据</span><br><span class="line">每秒请求数为 748868.53</span><br><span class="line">每秒数据传输量 606.33MB</span><br></pre></td></tr></table></figure><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c, --connections  连接数，每个线程连接数是：connections/threads</span><br><span class="line">-d, --duration     测试持续时间</span><br><span class="line">-t, --threads      使用的线程数量</span><br><span class="line">-s, --script       使用的 lua 脚本</span><br><span class="line">-H, --header       请求头信息</span><br><span class="line">--latency      打印详细响应数据</span><br><span class="line">--timeout      未响应的超时时间</span><br><span class="line">-v, --version      打印版本号</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://zjumty.iteye.com/blog/2221040" target="_blank" rel="noopener">wrk – 小巧轻盈的 http 性能测试工具</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/wg/wrk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wrk&lt;/a&gt; 是一个 http 的性能基准测试工具。使用简单的多核机器，多线程并且利用 Linux系统的 io 模型（ epoll ，kqueue）来产生大量并发。并且 http 请求的创建可以使用 &lt;code&gt;LuaJIT&lt;/code&gt; 脚本。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="http" scheme="http://blog.imgavin.me/tags/http/"/>
    
      <category term="压力测试" scheme="http://blog.imgavin.me/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
      <category term="负载测试" scheme="http://blog.imgavin.me/tags/%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 常用库整理</title>
    <link href="http://blog.imgavin.me/2017/08/24/python-libs/"/>
    <id>http://blog.imgavin.me/2017/08/24/python-libs/</id>
    <published>2017-08-24T03:41:43.000Z</published>
    <updated>2017-11-02T08:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a><a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener">virtualenv</a></h2><p><strong>对每个项目都可创建独立的 Python 环境，互不冲突。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个项目环境</span></span><br><span class="line">$ virtualenv ENV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活脚本，只是改变环境 path</span></span><br><span class="line">$ source bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消激活，还原</span></span><br><span class="line">(ENV)$ deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除环境</span></span><br><span class="line">$ rm -r /path/to/ENV</span><br></pre></td></tr></table></figure><h2 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a><a href="http://lxml.de/" target="_blank" rel="noopener">lxml</a></h2><p><strong>非常快速灵活的处理 HTML 和 XML</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = <span class="string">'&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;page title&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line">tree = etree.HTML(html) <span class="comment"># 解析 HTML</span></span><br><span class="line">h1 = tree.xpath(<span class="string">'//h1'</span>)[<span class="number">0</span>] <span class="comment"># 使用 xpath 匹配 h1</span></span><br><span class="line">print(h1.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">page title</span><br></pre></td></tr></table></figure><h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a><a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a></h2><p><strong>Web 微型框架</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个最小的 Web 应用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">Awesome Python</a> 所有需要的 Python 库、框架、工具、资源等都可以在这里找到。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标准库&quot;&gt;&lt;a href=&quot;#标准库&quot; class=&quot;headerlink&quot; title=&quot;标准库&quot;&gt;&lt;/a&gt;标准库&lt;/h1&gt;&lt;h1 id=&quot;第三方库&quot;&gt;&lt;a href=&quot;#第三方库&quot; class=&quot;headerlink&quot; title=&quot;第三方库&quot;&gt;&lt;/a&gt;第三方
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://blog.imgavin.me/tags/python/"/>
    
      <category term="library" scheme="http://blog.imgavin.me/tags/library/"/>
    
  </entry>
  
  <entry>
    <title>Github 徽章</title>
    <link href="http://blog.imgavin.me/2017/08/22/github-badges-shields/"/>
    <id>http://blog.imgavin.me/2017/08/22/github-badges-shields/</id>
    <published>2017-08-22T08:36:07.000Z</published>
    <updated>2017-08-23T03:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Github 上很多开源项目 README 上都有很多徽章。比如，<a href="https://github.com/freeCodeCamp/freeCodeCamp" target="_blank" rel="noopener">freeCodeCamp</a>：</p><img src="/2017/08/22/github-badges-shields/p1.png"><a id="more"></a><p>这些色彩各异的徽章让项目的 README 看起来更炫目，感觉更完善。如果认为它们仅仅是讨好你的眼睛，那你就错了。它们中部分图标是能够反映项目的完成度，活跃度，流行度的。</p><p><img src="https://img.shields.io/travis/rust-lang/rust.svg" alt="status"></p><p>这个徽章代表此项目的测试已通过。反映代码质量会比较高，毕竟有测试。</p><p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis Ci</a> 提供持续集成的功能。在你的 Github 每次提交代码触发 Hooks 时，都会运行它的脚本，而 Travis 提供了多用语言的运行环境，脚本中就可以进行环境的安装，数据库的安装，代码的编译部署测试等。也就是一次提交一次测试，即持续集成。</p><p><img src="https://img.shields.io/codeclimate/github/kabisaict/flow.svg" alt="Code Climate"></p><p>使 CI 测试更加全面。<a href="https://codeclimate.com/" target="_blank" rel="noopener">Code Climate</a> 提供了代码分析的三个指标（复杂度、冗余、规范），并且最后计算出 GPA（平均得分）。也就是上面你看到的徽章，4.0 平均得分。</p><p><img src="https://img.shields.io/scrutinizer/coverage/g/filp/whoops.svg" alt="coverage"></p><p>这个徽章是代码测试覆盖率。<a href="https://coveralls.io/" target="_blank" rel="noopener">coveralls</a> 可以提供此功能。</p><p><img src="https://img.shields.io/gitter/room/nwjs/nw.js.svg" alt="gitter"></p><p>我们如果希望和某个 Github 项目开发者沟通，比如给这个项目提个 bug。传统的方式是在该项目创建一个 issue ，等开发者看到后回复你。但是，如果你希望进行实时的进行沟通，那怎么办。<a href="https://gitter.im/" target="_blank" rel="noopener">Gitter</a> 就提供了聊天室的功能。开发者用 Github 帐号登录后，可以就为某个项目创建一个聊天室。然后在项目的 README 中放入类似这样的徽章。</p><p>以上介绍了几种实用的工具和徽章。除了这些，还用很多可用的工具来帮助你检测代码，生成徽章，完善你的项目。</p><p>还可以在 <a href="https://shields.io/" target="_blank" rel="noopener">shields</a> 上自定义徽章。</p><p>比如，在你的 README 中放入此图片链接 <code>(https://img.shields.io/badge/全球最大的男性同性交友平台-Github-blue.svg)</code>，效果就是这样的：<img src="https://img.shields.io/badge/全球最大的男性同性交友平台-Github-blue.svg" alt="自定义"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github 上很多开源项目 README 上都有很多徽章。比如，&lt;a href=&quot;https://github.com/freeCodeCamp/freeCodeCamp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;freeCodeCamp&lt;/a&gt;：&lt;/p&gt;
&lt;img src=&quot;/2017/08/22/github-badges-shields/p1.png&quot;&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="github" scheme="http://blog.imgavin.me/tags/github/"/>
    
      <category term="测试" scheme="http://blog.imgavin.me/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="覆盖率" scheme="http://blog.imgavin.me/tags/%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>python 协程</title>
    <link href="http://blog.imgavin.me/2017/08/15/python-coroutine/"/>
    <id>http://blog.imgavin.me/2017/08/15/python-coroutine/</id>
    <published>2017-08-15T01:56:28.000Z</published>
    <updated>2017-08-15T07:51:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>与子程序（或者说函数）一样，<strong>协程</strong>（coroutine）也是一种程序组件。Donald Knuth 曾说，<strong>子程序是协程的特例</strong>。</p><p>一个子程序就是一次函数调用，它只有一个入口，一次返回，调用顺序是明确的。但协程的调用和子程序则大不一样，<strong>协程允许有多个入口对程序进行中断、继续执行等操作</strong>。</p><p>Python2 可以通过 yield 来实现基本的协程，但不够强大，第三方库 <a href="http://www.gevent.org/" target="_blank" rel="noopener">gevent</a> 对协程提供了强大的支持。另外，Python3.5 提供了 async/await 语法来实现对协程的支持。</p><p>相比多线程，协程的一大特点就是<strong>它在一个线程内执行</strong>，既避免了多线程之间切换带来的开销，也避免了对共享资源的访问冲突，线程数量越多，协程的性能优势就越明显。</p><a id="more"></a><h1 id="使用-yield-来实现简单协程"><a href="#使用-yield-来实现简单协程" class="headerlink" title="使用 yield 来实现简单协程"></a>使用 yield 来实现简单协程</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></span><br><span class="line">    message = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> message <span class="comment"># yield 使函数中断</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[CONSUMER] Consuming %s...'</span> % n</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        message = <span class="string">'200 OK'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(c)</span>:</span></span><br><span class="line">    c.next() <span class="comment"># 启动生成器</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[PRODUCER] Producing %s...'</span> % n</span><br><span class="line">        r = c.send(n) <span class="comment"># 通过 send 切换到 consumer 执行</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[PRODUCER] Consumer return: %s'</span> % r</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    c = consumer()</span><br><span class="line">    produce(c)</span><br></pre></td></tr></table></figure><p>在上面的代码中，消费者 <code>consumer</code> 是一个生成器函数，我们把它作为参数传给 <code>produce</code>，其中，next 方法用于启动生成器，send 方法用于发送消息给 <code>consumer</code>，并切换到 <code>consumer</code> 执行。<code>consumer</code> 通过 yield 获取到消息，然后进行处理，又通过 yield 返回消息给 <code>produce</code>，并转到 <code>produce</code> 执行，如此反复。</p><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[PRODUCER] Producing 1...</span><br><span class="line">[CONSUMER] Consuming 1...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 2...</span><br><span class="line">[CONSUMER] Consuming 2...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 3...</span><br><span class="line">[CONSUMER] Consuming 3...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 4...</span><br><span class="line">[CONSUMER] Consuming 4...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 5...</span><br><span class="line">[CONSUMER] Consuming 5...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br></pre></td></tr></table></figure><h1 id="使用-gevent-来实现协程"><a href="#使用-gevent-来实现协程" class="headerlink" title="使用 gevent  来实现协程"></a>使用 <a href="http://www.gevent.org/" target="_blank" rel="noopener">gevent</a>  来实现协程</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pr</span><span class="params">(url)</span>:</span></span><br><span class="line">    requests.get(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start1 = time.time()</span><br><span class="line">spawns = list()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    spawns.append(gevent.spawn(pr, <span class="string">'https://www.baidu.com/'</span>))</span><br><span class="line">gevent.joinall(spawns)</span><br><span class="line">print(<span class="string">'协程用时: %s'</span> % round(time.time() - start1, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">start2 = time.time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    pr(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">print(<span class="string">'非协程用时: %s'</span> % round(time.time() - start2, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>执行多次，可看出使用协程对于 IO 密集型的任务效率的提升很明显。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 第一次</span><br><span class="line">协程用时: 1.05</span><br><span class="line">非协程用时: 38.32</span><br><span class="line"></span><br><span class="line">// 第二次</span><br><span class="line">协程用时: 1.04</span><br><span class="line">非协程用时: 38.12</span><br><span class="line"></span><br><span class="line">// 第三次</span><br><span class="line">协程用时: 1.58</span><br><span class="line">非协程用时: 39.04</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://segmentfault.com/a/1190000001813992" target="_blank" rel="noopener">Python 中的进程、线程、协程、同步、异步、回调</a></li><li><a href="https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868328689835ecd883d910145dfa8227b539725e5ed000" target="_blank" rel="noopener">Python 协程 - 廖雪峰</a></li><li><a href="https://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/" target="_blank" rel="noopener">Python 协程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h1&gt;&lt;p&gt;与子程序（或者说函数）一样，&lt;strong&gt;协程&lt;/strong&gt;（coroutine）也是一种程序组件。Donald Knuth 曾说，&lt;strong&gt;子程序是协程的特例&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一个子程序就是一次函数调用，它只有一个入口，一次返回，调用顺序是明确的。但协程的调用和子程序则大不一样，&lt;strong&gt;协程允许有多个入口对程序进行中断、继续执行等操作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Python2 可以通过 yield 来实现基本的协程，但不够强大，第三方库 &lt;a href=&quot;http://www.gevent.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gevent&lt;/a&gt; 对协程提供了强大的支持。另外，Python3.5 提供了 async/await 语法来实现对协程的支持。&lt;/p&gt;
&lt;p&gt;相比多线程，协程的一大特点就是&lt;strong&gt;它在一个线程内执行&lt;/strong&gt;，既避免了多线程之间切换带来的开销，也避免了对共享资源的访问冲突，线程数量越多，协程的性能优势就越明显。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://blog.imgavin.me/tags/python/"/>
    
      <category term="协程" scheme="http://blog.imgavin.me/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="线程" scheme="http://blog.imgavin.me/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>相亲有感</title>
    <link href="http://blog.imgavin.me/2017/08/03/date-feeling/"/>
    <id>http://blog.imgavin.me/2017/08/03/date-feeling/</id>
    <published>2017-08-03T01:28:48.000Z</published>
    <updated>2017-08-03T07:29:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上老爹打电话，说了介绍人给我安排相亲的“汇报”。大体意思就是，介绍人没有忘记老爹给她的嘱托，将近两个月的时间找了几个女孩。有几个女孩知道我是专科的学历就直接拒绝了，还有一个貌似是护士的女孩嫌弃我 175cm 的身高。还有上次说的一个天津外院的女孩知道我只有一套30多平的房子时直接拒绝的。到目前为止我的人生中还没有一次见到真人，从而进行“相亲”活动。全部无一例外的看到我的资料直接拒绝。当我昨天第二次听到汇报结果时，我的内心是毫无波动的，甚至于跟我所想象的结果不谋而合。</p><p>事情的起因，是老爹一再地逼迫我找对象，“不能再一直单着，以后我没有了，谁照顾你”，“我要完成我的任务，给你娶上媳妇”，“我要对得起你妈妈”，“我同事的孩子都结婚了”，“你不结婚，我在咱家门口都没脸了”，“……”。总之归根到底就是为了我好。起初，我是极力抗拒的。后来，我每周末回家，他都能把话题聊到这方面，真是润物细无声，架不住了，索性，随他去吧。妥协了，“你找吧，我随意”。</p><a id="more"></a><p>事实上我已经做好一辈子不结婚的准备了。我思考良久，考虑了结婚和不结婚后的生活可能会发生的各种情况，做出这种决定是深思熟虑的，并不是一时的冲动。所以，我把我考虑到的问题罗列下来。</p><ol><li><p>高昂的房价</p><p>这大概是目前最现实最无法解决无法回避的问题。结婚、相亲的前提就是先有这东西。你不要跟我说有的女孩或者女孩家庭不在意你是否有房子，我只能说我从未遇到过，即使有我也不相信这运气会降临到我头上。天津市区的房子就没有 3w 以下的，即使选择津南北辰这种在天津人眼里差一些的也没有低于两万的。那么买这样差一些的一套100平算是 200 w。那么首付要60w，其实这 60w 也不是每个家庭都能拿出来的。就算我能拿出来，还有 140w 需要贷款，贷款30年，每月还款不会低于7500。夫妻二人一起还款似乎还是没有问题的，但就算如此，我们又剩下多少，生活质量又能否保持单身时的或者又能提高多少。</p></li><li><p>私家车</p><p>大多数人可能会选择 10+w 左右的车子，全款或贷款都会是不小的负担。如果不打算买车，女方会不会同意?</p></li><li><p>婚礼</p><p>婚纱，婚纱照，婚庆，婚礼，珠宝，蜜月。15w 不多吧。</p></li><li><p>孩子，教育</p><p>如果结了婚不打算要孩子，那么结婚的意义又是什么？对于传统家庭来讲，传宗接代可是首要大事。</p><p>不考虑远期孩子上学的花销。就考虑目前几年你可能会发生的。生一个孩子不会低于1w，还有每个月的奶粉，尿不湿，衣服，玩具。3 - 6岁上幼儿园，5w 一年不多吧。</p></li><li><p>父母，养老，医疗</p><p>对于绝大部分90后而言，你们夫妻二人要赡养4个老人，对他们的饮食，情绪，健康负责。没有大病还好，一旦有会让你们元气大伤。</p></li><li><p>平时的开销</p><p>平时看电影，吃饭，淘宝。每年的生日，定期的更换电子产品等…</p></li></ol><p>单个的一个问题都可以克服，但所有问题联结在一起，那会变成巨大的负担让你喘不过气来。</p><p>如果以后单算一个人过，那么这里的问题都不再是问题。</p><p><strong>结婚本身不可怕，可怕的是结婚后下降的生活质量。</strong></p><img src="/2017/08/03/date-feeling/p1.png"><p>何况，我是单亲家庭，我就一个老爹；没钱买房，即使有钱也不打算付首付然后被银行绑架；工资尚且不错，够吃够喝够玩够折腾，但很难想象五年十年后还能自在；我这人向来独来独往，尤其这几年一个人生活，不喜欢被别人打扰生活，不喜欢被人指手画脚；我对另一半也不是没有要求的，身材要匀称的不能太瘦或胖，身高不能太矮，要善解人意，要乖巧懂事，要有自己的工作且工资尚可，喜欢看书，旅游，与我要有共同语言，家庭和睦，允许单亲，最好她家没人吸烟喝酒没重大疾病。你看，我这要求的条件挺多了，都满足的女生本身就少，能认识我的就更少，喜欢我并想要了解我的应该就不存在了。<strong>所以，我是有自知之明的，别瞎 JB 想，老老实实工作攒钱，到一定年龄退休养老。</strong></p><p>现在，每年给自己和老爹去医院做一次体检，了解身体状况，做到疾病的筛查和预防。吃饭不吃油腻，热量高，不健康的食物。</p><p>每年一次的洗牙，每天按时刷牙，目标就是几十年后仍能有一口完美的牙齿。</p><p>给自己买了重疾险和寿险，未来如果真的单身生活，等我死后，就把寿险的钱给我领养的孩子或者捐给福利院。</p><p>诸如此类的，都是为了我以后的生活更美好。</p><p>就这样吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天晚上老爹打电话，说了介绍人给我安排相亲的“汇报”。大体意思就是，介绍人没有忘记老爹给她的嘱托，将近两个月的时间找了几个女孩。有几个女孩知道我是专科的学历就直接拒绝了，还有一个貌似是护士的女孩嫌弃我 175cm 的身高。还有上次说的一个天津外院的女孩知道我只有一套30多平的房子时直接拒绝的。到目前为止我的人生中还没有一次见到真人，从而进行“相亲”活动。全部无一例外的看到我的资料直接拒绝。当我昨天第二次听到汇报结果时，我的内心是毫无波动的，甚至于跟我所想象的结果不谋而合。&lt;/p&gt;
&lt;p&gt;事情的起因，是老爹一再地逼迫我找对象，“不能再一直单着，以后我没有了，谁照顾你”，“我要完成我的任务，给你娶上媳妇”，“我要对得起你妈妈”，“我同事的孩子都结婚了”，“你不结婚，我在咱家门口都没脸了”，“……”。总之归根到底就是为了我好。起初，我是极力抗拒的。后来，我每周末回家，他都能把话题聊到这方面，真是润物细无声，架不住了，索性，随他去吧。妥协了，“你找吧，我随意”。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.imgavin.me/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="相亲" scheme="http://blog.imgavin.me/tags/%E7%9B%B8%E4%BA%B2/"/>
    
      <category term="逼婚" scheme="http://blog.imgavin.me/tags/%E9%80%BC%E5%A9%9A/"/>
    
      <category term="独居" scheme="http://blog.imgavin.me/tags/%E7%8B%AC%E5%B1%85/"/>
    
      <category term="房子" scheme="http://blog.imgavin.me/tags/%E6%88%BF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 新服务器环境设置与Web服务等搭建</title>
    <link href="http://blog.imgavin.me/2017/06/10/centos-environment/"/>
    <id>http://blog.imgavin.me/2017/06/10/centos-environment/</id>
    <published>2017-06-10T06:20:51.000Z</published>
    <updated>2018-04-23T03:48:50.333Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning"><p>此篇文章主要是记录本人平时开发或生产环境所常用软件的配置。</p><p><strong>基本都是基于 CentOS7 来进行配置的.</strong></p></div><h1 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h1><h2 id="系统信息查询"><a href="#系统信息查询" class="headerlink" title="系统信息查询"></a>系统信息查询</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）</span></span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Linux 发行版</span></span><br><span class="line">cat /etc/rehat-release</span><br></pre></td></tr></table></figure><h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 添加以下配置</span></span><br><span class="line">* soft nofile 100001</span><br><span class="line">* hard nofile 100002</span><br><span class="line">root soft nofile 100001</span><br><span class="line">root hard nofile 100002</span><br><span class="line"></span><br><span class="line">vim /etc/systemd/system.conf</span><br><span class="line"><span class="comment"># 修改以下配置</span></span><br><span class="line">DefaultTimeoutStopSec=30s</span><br><span class="line">DefaultLimitNOFILE=1000000</span><br></pre></td></tr></table></figure><h2 id="配置静态-IP"><a href="#配置静态-IP" class="headerlink" title="配置静态 IP"></a>配置静态 IP</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络设备</span></span><br><span class="line">ip addr show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据设备名不同，修改配置文件</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="comment">#############</span></span><br><span class="line">IPADDR=192.168.1.100 <span class="comment"># 静态 IP</span></span><br><span class="line">GATEWAY=192.168.1.10 <span class="comment"># 默认网关</span></span><br><span class="line">NETMASK=255.255.255.0 <span class="comment"># 子网掩码</span></span><br><span class="line">DNS1=192.168.1.10 <span class="comment"># DNS</span></span><br><span class="line">DNS1=192.168.1.11</span><br><span class="line"><span class="comment">#############</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置完成，重启网络服务</span></span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试联通性</span></span><br><span class="line">ping -c3 baidu.com</span><br></pre></td></tr></table></figure><h2 id="修改主机名称"><a href="#修改主机名称" class="headerlink" title="修改主机名称"></a>修改主机名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前主机名称</span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line"># 修改hostname文件，重启后可看效果</span><br><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="修改中文字符集"><a href="#修改中文字符集" class="headerlink" title="修改中文字符集"></a>修改中文字符集</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前设置的字符集</span></span><br><span class="line">locale</span><br><span class="line"><span class="comment"># 查看支持的字符集</span></span><br><span class="line">locale -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装简体中文语言包</span></span><br><span class="line">yum install kde-l10n-Chinese</span><br><span class="line"></span><br><span class="line">vi /etc/locale.conf</span><br><span class="line"><span class="comment">##加下面内容到第一行，设置中文</span></span><br><span class="line">LANG=zh_CN.UTF8</span><br><span class="line"></span><br><span class="line">localectl  <span class="built_in">set</span>-locale LANG=zh_CN.UTF8</span><br></pre></td></tr></table></figure><h2 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h2><p>系统默认的 yum 源速度很一般，为了快速下载安装，需要把 yum 源修改成国内的.</p><p><strong>如果你是阿里云的机器,不需要此操作</strong></p><ul><li><p>修改 yum 源</p><ol><li><p>备份</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure></li><li><p>使用阿里 yum 源,下载新的 *.repo 到 /etc/yum.repos.d/</p><ul><li><p>CentOS 5</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-5.repo</span><br></pre></td></tr></table></figure></li><li><p>CentOS 6</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br></pre></td></tr></table></figure></li><li><p>CentOS 7</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://opsx.alibaba.com/mirror" target="_blank" rel="noopener">阿里云开源镜像站</a>，<a href="http://mirrors.163.com/" target="_blank" rel="noopener">网易开源镜像站</a>，<a href="https://webtatic.com/projects/yum-repository/" target="_blank" rel="noopener">Webtatic 源</a>(速度不如国内镜像，但软件能找到比较新的版本，如 PHP7)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 网易安装 epel 源</span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p>生成缓存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure></li></ol></li><li><p>系统软件全面更新</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update &amp;&amp; yum upgrade</span><br></pre></td></tr></table></figure></li><li><p>其他命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 rpm 包的具体名称</span></span><br><span class="line">rpm -qa | grep nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示安装包文件列表</span></span><br><span class="line">rpm -q nginx-1.12.2-1.el7.x86_64</span><br><span class="line"><span class="comment"># 查询 centos 版本</span></span><br><span class="line">rpm -q centos-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 yum 源</span></span><br><span class="line">yum repolist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 yum 管理工具集</span></span><br><span class="line">yum -y install yum-utils</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>如果手动编译安装一些 yum 源没有的软件,那么一些必要的基础环境(<code>gcc</code>,<code>gcc-c++</code>,<code>make</code>等)需要尽量安装全.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">'Development Tools'</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h1><h2 id="gpm"><a href="#gpm" class="headerlink" title="gpm"></a>gpm</h2><p>让命令行界面支持鼠标选中粘贴</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> gpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start gpm</span><br></pre></td></tr></table></figure><h2 id="w3m"><a href="#w3m" class="headerlink" title="w3m"></a>w3m</h2><p>w3m是一个基于文本的网页浏览器，支持多种操作系统，在命令行终端可以很好的支持中文。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install w3m</span><br></pre></td></tr></table></figure><ul><li><a href="http://wiki.ubuntu.org.cn/W3m" target="_blank" rel="noopener">ubuntu w3m wiki</a></li><li><a href="http://lujun9972.github.io/blog/2016/12/11/w3m%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/" target="_blank" rel="noopener">w3m常用操作</a></li></ul><h2 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h2><p><a href="https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">Zsh</a>) 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 <a href="https://wiki.archlinux.org/index.php/Bash" target="_blank" rel="noopener">Bash</a> 的同时 (默认不兼容，除非设置成 <code>emulate sh</code>) 还有提供了很多改进，例如：</p><ul><li>更高效</li></ul><ul><li>更好的自动补全</li><li>更好的文件名展开（通配符展开）</li><li>更好的数组处理</li><li>可定制性高</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看你的所有 shell,找到 zsh 的目录</span></span><br><span class="line">chsh -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 shell, 从上面找到的</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后重新登录 shell,查看当前是否正确</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></h3><p>一个管理 zsh 配置的第三方扩展.让你使用 zsh 更简单.不用理会繁杂的配置.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 通过 curl 安装</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line"></span><br><span class="line"># 通过 wget 安装</span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br><span class="line"></span><br><span class="line"># 以上两者选其一</span><br><span class="line"></span><br><span class="line"># 修改你的 $HOME/.zshrc 文件,添加你喜欢的插件和主题,这里是示例</span><br><span class="line">plugins=(git bundler osx rake ruby)</span><br><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br></pre></td></tr></table></figure><h2 id="bullet-train-zsh"><a href="#bullet-train-zsh" class="headerlink" title="bullet-train.zsh"></a><a href="https://github.com/caiogondim/bullet-train.zsh" target="_blank" rel="noopener">bullet-train.zsh</a></h2><p>oh-my-zsh 的主题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载主题放到 $ZSH_CUSTOM/themes/ 目录中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 zshrc 文件</span></span><br><span class="line"><span class="comment"># zsh 状态条显示类型与顺序</span></span><br><span class="line">ZSH_THEME=<span class="string">"bullet-train"</span></span><br><span class="line">BULLETTRAIN_PROMPT_ORDER=(</span><br><span class="line">  context</span><br><span class="line">  time</span><br><span class="line">  status</span><br><span class="line">  dir</span><br><span class="line">  git</span><br><span class="line">  hg</span><br><span class="line">  cmd_exec_time</span><br><span class="line">)</span><br></pre></td></tr></table></figure><div class="note warning"><p>需要安装 powerline</p></div><h2 id="powerline"><a href="#powerline" class="headerlink" title="powerline"></a><a href="https://github.com/powerline/powerline" target="_blank" rel="noopener">powerline</a></h2><p>一个 vim 的状态栏插件,但是也提供了其他的应用 zsh, bash, tmux, IPython, Awesome and Qtile</p><img src="/2017/06/10/centos-environment/p1.png" title="效果图"><p><a href="https://powerline.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://powerline.readthedocs.io/en/latest/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python pip 安装</span></span><br><span class="line">pip install powerline-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装字体</span></span><br><span class="line"><span class="comment"># 如果你使用的终端本身就支持 powerline 字体,那么你就不需要安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先确保你有 fontconfig,CentOS 应该默认是没有的,需要安装</span></span><br><span class="line">yum install fontconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载字体</span></span><br><span class="line">wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf</span><br><span class="line">wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">mv PowerlineSymbols.otf ~/.fonts/</span><br><span class="line"><span class="built_in">fc</span>-cache -vf ~/.fonts/</span><br><span class="line">mv 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/</span><br></pre></td></tr></table></figure><p>编辑你的 <code>zshrc</code> 文件,添加如下配置(针对 shell 为 zsh 的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powerline-daemon -q</span><br><span class="line">. /usr/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh</span><br></pre></td></tr></table></figure><img src="/2017/06/10/centos-environment/p2.png" title="查看你的 powerline 安装路径"><h3 id="Vundle-vim"><a href="#Vundle-vim" class="headerlink" title="Vundle.vim"></a><a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle.vim</a></h3><p>vim 的插件管理器</p><p>初始安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</span><br></pre></td></tr></table></figure><p>修改 <code>vimrc</code> 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible              <span class="string">" 去除VI一致性,必须</span></span><br><span class="line"><span class="string">filetype off                  "</span> 必须</span><br><span class="line"></span><br><span class="line"><span class="string">" 设置包括vundle和初始化相关的runtime path</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/Vundle.vim</span></span><br><span class="line"><span class="string">call vundle#begin()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 让vundle管理插件版本,必须</span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line">Plugin <span class="string">'powerline/powerline'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'powerline/bindings/vim/'</span>&#125;</span><br><span class="line"></span><br><span class="line">call vundle<span class="comment">#end()            " 必须</span></span><br><span class="line">filetype plugin indent on    <span class="string">" 必须 加载vim自带和插件相应的语法和文件类型相关脚本</span></span><br></pre></td></tr></table></figure><p>运行 <code>vim</code> 再运行 <code>:PluginInstall</code> 来安装插件</p><p>或者通过命令行直接安装 <code>vim +PluginInstall +qall</code></p><div class="note warning"><p>这里使用了 powerline/powerline 插件,需安装 powerline,上一步有提到.</p></div><h3 id="vim-airline-amp-amp-vim-airline-themes"><a href="#vim-airline-amp-amp-vim-airline-themes" class="headerlink" title="vim-airline &amp;&amp;  vim-airline-themes"></a><a href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener">vim-airline</a> &amp;&amp;  <a href="https://github.com/vim-airline/vim-airline-themes" target="_blank" rel="noopener">vim-airline-themes</a></h3><p>vim 状态栏显示增强插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 vundle 安装</span></span><br><span class="line">Plugin <span class="string">'vim-airline/vim-airline'</span></span><br><span class="line">Plugin <span class="string">'vim-airline/vim-airline-themes'</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" 在 vimrc 中配置使用</span></span><br><span class="line"><span class="string">let g:airline_theme='molokai'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> 如果安装了 powerline,可以优化显示</span><br><span class="line"><span class="built_in">let</span> g:airline_powerline_fonts = 1</span><br></pre></td></tr></table></figure><h1 id="编程开发"><a href="#编程开发" class="headerlink" title="编程开发"></a>编程开发</h1><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>需添加<a href="https://webtatic.com/projects/yum-repository/" target="_blank" rel="noopener">Webtatic 源</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install php72w-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 php-fpm 进程</span></span><br><span class="line">systemctl start php-fpm.service</span><br><span class="line"><span class="comment"># 自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> php-fpm.service</span><br></pre></td></tr></table></figure><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install -y golang</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 go get 安装包一般会失败(有墙)</span></span><br><span class="line"><span class="comment"># 解决方法如下</span></span><br><span class="line"><span class="comment"># 可使用命令 go env 查看 GOPATH</span></span><br><span class="line">mkdir -p <span class="variable">$GOPATH</span>/src/golang.org/x/</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/golang.org/x/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/golang/net.git net </span><br><span class="line">go install net</span><br></pre></td></tr></table></figure><p><a href="https://golang.org/" target="_blank" rel="noopener">Golang 官方网站</a></p><h2 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3.*"></a>Python 3.*</h2><p>CentOS7 内置了 Python 2.7.5,如果你不是拿它作为研究或开发语言的话,此版本够用.如果想要安装 3 以上版本,那就需要从<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python官网</a>手动下载编译了.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 编译基础软件安装</span></span><br><span class="line"> yum install zlib-devel bzip2-devel openssl-devel ncurese-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载最新的 3.6.1</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf Python-3.6.1.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">cd</span> Python-3.6.1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建 Python, pip 软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3.6 /usr/<span class="built_in">local</span>/bin/python3</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3.6 /usr/<span class="built_in">local</span>/bin/pip3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">python3 --version</span><br></pre></td></tr></table></figure><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>添加 yum 源,新增文件 <code>/etc/yum.repos.d/mongodb-org-3.6.repo</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.6]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/3.6/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y mongodb-org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mongod.service</span><br></pre></td></tr></table></figure><p><strong>更多参考</strong></p><ul><li><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="noopener">MongoDB官方安装使用文档</a></li><li><a href="/2017/05/07/mongodb-note/" title="MongoDB 使用笔记">MongoDB 使用笔记</a></li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接 yum 安装</span></span><br><span class="line">yum install -y redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> redis.service</span><br></pre></td></tr></table></figure><a href="/2017/03/11/redis-configuration/" title="Redis 配置">Redis 配置</a><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询是否开启80端口则</span></span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line"><span class="comment"># 开启80端口</span></span><br><span class="line">firewall-cmd --add-port=80/tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SELinux 设置</span></span><br><span class="line"><span class="comment"># 查看 SELinux 模式</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="comment"># 查看 SELinux 状态与模式等</span></span><br><span class="line">sestatus</span><br><span class="line"><span class="comment"># 关闭 SELinux</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment"># 查看 nginx 是否受限制</span></span><br><span class="line">ps -eZ | grep nginx</span><br><span class="line"><span class="comment"># 查看文件受限</span></span><br><span class="line">ll -Zd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nginx 打开最大文件数等</span></span><br><span class="line">cat /proc/$(cat /run/nginx.pid)/limits</span><br></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加官方yum源</span></span><br><span class="line">rpm -Uvh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装官方源后，默认启用最新版本的 mysql 子库，目前 mysql5.7</span></span><br><span class="line"><span class="comment"># 查看所有 mysql 子库</span></span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想要安装其他版本，要关闭不需要的子库并开启版本的子库，比如安装 mysql5.6</span></span><br><span class="line"><span class="comment"># 关闭5.7版本的子库</span></span><br><span class="line">yum-config-manager --<span class="built_in">disable</span> mysql57-community</span><br><span class="line"><span class="comment"># 开启5.6版本的子库</span></span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> mysql56-community</span><br><span class="line"><span class="comment"># 如果没有 yum-config-manager 命令,需要安装</span></span><br><span class="line">yum -y install yum-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 mysql5.6</span></span><br><span class="line">yum install mysql-community-server</span><br><span class="line"><span class="comment"># 开启自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld.service</span><br><span class="line"><span class="comment"># 开启 mysql 服务</span></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="comment"># 查看 mysql 运行状态</span></span><br><span class="line">systemctl status mysqld.service</span><br><span class="line"><span class="comment"># 设置 mysql(仅限5.6版本)密码</span></span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p><a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="noopener">参考官方 yum 安装指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;此篇文章主要是记录本人平时开发或生产环境所常用软件的配置。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;基本都是基于 CentOS7 来进行配置的.&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;
&lt;h1 id=&quot;系统设置&quot;&gt;&lt;a href=&quot;#系统设置&quot; class=&quot;headerlink&quot; title=&quot;系统设置&quot;&gt;&lt;/a&gt;系统设置&lt;/h1&gt;&lt;h2 id=&quot;系统信息查询&quot;&gt;&lt;a href=&quot;#系统信息查询&quot; class=&quot;headerlink&quot; title=&quot;系统信息查询&quot;&gt;&lt;/a&gt;系统信息查询&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uname -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看 Linux 发行版&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /etc/rehat-release&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;内核&quot;&gt;&lt;a href=&quot;#内核&quot; class=&quot;headerlink&quot; title=&quot;内核&quot;&gt;&lt;/a&gt;内核&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/security/limits.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 添加以下配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* soft nofile 100001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* hard nofile 100002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root soft nofile 100001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root hard nofile 100002&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/systemd/system.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 修改以下配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DefaultTimeoutStopSec=30s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DefaultLimitNOFILE=1000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置静态-IP&quot;&gt;&lt;a href=&quot;#配置静态-IP&quot; class=&quot;headerlink&quot; title=&quot;配置静态 IP&quot;&gt;&lt;/a&gt;配置静态 IP&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看网络设备&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip addr show&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 根据设备名不同，修改配置文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#############&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IPADDR=192.168.1.100 &lt;span class=&quot;comment&quot;&gt;# 静态 IP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GATEWAY=192.168.1.10 &lt;span class=&quot;comment&quot;&gt;# 默认网关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETMASK=255.255.255.0 &lt;span class=&quot;comment&quot;&gt;# 子网掩码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNS1=192.168.1.10 &lt;span class=&quot;comment&quot;&gt;# DNS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DNS1=192.168.1.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#############&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 配置完成，重启网络服务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;service network restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 测试联通性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ping -c3 baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;修改主机名称&quot;&gt;&lt;a href=&quot;#修改主机名称&quot; class=&quot;headerlink&quot; title=&quot;修改主机名称&quot;&gt;&lt;/a&gt;修改主机名称&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 查看当前主机名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hostname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 修改hostname文件，重启后可看效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/hostname&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://blog.imgavin.me/tags/linux/"/>
    
      <category term="centos" scheme="http://blog.imgavin.me/tags/centos/"/>
    
      <category term="zsh" scheme="http://blog.imgavin.me/tags/zsh/"/>
    
      <category term="python" scheme="http://blog.imgavin.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 使用笔记</title>
    <link href="http://blog.imgavin.me/2017/05/07/mongodb-note/"/>
    <id>http://blog.imgavin.me/2017/05/07/mongodb-note/</id>
    <published>2017-05-07T02:57:50.000Z</published>
    <updated>2018-04-23T07:45:39.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7.*"></a>CentOS 7.*</h2><p>添加 yum 源,新增文件 <code>/etc/yum.repos.d/mongodb-org-3.6.repo</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.6]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/3.6/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y mongodb-org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mongod.service</span><br></pre></td></tr></table></figure><p>你可以修改配置文件 <code>/etc/mongod.conf</code> ,变更日志和数据目录等.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">  path: /data/var/<span class="built_in">log</span>/mongodb/mongod.log <span class="comment"># 日志存放路径</span></span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/var/mongodb <span class="comment"># mongodb 数据存放路径</span></span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">  pidFilePath: /data/var/run/mongod.pid <span class="comment"># mongodb 进程 pid 存放路径</span></span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017 <span class="comment"># 绑定端口</span></span><br><span class="line">  bindIp: 127.0.0.1 <span class="comment"># 绑定 ip,只有此 ip 才可连接 mongodb</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart mongod.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mongod.service</span><br></pre></td></tr></table></figure><p><strong>参考</strong> </p><ul><li><a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="noopener">官网安装使用文档</a></li></ul><a id="more"></a><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="启用验证"><a href="#启用验证" class="headerlink" title="启用验证"></a>启用验证</h2><p><strong>默认的配置文件开启 mongod 实例是没有身份验证的,也就是谁都可以在本地连接并修改 mongodb 数据.</strong></p><p>所以,需要我们开启用户验证.</p><ol><li><p>连接到实例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br></pre></td></tr></table></figure></li><li><p>创建 root 用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 admin 数据库</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: <span class="string">"root"</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">"123456"</span>,</span><br><span class="line">    roles: [ &#123; role: <span class="string">"root"</span>, db: <span class="string">"admin"</span> &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断开连接</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>修改 <strong>mongod.conf</strong> 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改或添加如下两行</span></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启 mongod 实例</span></span><br><span class="line">service mongod restart</span><br></pre></td></tr></table></figure></li><li><p>连接 <strong>mongod</strong> 实例</p></li></ol><ul><li><p>连接时验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017 -u <span class="string">"root"</span> -p <span class="string">"123456"</span> --authenticationDatabase <span class="string">"admin"</span></span><br></pre></td></tr></table></figure></li><li><p>连接后验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正常连接</span></span><br><span class="line">mongo --port 27017</span><br><span class="line"><span class="comment"># 使用 admin 数据库</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 验证用户</span></span><br><span class="line">db.auth(<span class="string">"root"</span>, <span class="string">"123456"</span> )</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><p>其他</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改用户验证密码</span></span><br><span class="line">db.changeUserPassword(<span class="string">'root'</span>,<span class="string">'12345678'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">db.dropUser(<span class="string">'root'</span>)</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="MongoDB-内置角色"><a href="#MongoDB-内置角色" class="headerlink" title="MongoDB 内置角色"></a>MongoDB 内置角色</h2><ul><li><p>数据库用户角色</p><ul><li><p><strong>read</strong></p><p>提供对指定数据库的所有数据读取的能力</p></li><li><p><strong>readWrite</strong></p><p>提供对指定数据库的所有数据读取与写入修改的能力</p></li></ul></li><li><p>数据库管理角色</p><ul><li><p><strong>dbAdmin</strong></p><p>提供对指定数据库执行管理命令,索引创建与删除,统计等</p></li><li><p><strong>userAdmin</strong></p><p>提供对指定数据库上创建和修改角色和用户的能力.</p></li><li><p><strong>dbOwner</strong></p><p>提供对指定数据库的任何管理操作.相当于同时拥有 <strong>readWrite</strong>, <strong>dbAdmin</strong>, <strong>userAdmin</strong> 三个角色.</p></li></ul></li></ul><ul><li><p>集群管理角色</p><ul><li><strong>clusterAdmin</strong></li><li><strong>clusterManager</strong></li><li><strong>clusterMonitor</strong></li><li><strong>hostManager</strong></li></ul></li><li><p>备份和恢复角色</p><ul><li><strong>backup</strong></li><li><strong>restore</strong></li></ul></li><li><p>所有数据库角色</p><ul><li><p><strong>readAnyDatabase</strong></p><p>提供与 <strong>read</strong> 一样的角色权限,不对单一数据库,是对所有数据库适用.在 admin 数据库中添加.</p></li><li><p><strong>readWriteAnyDatabase</strong></p><p>提供与 <strong>readWrite</strong> 一样的角色权限,不对单一数据库,是对所有数据库适用.在 admin 数据库中添加.</p></li><li><p><strong>userAdminAnyDatabase</strong></p><p>提供与 <strong>userAdmin</strong> 一样的角色权限,不对单一数据库,是对所有数据库适用.在 admin 数据库中添加.</p></li><li><p><strong>dbAdminAnyDatabase</strong></p><p>提供与 <strong>dbAdmin</strong> 一样的角色权限,不对单一数据库,是对所有数据库适用.</p></li></ul></li><li><p>超级用户角色</p><ul><li><p><strong>root</strong></p><p>支持所有数据库的所有操作.</p><p>相当于<strong>readWriteAnyDatabase</strong>，<strong>dbAdminAnyDatabase</strong>，<strong>userAdminAnyDatabase</strong>，<strong>clusterAdmin</strong>,  <strong>restore</strong>和 <strong>backup</strong> 角色结合.</p></li></ul></li><li><p>内部角色</p><ul><li>__system</li></ul></li></ul><h1 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h1><h2 id="远程连接-CentOS7-系统的-MongoDB"><a href="#远程连接-CentOS7-系统的-MongoDB" class="headerlink" title="远程连接 CentOS7.* 系统的 MongoDB"></a>远程连接 CentOS7.* 系统的 MongoDB</h2><p>CentOS7.* 默认使用 <strong>firewall</strong> ,所以需要打开 MongoDB 连接端口(默认 27017)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=27017/tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>然后在另一台机器检查是否成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MongoDB 服务所在 ip</span></span><br><span class="line">telnet 192.168.1.0  27017</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="noopener">MongoDB 极简实践入门</a></p></li><li><p><a href="http://wiki.jikexueyuan.com/project/mongodb/mongodb-overview.html" target="_blank" rel="noopener">极客学院 MongoDB 教程</a></p></li><li><p><a href="http://docs.mongoing.com/manual-zh/" target="_blank" rel="noopener">MongoDB 中文文档</a></p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;CentOS-7&quot;&gt;&lt;a href=&quot;#CentOS-7&quot; class=&quot;headerlink&quot; title=&quot;CentOS 7.*&quot;&gt;&lt;/a&gt;CentOS 7.*&lt;/h2&gt;&lt;p&gt;添加 yum 源,新增文件 &lt;code&gt;/etc/yum.repos.d/mongodb-org-3.6.repo&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mongodb-org-3.6]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name=MongoDB Repository&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseurl=https://repo.mongodb.org/yum/redhat/&lt;span class=&quot;variable&quot;&gt;$releasever&lt;/span&gt;/mongodb-org/3.6/x86_64/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgcheck=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enabled=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y mongodb-org&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start mongod.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 停止&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop mongod.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 重启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl restart mongod.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开机启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt; mongod.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以修改配置文件 &lt;code&gt;/etc/mongod.conf&lt;/code&gt; ,变更日志和数据目录等.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemLog:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  destination: file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  logAppend: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  path: /data/var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/mongodb/mongod.log &lt;span class=&quot;comment&quot;&gt;# 日志存放路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;storage:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dbPath: /data/var/mongodb &lt;span class=&quot;comment&quot;&gt;# mongodb 数据存放路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  journal:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enabled: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;processManagement:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fork: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pidFilePath: /data/var/run/mongod.pid &lt;span class=&quot;comment&quot;&gt;# mongodb 进程 pid 存放路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  port: 27017 &lt;span class=&quot;comment&quot;&gt;# 绑定端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bindIp: 127.0.0.1 &lt;span class=&quot;comment&quot;&gt;# 绑定 ip,只有此 ip 才可连接 mongodb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start mongod.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop mongod.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 重启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl restart mongod.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开机自启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt; mongod.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网安装使用文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="json" scheme="http://blog.imgavin.me/tags/json/"/>
    
      <category term="mongodb" scheme="http://blog.imgavin.me/tags/mongodb/"/>
    
      <category term="nosql" scheme="http://blog.imgavin.me/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>爬取知乎数据 - 模拟登录</title>
    <link href="http://blog.imgavin.me/2017/04/27/python-zhihu-api/"/>
    <id>http://blog.imgavin.me/2017/04/27/python-zhihu-api/</id>
    <published>2017-04-27T01:49:35.000Z</published>
    <updated>2017-11-15T01:38:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时逛各大开发论坛、社区等，看到很多讨论爬取知乎数据的帖子。我也对此也有浓烈兴趣，正好最近学了<code>python</code>，拿来练手</p><p>再合适不过了，之后还可以拿这些数据去学习数据分析。</p><p>看到很多人都拿知乎 Web 端来爬取数据。这完全是没有问题的，但前端的网页结构很容易发生改变，只要一变，意味着代码也要变动。维护起来也就很频繁，很麻烦了。</p><p>但是，现在 IOS、Android 这样的移动端大行其道。而移动端的数据传递都是<code>Json</code>这样很规范的数据格式。数据规范，完整，便于我们爬取，也利于维护。所以这个系列文章使用移动端来爬取数据。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>一台 Android 设备或虚拟机（我这里使用 红米2A MIUI6 Android4.4 没有使用7.0以上版本的 Android，是方便抓取 HTTPS 请求）</li></ol><p><img src="p1.png" width="350px"></p><ol start="2"><li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">抓包工具，这里使用 Charles</a></li><li><a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">Android 反编译开源工具 jadx</a></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="移动端登录并抓取请求"><a href="#移动端登录并抓取请求" class="headerlink" title="移动端登录并抓取请求"></a>移动端登录并抓取请求</h3><img src="/2017/04/27/python-zhihu-api/p2.png"><img src="/2017/04/27/python-zhihu-api/p3.png"><h3 id="分析登录请求"><a href="#分析登录请求" class="headerlink" title="分析登录请求"></a>分析登录请求</h3><p>从图中可以得知登录请求地址是<code>https://api.zhihu.com/sign_in</code></p><p>很重要的参数是 header 里的 <code>Authorization</code> <code>Cookie</code> 和 post 请求中的<code>signature</code></p><p> header 里的其他参数都可以写死，之后的请求都带上就可以。</p><h3 id="动态参数的获取"><a href="#动态参数的获取" class="headerlink" title="动态参数的获取"></a>动态参数的获取</h3><ol><li><p><code>Cookie</code>，因为我们使用 python 的 <code>requests</code> 库，所以直接用它的 session 来处理。</p></li><li><p><code>Authorization</code>，如果没有此值会报如下错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'error'</span>: &#123;<span class="string">'message'</span>: <span class="string">'未设置验证方式'</span>, <span class="string">'code'</span>: <span class="number">602</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>不过，目前登录可以写死这个值。登录后会有一个<code>asscess_token</code>，之后的请求 header 中的<code>Authorization</code>都填入这个值才可以。</p></li><li><p><code>signature</code>，这是个签名。如果没有签名或签名错误，会报如下错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'error'</span>: &#123;<span class="string">'message'</span>: <span class="string">'Missing argument signature'</span>, <span class="string">'code'</span>: <span class="number">400</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">'error'</span>: &#123;<span class="string">'message'</span>: <span class="string">'Client authentication failed.'</span>, <span class="string">'code'</span>: <span class="number">602</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>所以，现在出现了一个难点，无法仿造这个签名。因为不知道这东西怎么生成的，用的哪种加密方式，加密的字段是什么，都不知道。但是，我们知道请求是从 Android 客户端发出的，加密方式肯定就在其中。</p><p>这时候，我们就必须反编译知乎的 APK 文件，去找它的签名方式。</p><p>从<a href="https://www.zhihu.com/app/" target="_blank" rel="noopener">官网</a>下载 APK，使用之前准备的 <code>jadx</code>反编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-Xmx4G"</span> jadx -j 1 -d zhihu futureve-mobile-update-release-4.18.0(477).apk</span><br></pre></td></tr></table></figure><p>我们使用 IDE 或编辑器打开反编译后的项目</p><p>打开文件 <code>com/zhihu/android/api/model/Authorisation.java</code></p><img src="/2017/04/27/python-zhihu-api/p4.png"><p>看到很关键的两个值<code>client_id</code>和<code>client_secret</code>。还有签名的生成方式，里面的参数都可以从之前抓包的请求 header 和 Post 的参数中拿到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grantType = &apos;password&apos;</span><br><span class="line">str = client_id = &apos;8d5227e0aaaa4797a763ac64e0c3b8&apos;</span><br><span class="line">authorisation.source = &apos;com.zhihu.android&apos;</span><br><span class="line">valueOf = 当前时间戳</span><br></pre></td></tr></table></figure><p>还有签名的算法，打开文件<code>com/zhihu/android/api/util/b.java</code></p><img src="/2017/04/27/python-zhihu-api/p5.png"><p>可以看到签名算法是<code>sha1</code>，使用 Python 模拟生成 signature</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_signature</span><span class="params">(key, data)</span>:</span></span><br><span class="line">    msg = data[<span class="string">'grant_type'</span>] + data[<span class="string">'client_id'</span>] + data[<span class="string">'source'</span>] + str(int(time.time()))</span><br><span class="line"></span><br><span class="line">    data[<span class="string">'signature'</span>] = hmac.new(</span><br><span class="line">        bytes(key, <span class="string">'utf-8'</span>),</span><br><span class="line">        bytes(msg, <span class="string">'utf-8'</span>),</span><br><span class="line">        hashlib.sha1</span><br><span class="line">    ).hexdigest()</span><br></pre></td></tr></table></figure><p>登录部分已完成，此项目<a href="https://github.com/gavin66" target="_blank" rel="noopener">gavin66</a>/<a href="https://github.com/gavin66" target="_blank" rel="noopener">zhihu_crawler</a> 在 Github 已开源。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时逛各大开发论坛、社区等，看到很多讨论爬取知乎数据的帖子。我也对此也有浓烈兴趣，正好最近学了&lt;code&gt;python&lt;/code&gt;，拿来练手&lt;/p&gt;
&lt;p&gt;再合适不过了，之后还可以拿这些数据去学习数据分析。&lt;/p&gt;
&lt;p&gt;看到很多人都拿知乎 Web 端来爬取数据。这完全是没有问题的，但前端的网页结构很容易发生改变，只要一变，意味着代码也要变动。维护起来也就很频繁，很麻烦了。&lt;/p&gt;
&lt;p&gt;但是，现在 IOS、Android 这样的移动端大行其道。而移动端的数据传递都是&lt;code&gt;Json&lt;/code&gt;这样很规范的数据格式。数据规范，完整，便于我们爬取，也利于维护。所以这个系列文章使用移动端来爬取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.imgavin.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://blog.imgavin.me/tags/python/"/>
    
      <category term="爬虫" scheme="http://blog.imgavin.me/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="知乎" scheme="http://blog.imgavin.me/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="api" scheme="http://blog.imgavin.me/tags/api/"/>
    
  </entry>
  
</feed>
